{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/replica/source/css/base.styl","path":"css/base.styl","modified":0,"renderable":1},{"_id":"themes/replica/source/css/calendar.styl","path":"css/calendar.styl","modified":0,"renderable":1},{"_id":"themes/replica/source/css/code.styl","path":"css/code.styl","modified":0,"renderable":1},{"_id":"themes/replica/source/css/footer.styl","path":"css/footer.styl","modified":0,"renderable":1},{"_id":"themes/replica/source/css/header.styl","path":"css/header.styl","modified":0,"renderable":1},{"_id":"themes/replica/source/css/main.css","path":"css/main.css","modified":0,"renderable":1},{"_id":"themes/replica/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/replica/source/css/post.styl","path":"css/post.styl","modified":0,"renderable":1},{"_id":"themes/replica/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/replica/source/css/navbar.styl","path":"css/navbar.styl","modified":0,"renderable":1}],"Cache":[{"_id":"themes/replica/.gitignore","hash":"b9c4d3cfcf0530fa5ee6eacf43499be4b0fd0505","modified":1558692152000},{"_id":"themes/replica/LICENSE","hash":"dae982bca6e2d3d0527e4619de459419c7c838fc","modified":1558692152000},{"_id":"themes/replica/_config.yml","hash":"44869cada3da45c57e51bb4941f4841ce53451d5","modified":1558692152000},{"_id":"themes/replica/README.md","hash":"119b32f0e90b1d266d163282a0f1beb16ad83607","modified":1558692152000},{"_id":"source/_posts/20180428-hexo.md","hash":"1a716f22d5919c27db61cd4f7888f1cf0b650318","modified":1603787693052},{"_id":"source/_posts/20180508-linux-record.md","hash":"8488aa40cbe0c58b67e10d068a648dfba270bd9b","modified":1603787695323},{"_id":"source/_posts/20180530-kafka.md","hash":"f4c3ebcfd5d30a666942453de842e42fd2448aa5","modified":1603787698489},{"_id":"source/_posts/20180530-greenplum.md","hash":"ebc0dc013bc2eb49da4d9bd43e411af4f716d348","modified":1603787697048},{"_id":"source/_posts/20190530-jupyter.md","hash":"eaba317802f8a55fb5e080dc00f19d7db3c441a8","modified":1603787701937},{"_id":"source/_posts/20190528-cuda.md","hash":"a768462e967c53d708949afd996d5c0169f3748c","modified":1603787700220},{"_id":"source/_posts/20190603-mxnet.md","hash":"efcaeed3ca114cb18d7ec18efa78f57a68ed46bd","modified":1603787708273},{"_id":"source/_posts/20190602-faceswap.md","hash":"a165d3e48749f99b840194a436b3549470124377","modified":1603787704493},{"_id":"source/_posts/20190603-py-setup.md","hash":"7d016b108ea09a24ccd1b7b49008dad6a8d567d8","modified":1603787709903},{"_id":"source/_posts/20190617-leetcode-443.md","hash":"7cac0af4af1c4c22a54a34954d1611a3d74874c2","modified":1603787713484},{"_id":"source/_posts/20190610-tornado-process.md","hash":"e55e6bbdd2789b23b12975ac33723d009fa426a8","modified":1603787711780},{"_id":"source/_posts/20190722-front.md","hash":"7187c0f8a1740d5192b7573c526e3476af768c1e","modified":1603787717732},{"_id":"source/_posts/20190625-mac-code-init.md","hash":"62a65d6ebfd8aed2b1663addd4a125fb1894c3e6","modified":1603790054813},{"_id":"source/_posts/20191120-generate-excel-columns.md","hash":"22bf1bf35b695a46bb1372bb4aabc08003f20bdc","modified":1603787719961},{"_id":"source/_posts/20200610-javascript-code.md","hash":"f1a01f2f112dc721c0f55229cb0add96cca03261","modified":1603787722418},{"_id":"source/about/index.md","hash":"f1bb8f42023744e4d6c32394224090aa72b376e6","modified":1563787623000},{"_id":"source/categories/index.md","hash":"c2a56afd33206597ea94184f3d6da2417a985c0d","modified":1563787623000},{"_id":"themes/replica/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1558692152000},{"_id":"themes/replica/.git/config","hash":"900fe5384f301a0a79861d5ed347fb597d54adcb","modified":1558692152000},{"_id":"source/tags/index.md","hash":"012afcdfcadb92b1bd8fc3028b98ff505ab19713","modified":1563787623000},{"_id":"themes/replica/.git/index","hash":"5d5990eaba24403ef88ff3e429ea0c35d64336eb","modified":1559126334000},{"_id":"themes/replica/.git/packed-refs","hash":"8b779fd668db858d93eea9fee46e93b2623ef094","modified":1558692152000},{"_id":"source/_posts/20201027-django-full-text-search.md","hash":"992ea7d5b6a2493a1f56a804fe612587d63f80bd","modified":1603787723970},{"_id":"themes/replica/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1558692148000},{"_id":"themes/replica/test/main.test.js","hash":"f754846394a9e01b6e0feb590dd1d9ccd0d5d4de","modified":1558692152000},{"_id":"themes/replica/layout/archive.ejs","hash":"272d2625953f60a28b90c074c3e2d606b3cd28d3","modified":1558692152000},{"_id":"themes/replica/layout/index.ejs","hash":"da2ab461d0d44dbd7f1bd0b36aa7d6b508aa34ba","modified":1558692152000},{"_id":"themes/replica/layout/layout.ejs","hash":"f6a45300b7e765a360de6903cb500fffdf5c7a74","modified":1558692152000},{"_id":"themes/replica/layout/page.ejs","hash":"f9b3d303225b32893b411f3638a3885c56e90cdb","modified":1558692152000},{"_id":"themes/replica/layout/post.ejs","hash":"851e9404a79274d2cb8a13808116dfcb53d069d4","modified":1558692152000},{"_id":"themes/replica/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1558692148000},{"_id":"themes/replica/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1558692148000},{"_id":"themes/replica/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1558692148000},{"_id":"themes/replica/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1558692148000},{"_id":"themes/replica/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1558692148000},{"_id":"themes/replica/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1558692148000},{"_id":"themes/replica/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1558692148000},{"_id":"themes/replica/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1558692148000},{"_id":"themes/replica/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1558692148000},{"_id":"themes/replica/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1558692148000},{"_id":"themes/replica/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1558692148000},{"_id":"themes/replica/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1558692148000},{"_id":"themes/replica/.git/logs/HEAD","hash":"f1b9d888fb4efbbfb94d9474d2d79889ab3cd25b","modified":1558692152000},{"_id":"themes/replica/source/css/_variables.styl","hash":"0a92cf3cc9eb415bbbab6e8877b6e8e74a9dcba9","modified":1558692152000},{"_id":"themes/replica/source/css/base.styl","hash":"2e8da20b7b1c4ac07d2d1f8d757280b9d5be448f","modified":1558692152000},{"_id":"themes/replica/source/css/calendar.styl","hash":"becd031536714de84b2eed0f3ef126c13b039b83","modified":1558692152000},{"_id":"themes/replica/source/css/code.styl","hash":"564801429f03baf12febbfdd26b22b75bbfa0942","modified":1558692152000},{"_id":"themes/replica/source/css/footer.styl","hash":"f50089ebf0e9b560983b09faad3cc9ced495aaed","modified":1558692152000},{"_id":"themes/replica/source/css/header.styl","hash":"b6819022575a1c6ed6039ac7cce8803c109a57f6","modified":1558692152000},{"_id":"themes/replica/source/css/main.css","hash":"79f4322bba35e45842b0f716b0729d63aa7e701d","modified":1558692152000},{"_id":"themes/replica/source/css/main.styl","hash":"be52d36fe639daf41bc3dd1ebbee5b095dc2fe94","modified":1558692152000},{"_id":"themes/replica/layout/_partial/article.ejs","hash":"a44a7c573357b68cfaf17241a5b8f766ec739e26","modified":1558692152000},{"_id":"themes/replica/source/css/post.styl","hash":"fe2ca0f09fcaca787fe265817feed5d3ec2ce94a","modified":1558692152000},{"_id":"themes/replica/source/js/main.js","hash":"0765b737c847cd7d0ab79997b7fdd8eb989b7aee","modified":1558692152000},{"_id":"themes/replica/source/css/navbar.styl","hash":"89ffd20429b149ac492334a8a02fda28cfedb93e","modified":1558692152000},{"_id":"themes/replica/layout/_partial/calendar.ejs","hash":"5c5168d6d633b1e59a692b52556b62d808e14527","modified":1558692152000},{"_id":"themes/replica/layout/_partial/footer.ejs","hash":"2b45f1d2d28d51b674f5df24ef846d307b7db81b","modified":1558692152000},{"_id":"themes/replica/layout/_partial/head.ejs","hash":"3c1dc5519a7a8d6a62b5be9d11301a0a5423df67","modified":1558692152000},{"_id":"themes/replica/layout/_partial/header.ejs","hash":"ccfbea43f40e18c3ea4c2d3737c31d492469c5f7","modified":1558692152000},{"_id":"themes/replica/layout/_partial/intro.ejs","hash":"237c0f450091987c8a288e0db3d1594d1cd73261","modified":1558692152000},{"_id":"themes/replica/layout/_partial/navbar-secondary.ejs","hash":"aac14de4f63d8d9c4fde0219d1206aa1f0d7627b","modified":1558692152000},{"_id":"themes/replica/layout/_partial/navbar.ejs","hash":"5c98071ca0ba54cb62bc2f6d05c1e5cdb87af720","modified":1558692152000},{"_id":"themes/replica/layout/_partial/script.ejs","hash":"c917cc709366b5706b1112a2d25f7daf387a12a1","modified":1558692152000},{"_id":"themes/replica/layout/_widget/baidutongji.ejs","hash":"f11adfa3dd5d47039b58bf9174a16ced87a10a6e","modified":1558692152000},{"_id":"themes/replica/layout/_widget/disqus.ejs","hash":"ac8a5ae8517318d094381621a6ef9c3e00e60c8f","modified":1558692152000},{"_id":"themes/replica/layout/_widget/gitalk.ejs","hash":"03547aaf44fe813f3d35613a086f567c4c0287dc","modified":1558692152000},{"_id":"themes/replica/layout/_widget/google-analytics.ejs","hash":"21e4951dd61edd4f09056485d2e15b177895b46f","modified":1558692152000},{"_id":"themes/replica/layout/_widget/google-custom-search.ejs","hash":"789f910476fe50827c6e9733efae44358c084360","modified":1558692152000},{"_id":"themes/replica/.git/refs/heads/master","hash":"afe70dd9446d94864d1910c7de846cf4a307d82e","modified":1558692152000},{"_id":"themes/replica/.git/objects/pack/pack-25e14df34c8683a1409db96d462ddd58d6270f92.idx","hash":"df029a497a6d1aafb64334c4bbe930611998dac1","modified":1558692152000},{"_id":"themes/replica/.git/objects/pack/pack-25e14df34c8683a1409db96d462ddd58d6270f92.pack","hash":"77627a6d21713b25079e3f3deff551a01aecc86d","modified":1558692152000},{"_id":"themes/replica/.git/logs/refs/heads/master","hash":"f1b9d888fb4efbbfb94d9474d2d79889ab3cd25b","modified":1558692152000},{"_id":"themes/replica/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1558692152000},{"_id":"themes/replica/.git/logs/refs/remotes/origin/HEAD","hash":"f1b9d888fb4efbbfb94d9474d2d79889ab3cd25b","modified":1558692152000}],"Category":[{"name":"后端","_id":"ckgrr9wvl0009geql6hfy9n9e"},{"name":"机器学习","_id":"ckgrr9wvv000igeqlc117g0nf"},{"name":"算法","_id":"ckgrr9ww9000wgeql4qam4zpz"},{"name":"前端","_id":"ckgrr9wwa0013geqlfkm39try"}],"Data":[],"Page":[{"_content":"# 关于我\n\n## 基本介绍\n\n一个来自魔都的小码农 主要从事python 后端，大数据处理\n目前的方向是 python 数据挖掘，对机器学习有浓厚兴趣\n\n## 技能标签\n\n* web (django/flask/tornado/sanic)\n\n* databases (mysql/postgresql/mongo)\n\n* big data (hadoop/spark/hdfs/greenplum)\n\n* machine learning (tensorflow/cnn/rnn)\n\n* message queue (kafka/rabbirmq)\n\n## 联系方式\n\n* 邮箱：youngs@yeah.net\n\n## 爱好\n\n* 徒步\n* 游戏 （吃鸡 LOL 王者）\n\n## 其他\n\n* python 相关问题欢迎探讨\n* 数据挖掘 在努力中","source":"about/index.md","raw":"# 关于我\n\n## 基本介绍\n\n一个来自魔都的小码农 主要从事python 后端，大数据处理\n目前的方向是 python 数据挖掘，对机器学习有浓厚兴趣\n\n## 技能标签\n\n* web (django/flask/tornado/sanic)\n\n* databases (mysql/postgresql/mongo)\n\n* big data (hadoop/spark/hdfs/greenplum)\n\n* machine learning (tensorflow/cnn/rnn)\n\n* message queue (kafka/rabbirmq)\n\n## 联系方式\n\n* 邮箱：youngs@yeah.net\n\n## 爱好\n\n* 徒步\n* 游戏 （吃鸡 LOL 王者）\n\n## 其他\n\n* python 相关问题欢迎探讨\n* 数据挖掘 在努力中","date":"2020-06-10T10:30:25.870Z","updated":"2019-07-22T09:27:03.000Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"ckgrr9wvi0007geqlg7kfay1c","content":"<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><h2 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h2><p>一个来自魔都的小码农 主要从事python 后端，大数据处理<br>目前的方向是 python 数据挖掘，对机器学习有浓厚兴趣</p>\n<h2 id=\"技能标签\"><a href=\"#技能标签\" class=\"headerlink\" title=\"技能标签\"></a>技能标签</h2><ul>\n<li><p>web (django/flask/tornado/sanic)</p>\n</li>\n<li><p>databases (mysql/postgresql/mongo)</p>\n</li>\n<li><p>big data (hadoop/spark/hdfs/greenplum)</p>\n</li>\n<li><p>machine learning (tensorflow/cnn/rnn)</p>\n</li>\n<li><p>message queue (kafka/rabbirmq)</p>\n</li>\n</ul>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><ul>\n<li>邮箱：<a href=\"mailto:youngs@yeah.net\" target=\"_blank\" rel=\"noopener\">youngs@yeah.net</a></li>\n</ul>\n<h2 id=\"爱好\"><a href=\"#爱好\" class=\"headerlink\" title=\"爱好\"></a>爱好</h2><ul>\n<li>徒步</li>\n<li>游戏 （吃鸡 LOL 王者）</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>python 相关问题欢迎探讨</li>\n<li>数据挖掘 在努力中</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><h2 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h2><p>一个来自魔都的小码农 主要从事python 后端，大数据处理<br>目前的方向是 python 数据挖掘，对机器学习有浓厚兴趣</p>\n<h2 id=\"技能标签\"><a href=\"#技能标签\" class=\"headerlink\" title=\"技能标签\"></a>技能标签</h2><ul>\n<li><p>web (django/flask/tornado/sanic)</p>\n</li>\n<li><p>databases (mysql/postgresql/mongo)</p>\n</li>\n<li><p>big data (hadoop/spark/hdfs/greenplum)</p>\n</li>\n<li><p>machine learning (tensorflow/cnn/rnn)</p>\n</li>\n<li><p>message queue (kafka/rabbirmq)</p>\n</li>\n</ul>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><ul>\n<li>邮箱：<a href=\"mailto:youngs@yeah.net\" target=\"_blank\" rel=\"noopener\">youngs@yeah.net</a></li>\n</ul>\n<h2 id=\"爱好\"><a href=\"#爱好\" class=\"headerlink\" title=\"爱好\"></a>爱好</h2><ul>\n<li>徒步</li>\n<li>游戏 （吃鸡 LOL 王者）</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>python 相关问题欢迎探讨</li>\n<li>数据挖掘 在努力中</li>\n</ul>\n"},{"title":"categories","date":"2019-05-29T10:19:56.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-05-29 18:19:56\n---\n","updated":"2019-07-22T09:27:03.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckgrr9wvo000bgeql4put3td0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-05-29T10:20:02.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-05-29 18:20:02\n---\n","updated":"2019-07-22T09:27:03.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckgrr9wvq000dgeqlau27cl62","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hexo 教程","date":"2018-04-28T03:18:40.000Z","_content":"## hexo 简介\n\nHexo是高效的静态站点生成框架，它基于Node.js。通过Hexo，你可以直接使用Markdown语法来撰写博客。\n\n[官网 中文](https://hexo.io/zh-cn/)\n\n## hexo 安装\n\n```bash\n# 全局安装\nnpm install hexo-cli -g\n\n# 初始化\nhexo init blog\n\n# 安装项目依赖\nnpm install\n\n# 插件安装\nnpm install --save hexo-renderer-sass\n\n# 启动本地化服务即可查看项目\nhexo server\n\n# 生成\nhexo g\n\n# 启动本地服务并监听,修改了配置文件还是需要从新生成一遍才可以看到效果\nhexo s --watch\n\n# 如果报一些奇怪的错误不知道怎么解决不妨清除一下重新生成发布\nhexo clean\n\n\n```\n\n## hexo 部署\n\n```bash\n# 部署依赖\nnpm install hexo-deployer-git --save\n\n# 部署文件冲突解决\nrm -rf .deploy_git\nhexo g\nhexo d\n```\n\n## ubuntu 安装\n\n### 环境介紹\n\n主机： ubuntu 18.04\n\n### 安裝依賴\n\n``` bash\nsudo apt-get install nodejs\nsudo apt install npm\nsudo apt install git\nnpm install -g hexo\n```\n\n### hexo 創建\n\n``` bash\nmkdir hexo_init\ncd hexo_init\nhexo init\nhexo g\nhexo s\n```\n\n登錄 http://localhost:4000  查看效果\n\n### 下載主題\n\n``` bash\ngit clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant\nnpm install hexo-renderer-pug --save\nnpm install hexo-renderer-sass --save\n```\n\n### 修改yml文件\n\n```yml\ntheme: maupassant\n\ndeploy:\n  type: git\n  repository: https://github.com/Leo-youngs/Leo-youngs.github.io\n  branch: master\n  message: update\n```\n\n### 生成静态文件\n\n```bash\nhexo generate\n```\n\n更多信息: [Generating](https://hexo.io/docs/generating.html)\n\n### 发布\n\n```bash\nhexo deploy\n```\n\n更多信息: [Deployment](https://hexo.io/docs/deployment.html)\n\n### 其他命令\n\n```bash\n# 生成新的文件夹 用于显示标签分类\nhexo new page categories\nhexo new page tags\n\n# 清理 生成 展示\nhexo clean && hexo g && hexo s\n\n# 生成新的页面\nhexo new mxnet\n\n```\n\n## 主题库\n\n[Themes](https://hexo.io/themes/index.html)","source":"_posts/20180428-hexo.md","raw":"---\ntitle: Hexo 教程\ndate: 2018-04-28 11:18:40\ntags: 博客搭建\n---\n## hexo 简介\n\nHexo是高效的静态站点生成框架，它基于Node.js。通过Hexo，你可以直接使用Markdown语法来撰写博客。\n\n[官网 中文](https://hexo.io/zh-cn/)\n\n## hexo 安装\n\n```bash\n# 全局安装\nnpm install hexo-cli -g\n\n# 初始化\nhexo init blog\n\n# 安装项目依赖\nnpm install\n\n# 插件安装\nnpm install --save hexo-renderer-sass\n\n# 启动本地化服务即可查看项目\nhexo server\n\n# 生成\nhexo g\n\n# 启动本地服务并监听,修改了配置文件还是需要从新生成一遍才可以看到效果\nhexo s --watch\n\n# 如果报一些奇怪的错误不知道怎么解决不妨清除一下重新生成发布\nhexo clean\n\n\n```\n\n## hexo 部署\n\n```bash\n# 部署依赖\nnpm install hexo-deployer-git --save\n\n# 部署文件冲突解决\nrm -rf .deploy_git\nhexo g\nhexo d\n```\n\n## ubuntu 安装\n\n### 环境介紹\n\n主机： ubuntu 18.04\n\n### 安裝依賴\n\n``` bash\nsudo apt-get install nodejs\nsudo apt install npm\nsudo apt install git\nnpm install -g hexo\n```\n\n### hexo 創建\n\n``` bash\nmkdir hexo_init\ncd hexo_init\nhexo init\nhexo g\nhexo s\n```\n\n登錄 http://localhost:4000  查看效果\n\n### 下載主題\n\n``` bash\ngit clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant\nnpm install hexo-renderer-pug --save\nnpm install hexo-renderer-sass --save\n```\n\n### 修改yml文件\n\n```yml\ntheme: maupassant\n\ndeploy:\n  type: git\n  repository: https://github.com/Leo-youngs/Leo-youngs.github.io\n  branch: master\n  message: update\n```\n\n### 生成静态文件\n\n```bash\nhexo generate\n```\n\n更多信息: [Generating](https://hexo.io/docs/generating.html)\n\n### 发布\n\n```bash\nhexo deploy\n```\n\n更多信息: [Deployment](https://hexo.io/docs/deployment.html)\n\n### 其他命令\n\n```bash\n# 生成新的文件夹 用于显示标签分类\nhexo new page categories\nhexo new page tags\n\n# 清理 生成 展示\nhexo clean && hexo g && hexo s\n\n# 生成新的页面\nhexo new mxnet\n\n```\n\n## 主题库\n\n[Themes](https://hexo.io/themes/index.html)","slug":"hexo","published":1,"updated":"2020-10-27T08:34:53.052Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrr9wv20000geqlgega11q6","content":"<h2 id=\"hexo-简介\"><a href=\"#hexo-简介\" class=\"headerlink\" title=\"hexo 简介\"></a>hexo 简介</h2><p>Hexo是高效的静态站点生成框架，它基于Node.js。通过Hexo，你可以直接使用Markdown语法来撰写博客。</p>\n<p><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">官网 中文</a></p>\n<h2 id=\"hexo-安装\"><a href=\"#hexo-安装\" class=\"headerlink\" title=\"hexo 安装\"></a>hexo 安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全局安装</span></span><br><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化</span></span><br><span class=\"line\">hexo init blog</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装项目依赖</span></span><br><span class=\"line\">npm install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 插件安装</span></span><br><span class=\"line\">npm install --save hexo-renderer-sass</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动本地化服务即可查看项目</span></span><br><span class=\"line\">hexo server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成</span></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动本地服务并监听,修改了配置文件还是需要从新生成一遍才可以看到效果</span></span><br><span class=\"line\">hexo s --watch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果报一些奇怪的错误不知道怎么解决不妨清除一下重新生成发布</span></span><br><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hexo-部署\"><a href=\"#hexo-部署\" class=\"headerlink\" title=\"hexo 部署\"></a>hexo 部署</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 部署依赖</span></span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 部署文件冲突解决</span></span><br><span class=\"line\">rm -rf .deploy_git</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ubuntu-安装\"><a href=\"#ubuntu-安装\" class=\"headerlink\" title=\"ubuntu 安装\"></a>ubuntu 安装</h2><h3 id=\"环境介紹\"><a href=\"#环境介紹\" class=\"headerlink\" title=\"环境介紹\"></a>环境介紹</h3><p>主机： ubuntu 18.04</p>\n<h3 id=\"安裝依賴\"><a href=\"#安裝依賴\" class=\"headerlink\" title=\"安裝依賴\"></a>安裝依賴</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nodejs</span><br><span class=\"line\">sudo apt install npm</span><br><span class=\"line\">sudo apt install git</span><br><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hexo-創建\"><a href=\"#hexo-創建\" class=\"headerlink\" title=\"hexo 創建\"></a>hexo 創建</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir hexo_init</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hexo_init</span><br><span class=\"line\">hexo init</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<p>登錄 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a>  查看效果</p>\n<h3 id=\"下載主題\"><a href=\"#下載主題\" class=\"headerlink\" title=\"下載主題\"></a>下載主題</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</span><br><span class=\"line\">npm install hexo-renderer-pug --save</span><br><span class=\"line\">npm install hexo-renderer-sass --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改yml文件\"><a href=\"#修改yml文件\" class=\"headerlink\" title=\"修改yml文件\"></a>修改yml文件</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">maupassant</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span> <span class=\"string\">https://github.com/Leo-youngs/Leo-youngs.github.io</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">message:</span> <span class=\"string\">update</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>更多信息: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>更多信息: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<h3 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成新的文件夹 用于显示标签分类</span></span><br><span class=\"line\">hexo new page categories</span><br><span class=\"line\">hexo new page tags</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清理 生成 展示</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成新的页面</span></span><br><span class=\"line\">hexo new mxnet</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"主题库\"><a href=\"#主题库\" class=\"headerlink\" title=\"主题库\"></a>主题库</h2><p><a href=\"https://hexo.io/themes/index.html\" target=\"_blank\" rel=\"noopener\">Themes</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"hexo-简介\"><a href=\"#hexo-简介\" class=\"headerlink\" title=\"hexo 简介\"></a>hexo 简介</h2><p>Hexo是高效的静态站点生成框架，它基于Node.js。通过Hexo，你可以直接使用Markdown语法来撰写博客。</p>\n<p><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">官网 中文</a></p>\n<h2 id=\"hexo-安装\"><a href=\"#hexo-安装\" class=\"headerlink\" title=\"hexo 安装\"></a>hexo 安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全局安装</span></span><br><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化</span></span><br><span class=\"line\">hexo init blog</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装项目依赖</span></span><br><span class=\"line\">npm install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 插件安装</span></span><br><span class=\"line\">npm install --save hexo-renderer-sass</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动本地化服务即可查看项目</span></span><br><span class=\"line\">hexo server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成</span></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动本地服务并监听,修改了配置文件还是需要从新生成一遍才可以看到效果</span></span><br><span class=\"line\">hexo s --watch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果报一些奇怪的错误不知道怎么解决不妨清除一下重新生成发布</span></span><br><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hexo-部署\"><a href=\"#hexo-部署\" class=\"headerlink\" title=\"hexo 部署\"></a>hexo 部署</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 部署依赖</span></span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 部署文件冲突解决</span></span><br><span class=\"line\">rm -rf .deploy_git</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ubuntu-安装\"><a href=\"#ubuntu-安装\" class=\"headerlink\" title=\"ubuntu 安装\"></a>ubuntu 安装</h2><h3 id=\"环境介紹\"><a href=\"#环境介紹\" class=\"headerlink\" title=\"环境介紹\"></a>环境介紹</h3><p>主机： ubuntu 18.04</p>\n<h3 id=\"安裝依賴\"><a href=\"#安裝依賴\" class=\"headerlink\" title=\"安裝依賴\"></a>安裝依賴</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nodejs</span><br><span class=\"line\">sudo apt install npm</span><br><span class=\"line\">sudo apt install git</span><br><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hexo-創建\"><a href=\"#hexo-創建\" class=\"headerlink\" title=\"hexo 創建\"></a>hexo 創建</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir hexo_init</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hexo_init</span><br><span class=\"line\">hexo init</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<p>登錄 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a>  查看效果</p>\n<h3 id=\"下載主題\"><a href=\"#下載主題\" class=\"headerlink\" title=\"下載主題\"></a>下載主題</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</span><br><span class=\"line\">npm install hexo-renderer-pug --save</span><br><span class=\"line\">npm install hexo-renderer-sass --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改yml文件\"><a href=\"#修改yml文件\" class=\"headerlink\" title=\"修改yml文件\"></a>修改yml文件</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">maupassant</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span> <span class=\"string\">https://github.com/Leo-youngs/Leo-youngs.github.io</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">message:</span> <span class=\"string\">update</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>更多信息: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>更多信息: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<h3 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成新的文件夹 用于显示标签分类</span></span><br><span class=\"line\">hexo new page categories</span><br><span class=\"line\">hexo new page tags</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清理 生成 展示</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成新的页面</span></span><br><span class=\"line\">hexo new mxnet</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"主题库\"><a href=\"#主题库\" class=\"headerlink\" title=\"主题库\"></a>主题库</h2><p><a href=\"https://hexo.io/themes/index.html\" target=\"_blank\" rel=\"noopener\">Themes</a></p>\n"},{"title":"Code 日常","date":"2018-05-08T02:07:55.000Z","_content":"\n## 日常问题、小技巧收集\n\n主要记录日常遇到的问题及解决方法\n包括但不限于 python/linux/docker/database\n\n## linux命令终端显示-bash-4.2#解决方法\n\n* 近期在折腾docker centos 使用别人的镜像 发现终端显示 `bash-4.2#` 很是忧伤（之前遇到，好记性不如烂笔头）\n\n    ``` bash\n    # 这里的root 可以替换成你的用户\n    cp /etc/skel/.bashrc /root/  \n    cp /etc/skel/.bash_profile  /root/  \n\n    ```\n\n* 然后 exit 重新登录就好了\n\n## linux 文件编辑\n\n* 在线上操作文件 一般都是 vi 但是 vi 适用于各种花式操作 这里介绍实用的简单的操作\n\n    ```bash\n\n    # echo > file 覆盖文件\n    echo \"\" > file  # 这个操作可以快速清空某一文件\n    echo \"Hello World\" > file\n    # echo >> file 追加文件\n    echo \"Hello World\" >> file\n\n\n    # cat 配合 EOF > 覆盖  >> 追加\n    cat << EOF > file\n    > Hello\n    > Hello world\n    ```\n\n    EOF是END Of File的缩写,表示自定义终止符.既然自定义,那么EOF就不是固定的,可以随意设置别名,在linux按ctrl-d就代表EOF\n    **EOF一般会配合cat能够多行文本输出.**\n\n## pyhon matplotlib 安装\n\n* 问题： 安装matplotlib python-tk 网上解决方法需要重新编译 python matplotlib error python Tkinter module not found on Ubuntu\n* 解决方案\n\n``` bash\nsudo apt-get install python3.6-tk\n```\n\n> [stackoverflow  链接](https://stackoverflow.com/questions/6084416/tkinter-module-not-found-on-ubuntu)\n\n## docker 镜像加速\n\n``` bash\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://etsgrm2s.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n## ubuntu-18.04 安装 mysql-5.7 root 密码\n\n``` bash\nsudo apt install mysql-server mysql-client\n\n# 查询 默认 用户名 密码\nsudo vi /etc/mysql/debian.cnf\n\n# 登录 mysql 修改 root 密码\nupdate mysql.user set authentication_string=password('password') where user='root';\n\n# 修改远程连接\nupdate user set host = '%' where user = 'root';\n\n# 修改验证方式\nUPDATE user SET plugin='mysql_native_password' WHERE User='root';\n\n\n## option 2\n\nmysql> CREATE USER 'YOUR_SYSTEM_USER'@'localhost' IDENTIFIED BY '';\nmysql> GRANT ALL PRIVILEGES ON *.* TO 'YOUR_SYSTEM_USER'@'localhost';\nmysql> UPDATE user SET plugin='auth_socket' WHERE User='YOUR_SYSTEM_USER';\nmysql> FLUSH PRIVILEGES;\n```\n\n## python 相关bug\n\n1. python 换源以及格式化pip输出\n\n    ```bash\n\n    cd ~ & mkdir .pip\n    vi ~/.pip/pip.conf\n\n    [global]\n    timeout = 60\n    index-url = http://pypi.douban.com/simple\n    trusted-host = pypi.douban.com\n    format=columns\n    ```\n\n2. 在运行 tensorboard 出错\n\n    原因分析：mxnet 要求 numpy 的版本与tensorboard不匹配\n    `mxnet 1.4.1 has requirement numpy<1.15.0,>=1.8.2, but you'll have numpy 1.16.3 which is incompatible.`\n\n    ```bash\n    # 错误详情\n    ➜  tensorflow git:(master) ✗ tensorboard --logdir ./\n    ModuleNotFoundError: No module named 'numpy.core._multiarray_umath'\n    ImportError: numpy.core.multiarray failed to import\n\n    The above exception was the direct cause of the following exception:\n\n    Traceback (most recent call last):\n    File \"<frozen importlib._bootstrap>\", line 968, in _find_and_load\n    SystemError: <class '_frozen_importlib._ModuleLockManager'> returned a result with an error set\n    ImportError: numpy.core._multiarray_umath failed to import\n    ImportError: numpy.core.umath failed to import\n    2019-06-03 12:42:23.607527: F tensorflow/python/lib/core/bfloat16.cc:675] Check failed: PyBfloat16_Type.tp_base != nullptr\n    [1]    79828 abort      tensorboard --logdir ./\n\n    # 解决\n    pip3 install -U numpy\n\n    # 启动\n    tensorboard --logdir  ./\n    ```\n","source":"_posts/20180508-linux-record.md","raw":"---\ntitle: Code 日常\ndate: 2018-05-08 10:07:55\ntags: linux\ncategories: 后端\n---\n\n## 日常问题、小技巧收集\n\n主要记录日常遇到的问题及解决方法\n包括但不限于 python/linux/docker/database\n\n## linux命令终端显示-bash-4.2#解决方法\n\n* 近期在折腾docker centos 使用别人的镜像 发现终端显示 `bash-4.2#` 很是忧伤（之前遇到，好记性不如烂笔头）\n\n    ``` bash\n    # 这里的root 可以替换成你的用户\n    cp /etc/skel/.bashrc /root/  \n    cp /etc/skel/.bash_profile  /root/  \n\n    ```\n\n* 然后 exit 重新登录就好了\n\n## linux 文件编辑\n\n* 在线上操作文件 一般都是 vi 但是 vi 适用于各种花式操作 这里介绍实用的简单的操作\n\n    ```bash\n\n    # echo > file 覆盖文件\n    echo \"\" > file  # 这个操作可以快速清空某一文件\n    echo \"Hello World\" > file\n    # echo >> file 追加文件\n    echo \"Hello World\" >> file\n\n\n    # cat 配合 EOF > 覆盖  >> 追加\n    cat << EOF > file\n    > Hello\n    > Hello world\n    ```\n\n    EOF是END Of File的缩写,表示自定义终止符.既然自定义,那么EOF就不是固定的,可以随意设置别名,在linux按ctrl-d就代表EOF\n    **EOF一般会配合cat能够多行文本输出.**\n\n## pyhon matplotlib 安装\n\n* 问题： 安装matplotlib python-tk 网上解决方法需要重新编译 python matplotlib error python Tkinter module not found on Ubuntu\n* 解决方案\n\n``` bash\nsudo apt-get install python3.6-tk\n```\n\n> [stackoverflow  链接](https://stackoverflow.com/questions/6084416/tkinter-module-not-found-on-ubuntu)\n\n## docker 镜像加速\n\n``` bash\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://etsgrm2s.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n## ubuntu-18.04 安装 mysql-5.7 root 密码\n\n``` bash\nsudo apt install mysql-server mysql-client\n\n# 查询 默认 用户名 密码\nsudo vi /etc/mysql/debian.cnf\n\n# 登录 mysql 修改 root 密码\nupdate mysql.user set authentication_string=password('password') where user='root';\n\n# 修改远程连接\nupdate user set host = '%' where user = 'root';\n\n# 修改验证方式\nUPDATE user SET plugin='mysql_native_password' WHERE User='root';\n\n\n## option 2\n\nmysql> CREATE USER 'YOUR_SYSTEM_USER'@'localhost' IDENTIFIED BY '';\nmysql> GRANT ALL PRIVILEGES ON *.* TO 'YOUR_SYSTEM_USER'@'localhost';\nmysql> UPDATE user SET plugin='auth_socket' WHERE User='YOUR_SYSTEM_USER';\nmysql> FLUSH PRIVILEGES;\n```\n\n## python 相关bug\n\n1. python 换源以及格式化pip输出\n\n    ```bash\n\n    cd ~ & mkdir .pip\n    vi ~/.pip/pip.conf\n\n    [global]\n    timeout = 60\n    index-url = http://pypi.douban.com/simple\n    trusted-host = pypi.douban.com\n    format=columns\n    ```\n\n2. 在运行 tensorboard 出错\n\n    原因分析：mxnet 要求 numpy 的版本与tensorboard不匹配\n    `mxnet 1.4.1 has requirement numpy<1.15.0,>=1.8.2, but you'll have numpy 1.16.3 which is incompatible.`\n\n    ```bash\n    # 错误详情\n    ➜  tensorflow git:(master) ✗ tensorboard --logdir ./\n    ModuleNotFoundError: No module named 'numpy.core._multiarray_umath'\n    ImportError: numpy.core.multiarray failed to import\n\n    The above exception was the direct cause of the following exception:\n\n    Traceback (most recent call last):\n    File \"<frozen importlib._bootstrap>\", line 968, in _find_and_load\n    SystemError: <class '_frozen_importlib._ModuleLockManager'> returned a result with an error set\n    ImportError: numpy.core._multiarray_umath failed to import\n    ImportError: numpy.core.umath failed to import\n    2019-06-03 12:42:23.607527: F tensorflow/python/lib/core/bfloat16.cc:675] Check failed: PyBfloat16_Type.tp_base != nullptr\n    [1]    79828 abort      tensorboard --logdir ./\n\n    # 解决\n    pip3 install -U numpy\n\n    # 启动\n    tensorboard --logdir  ./\n    ```\n","slug":"linux-record","published":1,"updated":"2020-10-27T08:34:55.323Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrr9wv90001geqlh0103mst","content":"<h2 id=\"日常问题、小技巧收集\"><a href=\"#日常问题、小技巧收集\" class=\"headerlink\" title=\"日常问题、小技巧收集\"></a>日常问题、小技巧收集</h2><p>主要记录日常遇到的问题及解决方法<br>包括但不限于 python/linux/docker/database</p>\n<h2 id=\"linux命令终端显示-bash-4-2-解决方法\"><a href=\"#linux命令终端显示-bash-4-2-解决方法\" class=\"headerlink\" title=\"linux命令终端显示-bash-4.2#解决方法\"></a>linux命令终端显示-bash-4.2#解决方法</h2><ul>\n<li><p>近期在折腾docker centos 使用别人的镜像 发现终端显示 <code>bash-4.2#</code> 很是忧伤（之前遇到，好记性不如烂笔头）</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里的root 可以替换成你的用户</span></span><br><span class=\"line\">cp /etc/skel/.bashrc /root/  </span><br><span class=\"line\">cp /etc/skel/.bash_profile  /root/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后 exit 重新登录就好了</p>\n</li>\n</ul>\n<h2 id=\"linux-文件编辑\"><a href=\"#linux-文件编辑\" class=\"headerlink\" title=\"linux 文件编辑\"></a>linux 文件编辑</h2><ul>\n<li><p>在线上操作文件 一般都是 vi 但是 vi 适用于各种花式操作 这里介绍实用的简单的操作</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># echo &gt; file 覆盖文件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\"</span> &gt; file  <span class=\"comment\"># 这个操作可以快速清空某一文件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Hello World\"</span> &gt; file</span><br><span class=\"line\"><span class=\"comment\"># echo &gt;&gt; file 追加文件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Hello World\"</span> &gt;&gt; file</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># cat 配合 EOF &gt; 覆盖  &gt;&gt; 追加</span></span><br><span class=\"line\">cat &lt;&lt; EOF &gt; file</span><br><span class=\"line\">&gt; Hello</span><br><span class=\"line\">&gt; Hello world</span><br></pre></td></tr></table></figure>\n\n<p>  EOF是END Of File的缩写,表示自定义终止符.既然自定义,那么EOF就不是固定的,可以随意设置别名,在linux按ctrl-d就代表EOF<br>  <strong>EOF一般会配合cat能够多行文本输出.</strong></p>\n</li>\n</ul>\n<h2 id=\"pyhon-matplotlib-安装\"><a href=\"#pyhon-matplotlib-安装\" class=\"headerlink\" title=\"pyhon matplotlib 安装\"></a>pyhon matplotlib 安装</h2><ul>\n<li>问题： 安装matplotlib python-tk 网上解决方法需要重新编译 python matplotlib error python Tkinter module not found on Ubuntu</li>\n<li>解决方案</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python3.6-tk</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://stackoverflow.com/questions/6084416/tkinter-module-not-found-on-ubuntu\" target=\"_blank\" rel=\"noopener\">stackoverflow  链接</a></p>\n</blockquote>\n<h2 id=\"docker-镜像加速\"><a href=\"#docker-镜像加速\" class=\"headerlink\" title=\"docker 镜像加速\"></a>docker 镜像加速</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /etc/docker</span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class=\"string\">'EOF'</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"registry-mirrors\"</span>: [<span class=\"string\">\"https://etsgrm2s.mirror.aliyuncs.com\"</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ubuntu-18-04-安装-mysql-5-7-root-密码\"><a href=\"#ubuntu-18-04-安装-mysql-5-7-root-密码\" class=\"headerlink\" title=\"ubuntu-18.04 安装 mysql-5.7 root 密码\"></a>ubuntu-18.04 安装 mysql-5.7 root 密码</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install mysql-server mysql-client</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查询 默认 用户名 密码</span></span><br><span class=\"line\">sudo vi /etc/mysql/debian.cnf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 登录 mysql 修改 root 密码</span></span><br><span class=\"line\">update mysql.user <span class=\"built_in\">set</span> authentication_string=password(<span class=\"string\">'password'</span>) <span class=\"built_in\">where</span> user=<span class=\"string\">'root'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改远程连接</span></span><br><span class=\"line\">update user <span class=\"built_in\">set</span> host = <span class=\"string\">'%'</span> <span class=\"built_in\">where</span> user = <span class=\"string\">'root'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改验证方式</span></span><br><span class=\"line\">UPDATE user SET plugin=<span class=\"string\">'mysql_native_password'</span> WHERE User=<span class=\"string\">'root'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## option 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; CREATE USER <span class=\"string\">'YOUR_SYSTEM_USER'</span>@<span class=\"string\">'localhost'</span> IDENTIFIED BY <span class=\"string\">''</span>;</span><br><span class=\"line\">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO <span class=\"string\">'YOUR_SYSTEM_USER'</span>@<span class=\"string\">'localhost'</span>;</span><br><span class=\"line\">mysql&gt; UPDATE user SET plugin=<span class=\"string\">'auth_socket'</span> WHERE User=<span class=\"string\">'YOUR_SYSTEM_USER'</span>;</span><br><span class=\"line\">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"python-相关bug\"><a href=\"#python-相关bug\" class=\"headerlink\" title=\"python 相关bug\"></a>python 相关bug</h2><ol>\n<li><p>python 换源以及格式化pip输出</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~ &amp; mkdir .pip</span><br><span class=\"line\">vi ~/.pip/pip.conf</span><br><span class=\"line\"></span><br><span class=\"line\">[global]</span><br><span class=\"line\">timeout = 60</span><br><span class=\"line\">index-url = http://pypi.douban.com/simple</span><br><span class=\"line\">trusted-host = pypi.douban.com</span><br><span class=\"line\">format=columns</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在运行 tensorboard 出错</p>\n<p> 原因分析：mxnet 要求 numpy 的版本与tensorboard不匹配<br> <code>mxnet 1.4.1 has requirement numpy&lt;1.15.0,&gt;=1.8.2, but you&#39;ll have numpy 1.16.3 which is incompatible.</code></p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 错误详情</span></span><br><span class=\"line\">➜  tensorflow git:(master) ✗ tensorboard --logdir ./</span><br><span class=\"line\">ModuleNotFoundError: No module named <span class=\"string\">'numpy.core._multiarray_umath'</span></span><br><span class=\"line\">ImportError: numpy.core.multiarray failed to import</span><br><span class=\"line\"></span><br><span class=\"line\">The above exception was the direct cause of the following exception:</span><br><span class=\"line\"></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">File <span class=\"string\">\"&lt;frozen importlib._bootstrap&gt;\"</span>, line 968, <span class=\"keyword\">in</span> _find_and_load</span><br><span class=\"line\">SystemError: &lt;class <span class=\"string\">'_frozen_importlib._ModuleLockManager'</span>&gt; returned a result with an error <span class=\"built_in\">set</span></span><br><span class=\"line\">ImportError: numpy.core._multiarray_umath failed to import</span><br><span class=\"line\">ImportError: numpy.core.umath failed to import</span><br><span class=\"line\">2019-06-03 12:42:23.607527: F tensorflow/python/lib/core/bfloat16.cc:675] Check failed: PyBfloat16_Type.tp_base != nullptr</span><br><span class=\"line\">[1]    79828 abort      tensorboard --logdir ./</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决</span></span><br><span class=\"line\">pip3 install -U numpy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">tensorboard --logdir  ./</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"日常问题、小技巧收集\"><a href=\"#日常问题、小技巧收集\" class=\"headerlink\" title=\"日常问题、小技巧收集\"></a>日常问题、小技巧收集</h2><p>主要记录日常遇到的问题及解决方法<br>包括但不限于 python/linux/docker/database</p>\n<h2 id=\"linux命令终端显示-bash-4-2-解决方法\"><a href=\"#linux命令终端显示-bash-4-2-解决方法\" class=\"headerlink\" title=\"linux命令终端显示-bash-4.2#解决方法\"></a>linux命令终端显示-bash-4.2#解决方法</h2><ul>\n<li><p>近期在折腾docker centos 使用别人的镜像 发现终端显示 <code>bash-4.2#</code> 很是忧伤（之前遇到，好记性不如烂笔头）</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里的root 可以替换成你的用户</span></span><br><span class=\"line\">cp /etc/skel/.bashrc /root/  </span><br><span class=\"line\">cp /etc/skel/.bash_profile  /root/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后 exit 重新登录就好了</p>\n</li>\n</ul>\n<h2 id=\"linux-文件编辑\"><a href=\"#linux-文件编辑\" class=\"headerlink\" title=\"linux 文件编辑\"></a>linux 文件编辑</h2><ul>\n<li><p>在线上操作文件 一般都是 vi 但是 vi 适用于各种花式操作 这里介绍实用的简单的操作</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># echo &gt; file 覆盖文件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\"</span> &gt; file  <span class=\"comment\"># 这个操作可以快速清空某一文件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Hello World\"</span> &gt; file</span><br><span class=\"line\"><span class=\"comment\"># echo &gt;&gt; file 追加文件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Hello World\"</span> &gt;&gt; file</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># cat 配合 EOF &gt; 覆盖  &gt;&gt; 追加</span></span><br><span class=\"line\">cat &lt;&lt; EOF &gt; file</span><br><span class=\"line\">&gt; Hello</span><br><span class=\"line\">&gt; Hello world</span><br></pre></td></tr></table></figure>\n\n<p>  EOF是END Of File的缩写,表示自定义终止符.既然自定义,那么EOF就不是固定的,可以随意设置别名,在linux按ctrl-d就代表EOF<br>  <strong>EOF一般会配合cat能够多行文本输出.</strong></p>\n</li>\n</ul>\n<h2 id=\"pyhon-matplotlib-安装\"><a href=\"#pyhon-matplotlib-安装\" class=\"headerlink\" title=\"pyhon matplotlib 安装\"></a>pyhon matplotlib 安装</h2><ul>\n<li>问题： 安装matplotlib python-tk 网上解决方法需要重新编译 python matplotlib error python Tkinter module not found on Ubuntu</li>\n<li>解决方案</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python3.6-tk</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://stackoverflow.com/questions/6084416/tkinter-module-not-found-on-ubuntu\" target=\"_blank\" rel=\"noopener\">stackoverflow  链接</a></p>\n</blockquote>\n<h2 id=\"docker-镜像加速\"><a href=\"#docker-镜像加速\" class=\"headerlink\" title=\"docker 镜像加速\"></a>docker 镜像加速</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /etc/docker</span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class=\"string\">'EOF'</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"registry-mirrors\"</span>: [<span class=\"string\">\"https://etsgrm2s.mirror.aliyuncs.com\"</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ubuntu-18-04-安装-mysql-5-7-root-密码\"><a href=\"#ubuntu-18-04-安装-mysql-5-7-root-密码\" class=\"headerlink\" title=\"ubuntu-18.04 安装 mysql-5.7 root 密码\"></a>ubuntu-18.04 安装 mysql-5.7 root 密码</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install mysql-server mysql-client</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查询 默认 用户名 密码</span></span><br><span class=\"line\">sudo vi /etc/mysql/debian.cnf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 登录 mysql 修改 root 密码</span></span><br><span class=\"line\">update mysql.user <span class=\"built_in\">set</span> authentication_string=password(<span class=\"string\">'password'</span>) <span class=\"built_in\">where</span> user=<span class=\"string\">'root'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改远程连接</span></span><br><span class=\"line\">update user <span class=\"built_in\">set</span> host = <span class=\"string\">'%'</span> <span class=\"built_in\">where</span> user = <span class=\"string\">'root'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改验证方式</span></span><br><span class=\"line\">UPDATE user SET plugin=<span class=\"string\">'mysql_native_password'</span> WHERE User=<span class=\"string\">'root'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## option 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; CREATE USER <span class=\"string\">'YOUR_SYSTEM_USER'</span>@<span class=\"string\">'localhost'</span> IDENTIFIED BY <span class=\"string\">''</span>;</span><br><span class=\"line\">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO <span class=\"string\">'YOUR_SYSTEM_USER'</span>@<span class=\"string\">'localhost'</span>;</span><br><span class=\"line\">mysql&gt; UPDATE user SET plugin=<span class=\"string\">'auth_socket'</span> WHERE User=<span class=\"string\">'YOUR_SYSTEM_USER'</span>;</span><br><span class=\"line\">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"python-相关bug\"><a href=\"#python-相关bug\" class=\"headerlink\" title=\"python 相关bug\"></a>python 相关bug</h2><ol>\n<li><p>python 换源以及格式化pip输出</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~ &amp; mkdir .pip</span><br><span class=\"line\">vi ~/.pip/pip.conf</span><br><span class=\"line\"></span><br><span class=\"line\">[global]</span><br><span class=\"line\">timeout = 60</span><br><span class=\"line\">index-url = http://pypi.douban.com/simple</span><br><span class=\"line\">trusted-host = pypi.douban.com</span><br><span class=\"line\">format=columns</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在运行 tensorboard 出错</p>\n<p> 原因分析：mxnet 要求 numpy 的版本与tensorboard不匹配<br> <code>mxnet 1.4.1 has requirement numpy&lt;1.15.0,&gt;=1.8.2, but you&#39;ll have numpy 1.16.3 which is incompatible.</code></p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 错误详情</span></span><br><span class=\"line\">➜  tensorflow git:(master) ✗ tensorboard --logdir ./</span><br><span class=\"line\">ModuleNotFoundError: No module named <span class=\"string\">'numpy.core._multiarray_umath'</span></span><br><span class=\"line\">ImportError: numpy.core.multiarray failed to import</span><br><span class=\"line\"></span><br><span class=\"line\">The above exception was the direct cause of the following exception:</span><br><span class=\"line\"></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">File <span class=\"string\">\"&lt;frozen importlib._bootstrap&gt;\"</span>, line 968, <span class=\"keyword\">in</span> _find_and_load</span><br><span class=\"line\">SystemError: &lt;class <span class=\"string\">'_frozen_importlib._ModuleLockManager'</span>&gt; returned a result with an error <span class=\"built_in\">set</span></span><br><span class=\"line\">ImportError: numpy.core._multiarray_umath failed to import</span><br><span class=\"line\">ImportError: numpy.core.umath failed to import</span><br><span class=\"line\">2019-06-03 12:42:23.607527: F tensorflow/python/lib/core/bfloat16.cc:675] Check failed: PyBfloat16_Type.tp_base != nullptr</span><br><span class=\"line\">[1]    79828 abort      tensorboard --logdir ./</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决</span></span><br><span class=\"line\">pip3 install -U numpy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">tensorboard --logdir  ./</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"jupyter 安装部署","date":"2019-05-30T02:44:24.000Z","_content":"\n## 简介\n\nJupyter Notebook 的本质是一个 Web 应用程序，便于创建和共享文学化程序文档，支持实时代码，数学方程，可视化和 markdown。\n用途包括：数据清理和转换，数值模拟，统计建模，机器学习等等\n\n## 下载安装 jupyter\n\n1. 下载\n\n    ```bash\n    pip3 install jupyter\n    pip3 install jupyterlab\n\n    ```\n\n2. 配置\n\n    ```bash\n    # ipython 生成密码\n    In [1]: from notebook.auth import passwd\n\n    In [2]: passwd()\n    Enter password:\n    Verify password:\n    Out[2]: 'sha1:85b25f0bd15b:63e646d4f4f9be9f05e4eb97fd0df00b1e86db8e'\n\n    # 生成默认的配置文件\n    jupyter lab --generate-config\n\n    # 配置启动参数（其他参数可以根据自己喜好设置）\n    vi /home/gt/.jupyter/jupyter_notebook_config.py\n    c.NotebookApp.password = 'sha1:6d74e2768be3:d4fd1139cb0d3cb01cbc03d69031a93851c83497'\n    c.NotebookApp.port = 11235\n    c.NotebookApp.ip = '*'\n    c.NotebookApp.allow_remote_access = True\n    c.NotebookApp.notebook_dir = '/home/gt/.workspace'\n\n    ```\n\n## supervisor部署\n\n```bash\n# 安装supervisor （这里是ubuntu, 也可以支持pip）\nsudo apt install supervisor\n\n# 配置启动参数\nvi /etc/supervisor/conf.d/jupyter.conf\n\n[program:jupyter]\nuser=gt\ndirectory=/home/gt/.local\ncommand=/home/gt/.local/bin/jupyter lab\nautostart=true\nautorestart=false\nstderr_logfile=/tmp/jupyter_stderr.log\nstdout_logfile=/tmp/jupyter_stdout.log\n\n# 启动配置的服务\n```\n\n## 其他参考资料\n\n[详细的插件介绍](https://towardsdatascience.com/jupyter-lab-evolution-of-the-jupyter-notebook-5297cacde6b)\n","source":"_posts/20190530-jupyter.md","raw":"---\ntitle: jupyter 安装部署\ndate: 2019-05-30 10:44:24\ntags: jupyter\ncategories: 后端\n---\n\n## 简介\n\nJupyter Notebook 的本质是一个 Web 应用程序，便于创建和共享文学化程序文档，支持实时代码，数学方程，可视化和 markdown。\n用途包括：数据清理和转换，数值模拟，统计建模，机器学习等等\n\n## 下载安装 jupyter\n\n1. 下载\n\n    ```bash\n    pip3 install jupyter\n    pip3 install jupyterlab\n\n    ```\n\n2. 配置\n\n    ```bash\n    # ipython 生成密码\n    In [1]: from notebook.auth import passwd\n\n    In [2]: passwd()\n    Enter password:\n    Verify password:\n    Out[2]: 'sha1:85b25f0bd15b:63e646d4f4f9be9f05e4eb97fd0df00b1e86db8e'\n\n    # 生成默认的配置文件\n    jupyter lab --generate-config\n\n    # 配置启动参数（其他参数可以根据自己喜好设置）\n    vi /home/gt/.jupyter/jupyter_notebook_config.py\n    c.NotebookApp.password = 'sha1:6d74e2768be3:d4fd1139cb0d3cb01cbc03d69031a93851c83497'\n    c.NotebookApp.port = 11235\n    c.NotebookApp.ip = '*'\n    c.NotebookApp.allow_remote_access = True\n    c.NotebookApp.notebook_dir = '/home/gt/.workspace'\n\n    ```\n\n## supervisor部署\n\n```bash\n# 安装supervisor （这里是ubuntu, 也可以支持pip）\nsudo apt install supervisor\n\n# 配置启动参数\nvi /etc/supervisor/conf.d/jupyter.conf\n\n[program:jupyter]\nuser=gt\ndirectory=/home/gt/.local\ncommand=/home/gt/.local/bin/jupyter lab\nautostart=true\nautorestart=false\nstderr_logfile=/tmp/jupyter_stderr.log\nstdout_logfile=/tmp/jupyter_stdout.log\n\n# 启动配置的服务\n```\n\n## 其他参考资料\n\n[详细的插件介绍](https://towardsdatascience.com/jupyter-lab-evolution-of-the-jupyter-notebook-5297cacde6b)\n","slug":"jupyter","published":1,"updated":"2020-10-27T08:35:01.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrr9wva0002geqlafsa20ii","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Jupyter Notebook 的本质是一个 Web 应用程序，便于创建和共享文学化程序文档，支持实时代码，数学方程，可视化和 markdown。<br>用途包括：数据清理和转换，数值模拟，统计建模，机器学习等等</p>\n<h2 id=\"下载安装-jupyter\"><a href=\"#下载安装-jupyter\" class=\"headerlink\" title=\"下载安装 jupyter\"></a>下载安装 jupyter</h2><ol>\n<li><p>下载</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install jupyter</span><br><span class=\"line\">pip3 install jupyterlab</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ipython 生成密码</span></span><br><span class=\"line\">In [1]: from notebook.auth import passwd</span><br><span class=\"line\"></span><br><span class=\"line\">In [2]: passwd()</span><br><span class=\"line\">Enter password:</span><br><span class=\"line\">Verify password:</span><br><span class=\"line\">Out[2]: <span class=\"string\">'sha1:85b25f0bd15b:63e646d4f4f9be9f05e4eb97fd0df00b1e86db8e'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成默认的配置文件</span></span><br><span class=\"line\">jupyter lab --generate-config</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置启动参数（其他参数可以根据自己喜好设置）</span></span><br><span class=\"line\">vi /home/gt/.jupyter/jupyter_notebook_config.py</span><br><span class=\"line\">c.NotebookApp.password = <span class=\"string\">'sha1:6d74e2768be3:d4fd1139cb0d3cb01cbc03d69031a93851c83497'</span></span><br><span class=\"line\">c.NotebookApp.port = 11235</span><br><span class=\"line\">c.NotebookApp.ip = <span class=\"string\">'*'</span></span><br><span class=\"line\">c.NotebookApp.allow_remote_access = True</span><br><span class=\"line\">c.NotebookApp.notebook_dir = <span class=\"string\">'/home/gt/.workspace'</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"supervisor部署\"><a href=\"#supervisor部署\" class=\"headerlink\" title=\"supervisor部署\"></a>supervisor部署</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装supervisor （这里是ubuntu, 也可以支持pip）</span></span><br><span class=\"line\">sudo apt install supervisor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置启动参数</span></span><br><span class=\"line\">vi /etc/supervisor/conf.d/jupyter.conf</span><br><span class=\"line\"></span><br><span class=\"line\">[program:jupyter]</span><br><span class=\"line\">user=gt</span><br><span class=\"line\">directory=/home/gt/.<span class=\"built_in\">local</span></span><br><span class=\"line\"><span class=\"built_in\">command</span>=/home/gt/.<span class=\"built_in\">local</span>/bin/jupyter lab</span><br><span class=\"line\">autostart=<span class=\"literal\">true</span></span><br><span class=\"line\">autorestart=<span class=\"literal\">false</span></span><br><span class=\"line\">stderr_logfile=/tmp/jupyter_stderr.log</span><br><span class=\"line\">stdout_logfile=/tmp/jupyter_stdout.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动配置的服务</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他参考资料\"><a href=\"#其他参考资料\" class=\"headerlink\" title=\"其他参考资料\"></a>其他参考资料</h2><p><a href=\"https://towardsdatascience.com/jupyter-lab-evolution-of-the-jupyter-notebook-5297cacde6b\" target=\"_blank\" rel=\"noopener\">详细的插件介绍</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Jupyter Notebook 的本质是一个 Web 应用程序，便于创建和共享文学化程序文档，支持实时代码，数学方程，可视化和 markdown。<br>用途包括：数据清理和转换，数值模拟，统计建模，机器学习等等</p>\n<h2 id=\"下载安装-jupyter\"><a href=\"#下载安装-jupyter\" class=\"headerlink\" title=\"下载安装 jupyter\"></a>下载安装 jupyter</h2><ol>\n<li><p>下载</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install jupyter</span><br><span class=\"line\">pip3 install jupyterlab</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ipython 生成密码</span></span><br><span class=\"line\">In [1]: from notebook.auth import passwd</span><br><span class=\"line\"></span><br><span class=\"line\">In [2]: passwd()</span><br><span class=\"line\">Enter password:</span><br><span class=\"line\">Verify password:</span><br><span class=\"line\">Out[2]: <span class=\"string\">'sha1:85b25f0bd15b:63e646d4f4f9be9f05e4eb97fd0df00b1e86db8e'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成默认的配置文件</span></span><br><span class=\"line\">jupyter lab --generate-config</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置启动参数（其他参数可以根据自己喜好设置）</span></span><br><span class=\"line\">vi /home/gt/.jupyter/jupyter_notebook_config.py</span><br><span class=\"line\">c.NotebookApp.password = <span class=\"string\">'sha1:6d74e2768be3:d4fd1139cb0d3cb01cbc03d69031a93851c83497'</span></span><br><span class=\"line\">c.NotebookApp.port = 11235</span><br><span class=\"line\">c.NotebookApp.ip = <span class=\"string\">'*'</span></span><br><span class=\"line\">c.NotebookApp.allow_remote_access = True</span><br><span class=\"line\">c.NotebookApp.notebook_dir = <span class=\"string\">'/home/gt/.workspace'</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"supervisor部署\"><a href=\"#supervisor部署\" class=\"headerlink\" title=\"supervisor部署\"></a>supervisor部署</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装supervisor （这里是ubuntu, 也可以支持pip）</span></span><br><span class=\"line\">sudo apt install supervisor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置启动参数</span></span><br><span class=\"line\">vi /etc/supervisor/conf.d/jupyter.conf</span><br><span class=\"line\"></span><br><span class=\"line\">[program:jupyter]</span><br><span class=\"line\">user=gt</span><br><span class=\"line\">directory=/home/gt/.<span class=\"built_in\">local</span></span><br><span class=\"line\"><span class=\"built_in\">command</span>=/home/gt/.<span class=\"built_in\">local</span>/bin/jupyter lab</span><br><span class=\"line\">autostart=<span class=\"literal\">true</span></span><br><span class=\"line\">autorestart=<span class=\"literal\">false</span></span><br><span class=\"line\">stderr_logfile=/tmp/jupyter_stderr.log</span><br><span class=\"line\">stdout_logfile=/tmp/jupyter_stdout.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动配置的服务</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他参考资料\"><a href=\"#其他参考资料\" class=\"headerlink\" title=\"其他参考资料\"></a>其他参考资料</h2><p><a href=\"https://towardsdatascience.com/jupyter-lab-evolution-of-the-jupyter-notebook-5297cacde6b\" target=\"_blank\" rel=\"noopener\">详细的插件介绍</a></p>\n"},{"title":"mxnet/tensorflow/pytorch 安装","date":"2019-06-03T03:10:01.000Z","_content":"\n## 简介\n\n[mxnet 官方文档](https://mxnet-tqchen.readthedocs.io/en/latest/zh/overview.html)\n\n[tensorflow 官方文档](http://www.tensorfly.cn/)\n\n[pytorch 官方文档](https://pytorch-cn.readthedocs.io/zh/latest/)\n\n## 安装\n\n[mxnet 对应版本](https://mxnet.incubator.apache.org/versions/master/install/index.html?platform=Linux&language=Python&processor=GPU)\n\n[tensorflow linux 对应版本](https://tensorflow.google.cn/install/source)\n\n[pytorch 对应版本](https://pytorch.org/get-started/locally/)\n\n在安装mxnet/tensorflow/pytorch **一定要注意cuda版本的对应关系**\n\n```bash\n\n# 安装mxnet 默认是 CPU\npip3 install mxnet\n\n## ubuntu 安装mxnet GPU\npip3 install mxnet-cu90\n\n# 安装 pytorch GPU\npip3 install torch torchvision\n\n# 安装 tensorflow GPU\npip install tensorflow_gpu==1.12.0\n\n```\n\n```python\n# 验证 torch GPU\n\nimport torch\ntorch.cuda.is_available()\n\n# 验证 mxnet GPU\n\nimport mxnet as mx\nfrom mxnet import nd\nfrom mxnet.gluon import nn\na = nd.array([1, 2, 3], ctx=mx.gpu())\nprinta(a)\n\n\n# 验证 tensorflow gpu\n\nimport tensorflow as tf\n\nwith tf.device('/cpu:0'):\n    a = tf.constant([1.0,2.0,3.0],shape=[3],name='a')\n    b = tf.constant([1.0,2.0,3.0],shape=[3],name='b')\nwith tf.device('/gpu:1'):\n    c = a+b\n\nsess = tf.Session(config=tf.ConfigProto(allow_soft_placement=True,log_device_placement=True))\n#sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))\nsess.run(tf.global_variables_initializer())\nprint(sess.run(c))\n```\n","source":"_posts/20190603-mxnet.md","raw":"---\ntitle: mxnet/tensorflow/pytorch 安装\ndate: 2019-06-03 11:10:01\ntags: mxnet\ncategories: 机器学习\n---\n\n## 简介\n\n[mxnet 官方文档](https://mxnet-tqchen.readthedocs.io/en/latest/zh/overview.html)\n\n[tensorflow 官方文档](http://www.tensorfly.cn/)\n\n[pytorch 官方文档](https://pytorch-cn.readthedocs.io/zh/latest/)\n\n## 安装\n\n[mxnet 对应版本](https://mxnet.incubator.apache.org/versions/master/install/index.html?platform=Linux&language=Python&processor=GPU)\n\n[tensorflow linux 对应版本](https://tensorflow.google.cn/install/source)\n\n[pytorch 对应版本](https://pytorch.org/get-started/locally/)\n\n在安装mxnet/tensorflow/pytorch **一定要注意cuda版本的对应关系**\n\n```bash\n\n# 安装mxnet 默认是 CPU\npip3 install mxnet\n\n## ubuntu 安装mxnet GPU\npip3 install mxnet-cu90\n\n# 安装 pytorch GPU\npip3 install torch torchvision\n\n# 安装 tensorflow GPU\npip install tensorflow_gpu==1.12.0\n\n```\n\n```python\n# 验证 torch GPU\n\nimport torch\ntorch.cuda.is_available()\n\n# 验证 mxnet GPU\n\nimport mxnet as mx\nfrom mxnet import nd\nfrom mxnet.gluon import nn\na = nd.array([1, 2, 3], ctx=mx.gpu())\nprinta(a)\n\n\n# 验证 tensorflow gpu\n\nimport tensorflow as tf\n\nwith tf.device('/cpu:0'):\n    a = tf.constant([1.0,2.0,3.0],shape=[3],name='a')\n    b = tf.constant([1.0,2.0,3.0],shape=[3],name='b')\nwith tf.device('/gpu:1'):\n    c = a+b\n\nsess = tf.Session(config=tf.ConfigProto(allow_soft_placement=True,log_device_placement=True))\n#sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))\nsess.run(tf.global_variables_initializer())\nprint(sess.run(c))\n```\n","slug":"mxnet","published":1,"updated":"2020-10-27T08:35:08.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrr9wvb0003geql6it6aoy9","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><a href=\"https://mxnet-tqchen.readthedocs.io/en/latest/zh/overview.html\" target=\"_blank\" rel=\"noopener\">mxnet 官方文档</a></p>\n<p><a href=\"http://www.tensorfly.cn/\" target=\"_blank\" rel=\"noopener\">tensorflow 官方文档</a></p>\n<p><a href=\"https://pytorch-cn.readthedocs.io/zh/latest/\" target=\"_blank\" rel=\"noopener\">pytorch 官方文档</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><a href=\"https://mxnet.incubator.apache.org/versions/master/install/index.html?platform=Linux&language=Python&processor=GPU\" target=\"_blank\" rel=\"noopener\">mxnet 对应版本</a></p>\n<p><a href=\"https://tensorflow.google.cn/install/source\" target=\"_blank\" rel=\"noopener\">tensorflow linux 对应版本</a></p>\n<p><a href=\"https://pytorch.org/get-started/locally/\" target=\"_blank\" rel=\"noopener\">pytorch 对应版本</a></p>\n<p>在安装mxnet/tensorflow/pytorch <strong>一定要注意cuda版本的对应关系</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装mxnet 默认是 CPU</span></span><br><span class=\"line\">pip3 install mxnet</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## ubuntu 安装mxnet GPU</span></span><br><span class=\"line\">pip3 install mxnet-cu90</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 pytorch GPU</span></span><br><span class=\"line\">pip3 install torch torchvision</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 tensorflow GPU</span></span><br><span class=\"line\">pip install tensorflow_gpu==1.12.0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 验证 torch GPU</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\">torch.cuda.is_available()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证 mxnet GPU</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> mxnet <span class=\"keyword\">as</span> mx</span><br><span class=\"line\"><span class=\"keyword\">from</span> mxnet <span class=\"keyword\">import</span> nd</span><br><span class=\"line\"><span class=\"keyword\">from</span> mxnet.gluon <span class=\"keyword\">import</span> nn</span><br><span class=\"line\">a = nd.array([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], ctx=mx.gpu())</span><br><span class=\"line\">printa(a)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证 tensorflow gpu</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.device(<span class=\"string\">'/cpu:0'</span>):</span><br><span class=\"line\">    a = tf.constant([<span class=\"number\">1.0</span>,<span class=\"number\">2.0</span>,<span class=\"number\">3.0</span>],shape=[<span class=\"number\">3</span>],name=<span class=\"string\">'a'</span>)</span><br><span class=\"line\">    b = tf.constant([<span class=\"number\">1.0</span>,<span class=\"number\">2.0</span>,<span class=\"number\">3.0</span>],shape=[<span class=\"number\">3</span>],name=<span class=\"string\">'b'</span>)</span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.device(<span class=\"string\">'/gpu:1'</span>):</span><br><span class=\"line\">    c = a+b</span><br><span class=\"line\"></span><br><span class=\"line\">sess = tf.Session(config=tf.ConfigProto(allow_soft_placement=<span class=\"literal\">True</span>,log_device_placement=<span class=\"literal\">True</span>))</span><br><span class=\"line\"><span class=\"comment\">#sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))</span></span><br><span class=\"line\">sess.run(tf.global_variables_initializer())</span><br><span class=\"line\">print(sess.run(c))</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><a href=\"https://mxnet-tqchen.readthedocs.io/en/latest/zh/overview.html\" target=\"_blank\" rel=\"noopener\">mxnet 官方文档</a></p>\n<p><a href=\"http://www.tensorfly.cn/\" target=\"_blank\" rel=\"noopener\">tensorflow 官方文档</a></p>\n<p><a href=\"https://pytorch-cn.readthedocs.io/zh/latest/\" target=\"_blank\" rel=\"noopener\">pytorch 官方文档</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><a href=\"https://mxnet.incubator.apache.org/versions/master/install/index.html?platform=Linux&language=Python&processor=GPU\" target=\"_blank\" rel=\"noopener\">mxnet 对应版本</a></p>\n<p><a href=\"https://tensorflow.google.cn/install/source\" target=\"_blank\" rel=\"noopener\">tensorflow linux 对应版本</a></p>\n<p><a href=\"https://pytorch.org/get-started/locally/\" target=\"_blank\" rel=\"noopener\">pytorch 对应版本</a></p>\n<p>在安装mxnet/tensorflow/pytorch <strong>一定要注意cuda版本的对应关系</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装mxnet 默认是 CPU</span></span><br><span class=\"line\">pip3 install mxnet</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## ubuntu 安装mxnet GPU</span></span><br><span class=\"line\">pip3 install mxnet-cu90</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 pytorch GPU</span></span><br><span class=\"line\">pip3 install torch torchvision</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 tensorflow GPU</span></span><br><span class=\"line\">pip install tensorflow_gpu==1.12.0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 验证 torch GPU</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\">torch.cuda.is_available()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证 mxnet GPU</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> mxnet <span class=\"keyword\">as</span> mx</span><br><span class=\"line\"><span class=\"keyword\">from</span> mxnet <span class=\"keyword\">import</span> nd</span><br><span class=\"line\"><span class=\"keyword\">from</span> mxnet.gluon <span class=\"keyword\">import</span> nn</span><br><span class=\"line\">a = nd.array([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], ctx=mx.gpu())</span><br><span class=\"line\">printa(a)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证 tensorflow gpu</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.device(<span class=\"string\">'/cpu:0'</span>):</span><br><span class=\"line\">    a = tf.constant([<span class=\"number\">1.0</span>,<span class=\"number\">2.0</span>,<span class=\"number\">3.0</span>],shape=[<span class=\"number\">3</span>],name=<span class=\"string\">'a'</span>)</span><br><span class=\"line\">    b = tf.constant([<span class=\"number\">1.0</span>,<span class=\"number\">2.0</span>,<span class=\"number\">3.0</span>],shape=[<span class=\"number\">3</span>],name=<span class=\"string\">'b'</span>)</span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.device(<span class=\"string\">'/gpu:1'</span>):</span><br><span class=\"line\">    c = a+b</span><br><span class=\"line\"></span><br><span class=\"line\">sess = tf.Session(config=tf.ConfigProto(allow_soft_placement=<span class=\"literal\">True</span>,log_device_placement=<span class=\"literal\">True</span>))</span><br><span class=\"line\"><span class=\"comment\">#sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))</span></span><br><span class=\"line\">sess.run(tf.global_variables_initializer())</span><br><span class=\"line\">print(sess.run(c))</span><br></pre></td></tr></table></figure>\n"},{"title":"cuda 安装","date":"2019-05-28T11:18:59.000Z","_content":"\n## 简介\n\nCUDA 是并行计算的平台和类C编程模型，我们能很容易的实现并行算法，就像写C代码一样。只要配备的NVIDIA GPU，就可以在许多设备上运行你的并行程序，无论是台式机、笔记本抑或平板电脑。熟悉C语言可以帮助你尽快掌握CUDA。\n\ncuDNN 是NVIDIA打造的针对深度神经网络的加速库，是一个用于深层神经网络的GPU加速库。如果你要用GPU训练模型，cuDNN不是必须的，但是一般会采用这个加速库。\n\nMXNet 是灵活且高效的深度学习库，其有点灵活，轻量，国人参与开发，文档齐全。\n\n## 环境介绍\n\n1. 系统环境\n\n    ```bash\n    gt@yixue-pc:~$ cat /etc/lsb-release\n    DISTRIB_ID=Ubuntu\n    DISTRIB_RELEASE=18.04\n    DISTRIB_CODENAME=bionic\n    DISTRIB_DESCRIPTION=\"Ubuntu 18.04 LTS\"\n\n    gt@yixue-pc:~$ uname -m\n    x86_64\n\n    ```\n\n2. 显卡 [显卡驱动版本查看](https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html)\n    **这一步很重要，根据版本下载对应的安装文件**\n\n    ```bash\n    gt@yixue-pc:~$ cat /proc/driver/nvidia/version\n    NVRM version: NVIDIA UNIX x86_64 Kernel Module  390.116  Sun Jan 27 07:21:36 PST 2019\n    GCC version:  gcc version 7.4.0 (Ubuntu 7.4.0-1ubuntu1~18.04)\n\n    gt@yixue-pc:~$ nvidia-smi\n    Wed May 29 15:27:36 2019\n    +-----------------------------------------------------------------------------+\n    | NVIDIA-SMI 390.116                Driver Version: 390.116                   |\n    |-------------------------------+----------------------+----------------------+\n    | GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n    | Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n    |===============================+======================+======================|\n    |   0  GeForce GTX 108...  Off  | 00000000:01:00.0 Off |                  N/A |\n    |  0%   30C    P5    34W / 250W |      0MiB / 11175MiB |      3%      Default |\n    +-------------------------------+----------------------+----------------------+\n\n    +-----------------------------------------------------------------------------+\n    | Processes:                                                       GPU Memory |\n    |  GPU       PID   Type   Process name                             Usage      |\n    |=============================================================================|\n    |  No running processes found                                                 |\n    +-----------------------------------------------------------------------------+\n\n    gt@yixue-pc:~$ lspci | grep -i nvidia\n    01:00.0 VGA compatible controller: NVIDIA Corporation GP102 [GeForce GTX 1080 Ti] (rev a1)\n    01:00.1 Audio device: NVIDIA Corporation GP102 HDMI Audio Controller (rev a1)\n    gt@yixue-pc:~$ lsmod | grep -i nvidia\n    nvidia_uvm            757760  0\n    nvidia_drm             40960  0\n    nvidia_modeset       1048576  1 nvidia_drm\n    nvidia              14376960  2 nvidia_uvm,nvidia_modeset\n    drm_kms_helper        167936  1 nvidia_drm\n    drm                   401408  3 drm_kms_helper,nvidia_drm\n    ipmi_msghandler        53248  2 ipmi_devintf,nvidia\n    ```\n\n## ubuntu18.04 安装 cuda\n\n1. 环境准备\n\n    * ubuntu 下载环境依赖\n\n    ```bash\n    # 一些依赖\n    sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev\n\n    # 查看对应的驱动是否安装\n    ubuntu-drivers devices\n\n    # 自动安装推荐的驱动\n    sudo ubuntu-drivers autoinstall\n    ```\n\n    * 下载cuda、cudann (根据环境下载对应的版本)\n    [cuda 下载](https://developer.nvidia.com/cuda-90-download-archive?target_os=Linux&target_arch=x86_64&target_distro=Ubuntu&target_version=1604&target_type=runfilelocal)\n    [cudnn 下载](https://developer.nvidia.com/rdp/cudnn-download)\n2. 安装\n\n    * sh  安装 cuda\n\n    ```bash\n    # gcc (ubuntu18.04 默认 gcc 7.4) 需要 4.8\n    sudo apt-get install gcc-4.8\n    sudo apt-get install g++-4.8\n\n    cd /usr/bin\n\n    sudo mv gcc gcc.bak #备份\n    sudo ln -s gcc-4.8 gcc #重新链接\n\n    sudo mv g++ g++.bak\n    sudo ln -s g++-4.8 g++\n\n    # 查看版本\n    gcc -v\n    g++ -v\n\n    # 执行脚本\n    sh cuda_9.0.176_384.81_linux.run\n    sh cuda_9.0.176.1_linux.run\n    sh cuda_9.0.176.2_linux.run\n    sh cuda_9.0.176.3_linux.run\n    sh cuda_9.0.176.4_linux.run\n    # 根据提示选择安装 注意不要安装驱动\n\n    # 验证版本\n    gt@yixue-pc:~$ nvcc --version\n    nvcc: NVIDIA (R) Cuda compiler driver\n    Copyright (c) 2005-2017 NVIDIA Corporation\n    Built on Fri_Sep__1_21:08:03_CDT_2017\n    Cuda compilation tools, release 9.0, V9.0.176\n\n    # vim /etc/profile\n    export PATH=$PATH:/usr/local/cuda-9.0/bin\n    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-9.0/lib64\n    export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/cuda-9.0/lib64\n\n    source /etc/profile\n    ```\n\n    * 安装 cudann\n\n    ```bash\n    # 解压\n    tar xvzf cudnn-9.0-linux-x64-v7.6.0.64.tgz\n\n    sudo cp cuda/include/cudnn.h    /usr/local/cuda/include      注意，解压后的文件夹名称为cuda ,将对应文件复制到 /usr/local中的cuda内\n    sudo cp cuda/lib64/libcudnn*    /usr/local/cuda/lib64\n    sudo chmod a+r /usr/local/cuda/include/cudnn.h   /usr/local/cuda/lib64/libcudnn*\n    ```\n\n## 卸载cuda\n\n[官方文档](https://docs.nvidia.com/cuda/cuda-installation-guide-mac-os-x/index.html#uninstall)\n\n```bash\nroot@yixue-pc:/usr/local/cuda/bin# ./cuda-uninstaller\n```\n\n## 参考资料\n\n[安装mxnet+显卡驱动+cuda9.1+cudnn7.1](https://blog.csdn.net/qq_38298902/article/details/79980749)\n","source":"_posts/20190528-cuda.md","raw":"---\ntitle: cuda 安装\ndate: 2019-05-28 19:18:59\ntags: cuda\ncategories: 机器学习\n---\n\n## 简介\n\nCUDA 是并行计算的平台和类C编程模型，我们能很容易的实现并行算法，就像写C代码一样。只要配备的NVIDIA GPU，就可以在许多设备上运行你的并行程序，无论是台式机、笔记本抑或平板电脑。熟悉C语言可以帮助你尽快掌握CUDA。\n\ncuDNN 是NVIDIA打造的针对深度神经网络的加速库，是一个用于深层神经网络的GPU加速库。如果你要用GPU训练模型，cuDNN不是必须的，但是一般会采用这个加速库。\n\nMXNet 是灵活且高效的深度学习库，其有点灵活，轻量，国人参与开发，文档齐全。\n\n## 环境介绍\n\n1. 系统环境\n\n    ```bash\n    gt@yixue-pc:~$ cat /etc/lsb-release\n    DISTRIB_ID=Ubuntu\n    DISTRIB_RELEASE=18.04\n    DISTRIB_CODENAME=bionic\n    DISTRIB_DESCRIPTION=\"Ubuntu 18.04 LTS\"\n\n    gt@yixue-pc:~$ uname -m\n    x86_64\n\n    ```\n\n2. 显卡 [显卡驱动版本查看](https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html)\n    **这一步很重要，根据版本下载对应的安装文件**\n\n    ```bash\n    gt@yixue-pc:~$ cat /proc/driver/nvidia/version\n    NVRM version: NVIDIA UNIX x86_64 Kernel Module  390.116  Sun Jan 27 07:21:36 PST 2019\n    GCC version:  gcc version 7.4.0 (Ubuntu 7.4.0-1ubuntu1~18.04)\n\n    gt@yixue-pc:~$ nvidia-smi\n    Wed May 29 15:27:36 2019\n    +-----------------------------------------------------------------------------+\n    | NVIDIA-SMI 390.116                Driver Version: 390.116                   |\n    |-------------------------------+----------------------+----------------------+\n    | GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n    | Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n    |===============================+======================+======================|\n    |   0  GeForce GTX 108...  Off  | 00000000:01:00.0 Off |                  N/A |\n    |  0%   30C    P5    34W / 250W |      0MiB / 11175MiB |      3%      Default |\n    +-------------------------------+----------------------+----------------------+\n\n    +-----------------------------------------------------------------------------+\n    | Processes:                                                       GPU Memory |\n    |  GPU       PID   Type   Process name                             Usage      |\n    |=============================================================================|\n    |  No running processes found                                                 |\n    +-----------------------------------------------------------------------------+\n\n    gt@yixue-pc:~$ lspci | grep -i nvidia\n    01:00.0 VGA compatible controller: NVIDIA Corporation GP102 [GeForce GTX 1080 Ti] (rev a1)\n    01:00.1 Audio device: NVIDIA Corporation GP102 HDMI Audio Controller (rev a1)\n    gt@yixue-pc:~$ lsmod | grep -i nvidia\n    nvidia_uvm            757760  0\n    nvidia_drm             40960  0\n    nvidia_modeset       1048576  1 nvidia_drm\n    nvidia              14376960  2 nvidia_uvm,nvidia_modeset\n    drm_kms_helper        167936  1 nvidia_drm\n    drm                   401408  3 drm_kms_helper,nvidia_drm\n    ipmi_msghandler        53248  2 ipmi_devintf,nvidia\n    ```\n\n## ubuntu18.04 安装 cuda\n\n1. 环境准备\n\n    * ubuntu 下载环境依赖\n\n    ```bash\n    # 一些依赖\n    sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev\n\n    # 查看对应的驱动是否安装\n    ubuntu-drivers devices\n\n    # 自动安装推荐的驱动\n    sudo ubuntu-drivers autoinstall\n    ```\n\n    * 下载cuda、cudann (根据环境下载对应的版本)\n    [cuda 下载](https://developer.nvidia.com/cuda-90-download-archive?target_os=Linux&target_arch=x86_64&target_distro=Ubuntu&target_version=1604&target_type=runfilelocal)\n    [cudnn 下载](https://developer.nvidia.com/rdp/cudnn-download)\n2. 安装\n\n    * sh  安装 cuda\n\n    ```bash\n    # gcc (ubuntu18.04 默认 gcc 7.4) 需要 4.8\n    sudo apt-get install gcc-4.8\n    sudo apt-get install g++-4.8\n\n    cd /usr/bin\n\n    sudo mv gcc gcc.bak #备份\n    sudo ln -s gcc-4.8 gcc #重新链接\n\n    sudo mv g++ g++.bak\n    sudo ln -s g++-4.8 g++\n\n    # 查看版本\n    gcc -v\n    g++ -v\n\n    # 执行脚本\n    sh cuda_9.0.176_384.81_linux.run\n    sh cuda_9.0.176.1_linux.run\n    sh cuda_9.0.176.2_linux.run\n    sh cuda_9.0.176.3_linux.run\n    sh cuda_9.0.176.4_linux.run\n    # 根据提示选择安装 注意不要安装驱动\n\n    # 验证版本\n    gt@yixue-pc:~$ nvcc --version\n    nvcc: NVIDIA (R) Cuda compiler driver\n    Copyright (c) 2005-2017 NVIDIA Corporation\n    Built on Fri_Sep__1_21:08:03_CDT_2017\n    Cuda compilation tools, release 9.0, V9.0.176\n\n    # vim /etc/profile\n    export PATH=$PATH:/usr/local/cuda-9.0/bin\n    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-9.0/lib64\n    export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/cuda-9.0/lib64\n\n    source /etc/profile\n    ```\n\n    * 安装 cudann\n\n    ```bash\n    # 解压\n    tar xvzf cudnn-9.0-linux-x64-v7.6.0.64.tgz\n\n    sudo cp cuda/include/cudnn.h    /usr/local/cuda/include      注意，解压后的文件夹名称为cuda ,将对应文件复制到 /usr/local中的cuda内\n    sudo cp cuda/lib64/libcudnn*    /usr/local/cuda/lib64\n    sudo chmod a+r /usr/local/cuda/include/cudnn.h   /usr/local/cuda/lib64/libcudnn*\n    ```\n\n## 卸载cuda\n\n[官方文档](https://docs.nvidia.com/cuda/cuda-installation-guide-mac-os-x/index.html#uninstall)\n\n```bash\nroot@yixue-pc:/usr/local/cuda/bin# ./cuda-uninstaller\n```\n\n## 参考资料\n\n[安装mxnet+显卡驱动+cuda9.1+cudnn7.1](https://blog.csdn.net/qq_38298902/article/details/79980749)\n","slug":"cuda","published":1,"updated":"2020-10-27T08:35:00.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrr9wvb0004geqlc3to5ta0","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>CUDA 是并行计算的平台和类C编程模型，我们能很容易的实现并行算法，就像写C代码一样。只要配备的NVIDIA GPU，就可以在许多设备上运行你的并行程序，无论是台式机、笔记本抑或平板电脑。熟悉C语言可以帮助你尽快掌握CUDA。</p>\n<p>cuDNN 是NVIDIA打造的针对深度神经网络的加速库，是一个用于深层神经网络的GPU加速库。如果你要用GPU训练模型，cuDNN不是必须的，但是一般会采用这个加速库。</p>\n<p>MXNet 是灵活且高效的深度学习库，其有点灵活，轻量，国人参与开发，文档齐全。</p>\n<h2 id=\"环境介绍\"><a href=\"#环境介绍\" class=\"headerlink\" title=\"环境介绍\"></a>环境介绍</h2><ol>\n<li><p>系统环境</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gt@yixue-pc:~$ cat /etc/lsb-release</span><br><span class=\"line\">DISTRIB_ID=Ubuntu</span><br><span class=\"line\">DISTRIB_RELEASE=18.04</span><br><span class=\"line\">DISTRIB_CODENAME=bionic</span><br><span class=\"line\">DISTRIB_DESCRIPTION=<span class=\"string\">\"Ubuntu 18.04 LTS\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">gt@yixue-pc:~$ uname -m</span><br><span class=\"line\">x86_64</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显卡 <a href=\"https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html\" target=\"_blank\" rel=\"noopener\">显卡驱动版本查看</a><br> <strong>这一步很重要，根据版本下载对应的安装文件</strong></p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gt@yixue-pc:~$ cat /proc/driver/nvidia/version</span><br><span class=\"line\">NVRM version: NVIDIA UNIX x86_64 Kernel Module  390.116  Sun Jan 27 07:21:36 PST 2019</span><br><span class=\"line\">GCC version:  gcc version 7.4.0 (Ubuntu 7.4.0-1ubuntu1~18.04)</span><br><span class=\"line\"></span><br><span class=\"line\">gt@yixue-pc:~$ nvidia-smi</span><br><span class=\"line\">Wed May 29 15:27:36 2019</span><br><span class=\"line\">+-----------------------------------------------------------------------------+</span><br><span class=\"line\">| NVIDIA-SMI 390.116                Driver Version: 390.116                   |</span><br><span class=\"line\">|-------------------------------+----------------------+----------------------+</span><br><span class=\"line\">| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class=\"line\">| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class=\"line\">|===============================+======================+======================|</span><br><span class=\"line\">|   0  GeForce GTX 108...  Off  | 00000000:01:00.0 Off |                  N/A |</span><br><span class=\"line\">|  0%   30C    P5    34W / 250W |      0MiB / 11175MiB |      3%      Default |</span><br><span class=\"line\">+-------------------------------+----------------------+----------------------+</span><br><span class=\"line\"></span><br><span class=\"line\">+-----------------------------------------------------------------------------+</span><br><span class=\"line\">| Processes:                                                       GPU Memory |</span><br><span class=\"line\">|  GPU       PID   Type   Process name                             Usage      |</span><br><span class=\"line\">|=============================================================================|</span><br><span class=\"line\">|  No running processes found                                                 |</span><br><span class=\"line\">+-----------------------------------------------------------------------------+</span><br><span class=\"line\"></span><br><span class=\"line\">gt@yixue-pc:~$ lspci | grep -i nvidia</span><br><span class=\"line\">01:00.0 VGA compatible controller: NVIDIA Corporation GP102 [GeForce GTX 1080 Ti] (rev a1)</span><br><span class=\"line\">01:00.1 Audio device: NVIDIA Corporation GP102 HDMI Audio Controller (rev a1)</span><br><span class=\"line\">gt@yixue-pc:~$ lsmod | grep -i nvidia</span><br><span class=\"line\">nvidia_uvm            757760  0</span><br><span class=\"line\">nvidia_drm             40960  0</span><br><span class=\"line\">nvidia_modeset       1048576  1 nvidia_drm</span><br><span class=\"line\">nvidia              14376960  2 nvidia_uvm,nvidia_modeset</span><br><span class=\"line\">drm_kms_helper        167936  1 nvidia_drm</span><br><span class=\"line\">drm                   401408  3 drm_kms_helper,nvidia_drm</span><br><span class=\"line\">ipmi_msghandler        53248  2 ipmi_devintf,nvidia</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"ubuntu18-04-安装-cuda\"><a href=\"#ubuntu18-04-安装-cuda\" class=\"headerlink\" title=\"ubuntu18.04 安装 cuda\"></a>ubuntu18.04 安装 cuda</h2><ol>\n<li><p>环境准备</p>\n<ul>\n<li><p>ubuntu 下载环境依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 一些依赖</span></span><br><span class=\"line\">sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看对应的驱动是否安装</span></span><br><span class=\"line\">ubuntu-drivers devices</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自动安装推荐的驱动</span></span><br><span class=\"line\">sudo ubuntu-drivers autoinstall</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载cuda、cudann (根据环境下载对应的版本)<br><a href=\"https://developer.nvidia.com/cuda-90-download-archive?target_os=Linux&target_arch=x86_64&target_distro=Ubuntu&target_version=1604&target_type=runfilelocal\" target=\"_blank\" rel=\"noopener\">cuda 下载</a><br><a href=\"https://developer.nvidia.com/rdp/cudnn-download\" target=\"_blank\" rel=\"noopener\">cudnn 下载</a></p>\n</li>\n</ul>\n</li>\n<li><p>安装</p>\n<ul>\n<li><p>sh  安装 cuda</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># gcc (ubuntu18.04 默认 gcc 7.4) 需要 4.8</span></span><br><span class=\"line\">sudo apt-get install gcc-4.8</span><br><span class=\"line\">sudo apt-get install g++-4.8</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/bin</span><br><span class=\"line\"></span><br><span class=\"line\">sudo mv gcc gcc.bak <span class=\"comment\">#备份</span></span><br><span class=\"line\">sudo ln -s gcc-4.8 gcc <span class=\"comment\">#重新链接</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo mv g++ g++.bak</span><br><span class=\"line\">sudo ln -s g++-4.8 g++</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看版本</span></span><br><span class=\"line\">gcc -v</span><br><span class=\"line\">g++ -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行脚本</span></span><br><span class=\"line\">sh cuda_9.0.176_384.81_linux.run</span><br><span class=\"line\">sh cuda_9.0.176.1_linux.run</span><br><span class=\"line\">sh cuda_9.0.176.2_linux.run</span><br><span class=\"line\">sh cuda_9.0.176.3_linux.run</span><br><span class=\"line\">sh cuda_9.0.176.4_linux.run</span><br><span class=\"line\"><span class=\"comment\"># 根据提示选择安装 注意不要安装驱动</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证版本</span></span><br><span class=\"line\">gt@yixue-pc:~$ nvcc --version</span><br><span class=\"line\">nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class=\"line\">Copyright (c) 2005-2017 NVIDIA Corporation</span><br><span class=\"line\">Built on Fri_Sep__1_21:08:03_CDT_2017</span><br><span class=\"line\">Cuda compilation tools, release 9.0, V9.0.176</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># vim /etc/profile</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/cuda-9.0/bin</span><br><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=<span class=\"variable\">$LD_LIBRARY_PATH</span>:/usr/<span class=\"built_in\">local</span>/cuda-9.0/lib64</span><br><span class=\"line\"><span class=\"built_in\">export</span> LIBRARY_PATH=<span class=\"variable\">$LIBRARY_PATH</span>:/usr/<span class=\"built_in\">local</span>/cuda-9.0/lib64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装 cudann</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar xvzf cudnn-9.0-linux-x64-v7.6.0.64.tgz</span><br><span class=\"line\"></span><br><span class=\"line\">sudo cp cuda/include/cudnn.h    /usr/<span class=\"built_in\">local</span>/cuda/include      注意，解压后的文件夹名称为cuda ,将对应文件复制到 /usr/<span class=\"built_in\">local</span>中的cuda内</span><br><span class=\"line\">sudo cp cuda/lib64/libcudnn*    /usr/<span class=\"built_in\">local</span>/cuda/lib64</span><br><span class=\"line\">sudo chmod a+r /usr/<span class=\"built_in\">local</span>/cuda/include/cudnn.h   /usr/<span class=\"built_in\">local</span>/cuda/lib64/libcudnn*</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"卸载cuda\"><a href=\"#卸载cuda\" class=\"headerlink\" title=\"卸载cuda\"></a>卸载cuda</h2><p><a href=\"https://docs.nvidia.com/cuda/cuda-installation-guide-mac-os-x/index.html#uninstall\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@yixue-pc:/usr/<span class=\"built_in\">local</span>/cuda/bin<span class=\"comment\"># ./cuda-uninstaller</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://blog.csdn.net/qq_38298902/article/details/79980749\" target=\"_blank\" rel=\"noopener\">安装mxnet+显卡驱动+cuda9.1+cudnn7.1</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>CUDA 是并行计算的平台和类C编程模型，我们能很容易的实现并行算法，就像写C代码一样。只要配备的NVIDIA GPU，就可以在许多设备上运行你的并行程序，无论是台式机、笔记本抑或平板电脑。熟悉C语言可以帮助你尽快掌握CUDA。</p>\n<p>cuDNN 是NVIDIA打造的针对深度神经网络的加速库，是一个用于深层神经网络的GPU加速库。如果你要用GPU训练模型，cuDNN不是必须的，但是一般会采用这个加速库。</p>\n<p>MXNet 是灵活且高效的深度学习库，其有点灵活，轻量，国人参与开发，文档齐全。</p>\n<h2 id=\"环境介绍\"><a href=\"#环境介绍\" class=\"headerlink\" title=\"环境介绍\"></a>环境介绍</h2><ol>\n<li><p>系统环境</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gt@yixue-pc:~$ cat /etc/lsb-release</span><br><span class=\"line\">DISTRIB_ID=Ubuntu</span><br><span class=\"line\">DISTRIB_RELEASE=18.04</span><br><span class=\"line\">DISTRIB_CODENAME=bionic</span><br><span class=\"line\">DISTRIB_DESCRIPTION=<span class=\"string\">\"Ubuntu 18.04 LTS\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">gt@yixue-pc:~$ uname -m</span><br><span class=\"line\">x86_64</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显卡 <a href=\"https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html\" target=\"_blank\" rel=\"noopener\">显卡驱动版本查看</a><br> <strong>这一步很重要，根据版本下载对应的安装文件</strong></p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gt@yixue-pc:~$ cat /proc/driver/nvidia/version</span><br><span class=\"line\">NVRM version: NVIDIA UNIX x86_64 Kernel Module  390.116  Sun Jan 27 07:21:36 PST 2019</span><br><span class=\"line\">GCC version:  gcc version 7.4.0 (Ubuntu 7.4.0-1ubuntu1~18.04)</span><br><span class=\"line\"></span><br><span class=\"line\">gt@yixue-pc:~$ nvidia-smi</span><br><span class=\"line\">Wed May 29 15:27:36 2019</span><br><span class=\"line\">+-----------------------------------------------------------------------------+</span><br><span class=\"line\">| NVIDIA-SMI 390.116                Driver Version: 390.116                   |</span><br><span class=\"line\">|-------------------------------+----------------------+----------------------+</span><br><span class=\"line\">| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class=\"line\">| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class=\"line\">|===============================+======================+======================|</span><br><span class=\"line\">|   0  GeForce GTX 108...  Off  | 00000000:01:00.0 Off |                  N/A |</span><br><span class=\"line\">|  0%   30C    P5    34W / 250W |      0MiB / 11175MiB |      3%      Default |</span><br><span class=\"line\">+-------------------------------+----------------------+----------------------+</span><br><span class=\"line\"></span><br><span class=\"line\">+-----------------------------------------------------------------------------+</span><br><span class=\"line\">| Processes:                                                       GPU Memory |</span><br><span class=\"line\">|  GPU       PID   Type   Process name                             Usage      |</span><br><span class=\"line\">|=============================================================================|</span><br><span class=\"line\">|  No running processes found                                                 |</span><br><span class=\"line\">+-----------------------------------------------------------------------------+</span><br><span class=\"line\"></span><br><span class=\"line\">gt@yixue-pc:~$ lspci | grep -i nvidia</span><br><span class=\"line\">01:00.0 VGA compatible controller: NVIDIA Corporation GP102 [GeForce GTX 1080 Ti] (rev a1)</span><br><span class=\"line\">01:00.1 Audio device: NVIDIA Corporation GP102 HDMI Audio Controller (rev a1)</span><br><span class=\"line\">gt@yixue-pc:~$ lsmod | grep -i nvidia</span><br><span class=\"line\">nvidia_uvm            757760  0</span><br><span class=\"line\">nvidia_drm             40960  0</span><br><span class=\"line\">nvidia_modeset       1048576  1 nvidia_drm</span><br><span class=\"line\">nvidia              14376960  2 nvidia_uvm,nvidia_modeset</span><br><span class=\"line\">drm_kms_helper        167936  1 nvidia_drm</span><br><span class=\"line\">drm                   401408  3 drm_kms_helper,nvidia_drm</span><br><span class=\"line\">ipmi_msghandler        53248  2 ipmi_devintf,nvidia</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"ubuntu18-04-安装-cuda\"><a href=\"#ubuntu18-04-安装-cuda\" class=\"headerlink\" title=\"ubuntu18.04 安装 cuda\"></a>ubuntu18.04 安装 cuda</h2><ol>\n<li><p>环境准备</p>\n<ul>\n<li><p>ubuntu 下载环境依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 一些依赖</span></span><br><span class=\"line\">sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看对应的驱动是否安装</span></span><br><span class=\"line\">ubuntu-drivers devices</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自动安装推荐的驱动</span></span><br><span class=\"line\">sudo ubuntu-drivers autoinstall</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载cuda、cudann (根据环境下载对应的版本)<br><a href=\"https://developer.nvidia.com/cuda-90-download-archive?target_os=Linux&target_arch=x86_64&target_distro=Ubuntu&target_version=1604&target_type=runfilelocal\" target=\"_blank\" rel=\"noopener\">cuda 下载</a><br><a href=\"https://developer.nvidia.com/rdp/cudnn-download\" target=\"_blank\" rel=\"noopener\">cudnn 下载</a></p>\n</li>\n</ul>\n</li>\n<li><p>安装</p>\n<ul>\n<li><p>sh  安装 cuda</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># gcc (ubuntu18.04 默认 gcc 7.4) 需要 4.8</span></span><br><span class=\"line\">sudo apt-get install gcc-4.8</span><br><span class=\"line\">sudo apt-get install g++-4.8</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/bin</span><br><span class=\"line\"></span><br><span class=\"line\">sudo mv gcc gcc.bak <span class=\"comment\">#备份</span></span><br><span class=\"line\">sudo ln -s gcc-4.8 gcc <span class=\"comment\">#重新链接</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo mv g++ g++.bak</span><br><span class=\"line\">sudo ln -s g++-4.8 g++</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看版本</span></span><br><span class=\"line\">gcc -v</span><br><span class=\"line\">g++ -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行脚本</span></span><br><span class=\"line\">sh cuda_9.0.176_384.81_linux.run</span><br><span class=\"line\">sh cuda_9.0.176.1_linux.run</span><br><span class=\"line\">sh cuda_9.0.176.2_linux.run</span><br><span class=\"line\">sh cuda_9.0.176.3_linux.run</span><br><span class=\"line\">sh cuda_9.0.176.4_linux.run</span><br><span class=\"line\"><span class=\"comment\"># 根据提示选择安装 注意不要安装驱动</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证版本</span></span><br><span class=\"line\">gt@yixue-pc:~$ nvcc --version</span><br><span class=\"line\">nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class=\"line\">Copyright (c) 2005-2017 NVIDIA Corporation</span><br><span class=\"line\">Built on Fri_Sep__1_21:08:03_CDT_2017</span><br><span class=\"line\">Cuda compilation tools, release 9.0, V9.0.176</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># vim /etc/profile</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/cuda-9.0/bin</span><br><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=<span class=\"variable\">$LD_LIBRARY_PATH</span>:/usr/<span class=\"built_in\">local</span>/cuda-9.0/lib64</span><br><span class=\"line\"><span class=\"built_in\">export</span> LIBRARY_PATH=<span class=\"variable\">$LIBRARY_PATH</span>:/usr/<span class=\"built_in\">local</span>/cuda-9.0/lib64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装 cudann</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar xvzf cudnn-9.0-linux-x64-v7.6.0.64.tgz</span><br><span class=\"line\"></span><br><span class=\"line\">sudo cp cuda/include/cudnn.h    /usr/<span class=\"built_in\">local</span>/cuda/include      注意，解压后的文件夹名称为cuda ,将对应文件复制到 /usr/<span class=\"built_in\">local</span>中的cuda内</span><br><span class=\"line\">sudo cp cuda/lib64/libcudnn*    /usr/<span class=\"built_in\">local</span>/cuda/lib64</span><br><span class=\"line\">sudo chmod a+r /usr/<span class=\"built_in\">local</span>/cuda/include/cudnn.h   /usr/<span class=\"built_in\">local</span>/cuda/lib64/libcudnn*</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"卸载cuda\"><a href=\"#卸载cuda\" class=\"headerlink\" title=\"卸载cuda\"></a>卸载cuda</h2><p><a href=\"https://docs.nvidia.com/cuda/cuda-installation-guide-mac-os-x/index.html#uninstall\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@yixue-pc:/usr/<span class=\"built_in\">local</span>/cuda/bin<span class=\"comment\"># ./cuda-uninstaller</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://blog.csdn.net/qq_38298902/article/details/79980749\" target=\"_blank\" rel=\"noopener\">安装mxnet+显卡驱动+cuda9.1+cudnn7.1</a></p>\n"},{"title":"Kafka 安装及配置","date":"2018-05-30T02:52:58.000Z","_content":"\n## 基本介绍\n\nkafka是一个分布式消息队列。具有高性能、持久化、多副本备份、横向扩展能力。生产者往队列里写消息，\n消费者从队列里取消息进行业务逻辑。一般在架构设计中起到解耦、削峰、异步处理的作用。\n\n## 环境介绍\n\n* 系统： Ubuntu 18.04\n\n## 安装配置 ZooKeeper\n\n1. 下载 配置\n\n    ```bash\n    # 打开 zoo.cfg 可以配置端口，目录等\n    wget http://mirrors.cnnic.cn/apache/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz\n    tar zxvf zookeeper-3.4.6.tar.gz\n    cd zookeeper-3.4.6\n    cp -rf conf/zoo_sample.cfg conf/zoo.cfg\n    vim conf/zoo.cfg\n\n    # 启动\n    bin/zkServer.start\n    ```\n\n## 安装配置 Kafka\n\n1. 下载 配置 (需要修改 `server.properties zookeeper.connect=localhost:2181`)\n\n    ``` bash\n    # 打开 zoo.cfg 可以配置端口，目录等\n    wget http://apache.fayea.com/kafka/0.8.2.1/kafka_2.10-0.8.2.1.tgz\n    tar -zxf kafka_2.10-0.8.2.1.tgz\n    cd kafka_2.10-0.8.2.1\n    vi config/server.properties\n    ```\n\n2. 启动\n\n    ``` bash\n    bin/kafka-server-start.config/server.properties\n    ```\n\n3. 命令简介\n\n    ```bash\n    # 创建Topic\n    bin/kafka-topics --create --topic kafkatopic --replication-factor 1 --partitions 1 --zookeeper localhost:2181\n\n    # 查看Topic\n    bin/kafka-topics --list --zookeeper localhost:2181\n\n    # 启动Producer 生产消息\n    bin/kafka-console-producer --broker-list localhost:9092 --topic kafkatopic\n\n    # 启动Consumer 消费消息\n    bin/kafka-console-consumer --zookeeper localhost:2181 --topic kafkatopic --from-beginning\n\n    # 删除Topic\n    bin/kafka-run-class kafka.admin.TopicCommand --delete --topic kafkatopic --zookeeper localhost:2181\n\n    # 查看Topic 的offset \n    bin/kafka-consumer-offset-checker    --zookeeper localhost:2181 --topic kafkatopic --group consumer\n\n    ```\n\n## Kadka 监控配置\n\n### KafkaOffsetMonitor 安装配置\n\n1. 下载     https://github.com/quantifind/KafkaOffsetMonitor/releases/tag/v0.2.0\n\n2. 启动\n\n    ```bash\n    java -cp KafkaOffsetMonitor-assembly-0.2.0.jar \\\n            com.quantifind.kafka.offsetapp.OffsetGetterWeb \\\n            --zk loaclhost:2181 \\\n            --port 8089 \\\n            --refre10.seconds \\\n            --retain 2.days\n\n    # 可以用 nohup & 启动\n    ```\n\n### Kafka-manager\n\n1. 下载     https://github.com/yahoo/kafka-manager\n\n2. 安装配置\n\n    ```bash\n\n    # 默认配置java 环境\n\n    git clone https://github.com/yahoo/kafka-manager/releases\n\n    cd kafka-manager\n\n    ./sbt clean dist\n\n    # 命令执行完成后，在 target/universal 目录中会生产一个zip压缩包kafka-manager-1.3.3.7.zip\n\n    cd target/universal \n\n    unzip kafka-manager-1.3.3.7.zip\n\n\n    # 配置 kafka-manager.zkhosts=\"localhost:2181\"\n    vi conf/application.conf\n    ```\n\n3. 这里如果想看见更多信息需要额外配置\n\n    ```bash\n\n    # 修改 KAFKA_JMX_OPTS\n    vi kafka-run-class.sh\n\n        KAFKA_JMX_OPTS=\"-Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false    -Dcom.sun.management.jmxremote.ssl=false\"\n        JMX_PORT=9999\n\n    # 添加 JMX_PORT\n    vi kafka-server-start.sh\n\n    export JMX_PORT=${JMX_PORT:-9999\n\n    ```\n\n4. 启动\n\n    ```bash\n    bin/kafka-manager\n    # 可以用 nohup & 启动\n    ```\n","source":"_posts/20180530-kafka.md","raw":"---\ntitle: Kafka 安装及配置\ndate: 2018-05-30 10:52:58\ntags: 消息队列 \ncategories: 后端\n\n---\n\n## 基本介绍\n\nkafka是一个分布式消息队列。具有高性能、持久化、多副本备份、横向扩展能力。生产者往队列里写消息，\n消费者从队列里取消息进行业务逻辑。一般在架构设计中起到解耦、削峰、异步处理的作用。\n\n## 环境介绍\n\n* 系统： Ubuntu 18.04\n\n## 安装配置 ZooKeeper\n\n1. 下载 配置\n\n    ```bash\n    # 打开 zoo.cfg 可以配置端口，目录等\n    wget http://mirrors.cnnic.cn/apache/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz\n    tar zxvf zookeeper-3.4.6.tar.gz\n    cd zookeeper-3.4.6\n    cp -rf conf/zoo_sample.cfg conf/zoo.cfg\n    vim conf/zoo.cfg\n\n    # 启动\n    bin/zkServer.start\n    ```\n\n## 安装配置 Kafka\n\n1. 下载 配置 (需要修改 `server.properties zookeeper.connect=localhost:2181`)\n\n    ``` bash\n    # 打开 zoo.cfg 可以配置端口，目录等\n    wget http://apache.fayea.com/kafka/0.8.2.1/kafka_2.10-0.8.2.1.tgz\n    tar -zxf kafka_2.10-0.8.2.1.tgz\n    cd kafka_2.10-0.8.2.1\n    vi config/server.properties\n    ```\n\n2. 启动\n\n    ``` bash\n    bin/kafka-server-start.config/server.properties\n    ```\n\n3. 命令简介\n\n    ```bash\n    # 创建Topic\n    bin/kafka-topics --create --topic kafkatopic --replication-factor 1 --partitions 1 --zookeeper localhost:2181\n\n    # 查看Topic\n    bin/kafka-topics --list --zookeeper localhost:2181\n\n    # 启动Producer 生产消息\n    bin/kafka-console-producer --broker-list localhost:9092 --topic kafkatopic\n\n    # 启动Consumer 消费消息\n    bin/kafka-console-consumer --zookeeper localhost:2181 --topic kafkatopic --from-beginning\n\n    # 删除Topic\n    bin/kafka-run-class kafka.admin.TopicCommand --delete --topic kafkatopic --zookeeper localhost:2181\n\n    # 查看Topic 的offset \n    bin/kafka-consumer-offset-checker    --zookeeper localhost:2181 --topic kafkatopic --group consumer\n\n    ```\n\n## Kadka 监控配置\n\n### KafkaOffsetMonitor 安装配置\n\n1. 下载     https://github.com/quantifind/KafkaOffsetMonitor/releases/tag/v0.2.0\n\n2. 启动\n\n    ```bash\n    java -cp KafkaOffsetMonitor-assembly-0.2.0.jar \\\n            com.quantifind.kafka.offsetapp.OffsetGetterWeb \\\n            --zk loaclhost:2181 \\\n            --port 8089 \\\n            --refre10.seconds \\\n            --retain 2.days\n\n    # 可以用 nohup & 启动\n    ```\n\n### Kafka-manager\n\n1. 下载     https://github.com/yahoo/kafka-manager\n\n2. 安装配置\n\n    ```bash\n\n    # 默认配置java 环境\n\n    git clone https://github.com/yahoo/kafka-manager/releases\n\n    cd kafka-manager\n\n    ./sbt clean dist\n\n    # 命令执行完成后，在 target/universal 目录中会生产一个zip压缩包kafka-manager-1.3.3.7.zip\n\n    cd target/universal \n\n    unzip kafka-manager-1.3.3.7.zip\n\n\n    # 配置 kafka-manager.zkhosts=\"localhost:2181\"\n    vi conf/application.conf\n    ```\n\n3. 这里如果想看见更多信息需要额外配置\n\n    ```bash\n\n    # 修改 KAFKA_JMX_OPTS\n    vi kafka-run-class.sh\n\n        KAFKA_JMX_OPTS=\"-Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false    -Dcom.sun.management.jmxremote.ssl=false\"\n        JMX_PORT=9999\n\n    # 添加 JMX_PORT\n    vi kafka-server-start.sh\n\n    export JMX_PORT=${JMX_PORT:-9999\n\n    ```\n\n4. 启动\n\n    ```bash\n    bin/kafka-manager\n    # 可以用 nohup & 启动\n    ```\n","slug":"kafka","published":1,"updated":"2020-10-27T08:34:58.489Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrr9wvc0005geql0ka3euh0","content":"<h2 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h2><p>kafka是一个分布式消息队列。具有高性能、持久化、多副本备份、横向扩展能力。生产者往队列里写消息，<br>消费者从队列里取消息进行业务逻辑。一般在架构设计中起到解耦、削峰、异步处理的作用。</p>\n<h2 id=\"环境介绍\"><a href=\"#环境介绍\" class=\"headerlink\" title=\"环境介绍\"></a>环境介绍</h2><ul>\n<li>系统： Ubuntu 18.04</li>\n</ul>\n<h2 id=\"安装配置-ZooKeeper\"><a href=\"#安装配置-ZooKeeper\" class=\"headerlink\" title=\"安装配置 ZooKeeper\"></a>安装配置 ZooKeeper</h2><ol>\n<li><p>下载 配置</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打开 zoo.cfg 可以配置端口，目录等</span></span><br><span class=\"line\">wget http://mirrors.cnnic.cn/apache/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz</span><br><span class=\"line\">tar zxvf zookeeper-3.4.6.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> zookeeper-3.4.6</span><br><span class=\"line\">cp -rf conf/zoo_sample.cfg conf/zoo.cfg</span><br><span class=\"line\">vim conf/zoo.cfg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">bin/zkServer.start</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"安装配置-Kafka\"><a href=\"#安装配置-Kafka\" class=\"headerlink\" title=\"安装配置 Kafka\"></a>安装配置 Kafka</h2><ol>\n<li><p>下载 配置 (需要修改 <code>server.properties zookeeper.connect=localhost:2181</code>)</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打开 zoo.cfg 可以配置端口，目录等</span></span><br><span class=\"line\">wget http://apache.fayea.com/kafka/0.8.2.1/kafka_2.10-0.8.2.1.tgz</span><br><span class=\"line\">tar -zxf kafka_2.10-0.8.2.1.tgz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> kafka_2.10-0.8.2.1</span><br><span class=\"line\">vi config/server.properties</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-server-start.config/server.properties</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>命令简介</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建Topic</span></span><br><span class=\"line\">bin/kafka-topics --create --topic kafkatopic --replication-factor 1 --partitions 1 --zookeeper localhost:2181</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看Topic</span></span><br><span class=\"line\">bin/kafka-topics --list --zookeeper localhost:2181</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动Producer 生产消息</span></span><br><span class=\"line\">bin/kafka-console-producer --broker-list localhost:9092 --topic kafkatopic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动Consumer 消费消息</span></span><br><span class=\"line\">bin/kafka-console-consumer --zookeeper localhost:2181 --topic kafkatopic --from-beginning</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除Topic</span></span><br><span class=\"line\">bin/kafka-run-class kafka.admin.TopicCommand --delete --topic kafkatopic --zookeeper localhost:2181</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看Topic 的offset </span></span><br><span class=\"line\">bin/kafka-consumer-offset-checker    --zookeeper localhost:2181 --topic kafkatopic --group consumer</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"Kadka-监控配置\"><a href=\"#Kadka-监控配置\" class=\"headerlink\" title=\"Kadka 监控配置\"></a>Kadka 监控配置</h2><h3 id=\"KafkaOffsetMonitor-安装配置\"><a href=\"#KafkaOffsetMonitor-安装配置\" class=\"headerlink\" title=\"KafkaOffsetMonitor 安装配置\"></a>KafkaOffsetMonitor 安装配置</h3><ol>\n<li><p>下载     <a href=\"https://github.com/quantifind/KafkaOffsetMonitor/releases/tag/v0.2.0\" target=\"_blank\" rel=\"noopener\">https://github.com/quantifind/KafkaOffsetMonitor/releases/tag/v0.2.0</a></p>\n</li>\n<li><p>启动</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -cp KafkaOffsetMonitor-assembly-0.2.0.jar \\</span><br><span class=\"line\">        com.quantifind.kafka.offsetapp.OffsetGetterWeb \\</span><br><span class=\"line\">        --zk loaclhost:2181 \\</span><br><span class=\"line\">        --port 8089 \\</span><br><span class=\"line\">        --refre10.seconds \\</span><br><span class=\"line\">        --retain 2.days</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可以用 nohup &amp; 启动</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"Kafka-manager\"><a href=\"#Kafka-manager\" class=\"headerlink\" title=\"Kafka-manager\"></a>Kafka-manager</h3><ol>\n<li><p>下载     <a href=\"https://github.com/yahoo/kafka-manager\" target=\"_blank\" rel=\"noopener\">https://github.com/yahoo/kafka-manager</a></p>\n</li>\n<li><p>安装配置</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认配置java 环境</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/yahoo/kafka-manager/releases</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> kafka-manager</span><br><span class=\"line\"></span><br><span class=\"line\">./sbt clean dist</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 命令执行完成后，在 target/universal 目录中会生产一个zip压缩包kafka-manager-1.3.3.7.zip</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> target/universal </span><br><span class=\"line\"></span><br><span class=\"line\">unzip kafka-manager-1.3.3.7.zip</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置 kafka-manager.zkhosts=\"localhost:2181\"</span></span><br><span class=\"line\">vi conf/application.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这里如果想看见更多信息需要额外配置</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改 KAFKA_JMX_OPTS</span></span><br><span class=\"line\">vi kafka-run-class.sh</span><br><span class=\"line\"></span><br><span class=\"line\">    KAFKA_JMX_OPTS=<span class=\"string\">\"-Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false    -Dcom.sun.management.jmxremote.ssl=false\"</span></span><br><span class=\"line\">    JMX_PORT=9999</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加 JMX_PORT</span></span><br><span class=\"line\">vi kafka-server-start.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> JMX_PORT=$&#123;JMX_PORT:-9999</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-manager</span><br><span class=\"line\"><span class=\"comment\"># 可以用 nohup &amp; 启动</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h2><p>kafka是一个分布式消息队列。具有高性能、持久化、多副本备份、横向扩展能力。生产者往队列里写消息，<br>消费者从队列里取消息进行业务逻辑。一般在架构设计中起到解耦、削峰、异步处理的作用。</p>\n<h2 id=\"环境介绍\"><a href=\"#环境介绍\" class=\"headerlink\" title=\"环境介绍\"></a>环境介绍</h2><ul>\n<li>系统： Ubuntu 18.04</li>\n</ul>\n<h2 id=\"安装配置-ZooKeeper\"><a href=\"#安装配置-ZooKeeper\" class=\"headerlink\" title=\"安装配置 ZooKeeper\"></a>安装配置 ZooKeeper</h2><ol>\n<li><p>下载 配置</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打开 zoo.cfg 可以配置端口，目录等</span></span><br><span class=\"line\">wget http://mirrors.cnnic.cn/apache/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz</span><br><span class=\"line\">tar zxvf zookeeper-3.4.6.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> zookeeper-3.4.6</span><br><span class=\"line\">cp -rf conf/zoo_sample.cfg conf/zoo.cfg</span><br><span class=\"line\">vim conf/zoo.cfg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">bin/zkServer.start</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"安装配置-Kafka\"><a href=\"#安装配置-Kafka\" class=\"headerlink\" title=\"安装配置 Kafka\"></a>安装配置 Kafka</h2><ol>\n<li><p>下载 配置 (需要修改 <code>server.properties zookeeper.connect=localhost:2181</code>)</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打开 zoo.cfg 可以配置端口，目录等</span></span><br><span class=\"line\">wget http://apache.fayea.com/kafka/0.8.2.1/kafka_2.10-0.8.2.1.tgz</span><br><span class=\"line\">tar -zxf kafka_2.10-0.8.2.1.tgz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> kafka_2.10-0.8.2.1</span><br><span class=\"line\">vi config/server.properties</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-server-start.config/server.properties</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>命令简介</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建Topic</span></span><br><span class=\"line\">bin/kafka-topics --create --topic kafkatopic --replication-factor 1 --partitions 1 --zookeeper localhost:2181</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看Topic</span></span><br><span class=\"line\">bin/kafka-topics --list --zookeeper localhost:2181</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动Producer 生产消息</span></span><br><span class=\"line\">bin/kafka-console-producer --broker-list localhost:9092 --topic kafkatopic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动Consumer 消费消息</span></span><br><span class=\"line\">bin/kafka-console-consumer --zookeeper localhost:2181 --topic kafkatopic --from-beginning</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除Topic</span></span><br><span class=\"line\">bin/kafka-run-class kafka.admin.TopicCommand --delete --topic kafkatopic --zookeeper localhost:2181</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看Topic 的offset </span></span><br><span class=\"line\">bin/kafka-consumer-offset-checker    --zookeeper localhost:2181 --topic kafkatopic --group consumer</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"Kadka-监控配置\"><a href=\"#Kadka-监控配置\" class=\"headerlink\" title=\"Kadka 监控配置\"></a>Kadka 监控配置</h2><h3 id=\"KafkaOffsetMonitor-安装配置\"><a href=\"#KafkaOffsetMonitor-安装配置\" class=\"headerlink\" title=\"KafkaOffsetMonitor 安装配置\"></a>KafkaOffsetMonitor 安装配置</h3><ol>\n<li><p>下载     <a href=\"https://github.com/quantifind/KafkaOffsetMonitor/releases/tag/v0.2.0\" target=\"_blank\" rel=\"noopener\">https://github.com/quantifind/KafkaOffsetMonitor/releases/tag/v0.2.0</a></p>\n</li>\n<li><p>启动</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -cp KafkaOffsetMonitor-assembly-0.2.0.jar \\</span><br><span class=\"line\">        com.quantifind.kafka.offsetapp.OffsetGetterWeb \\</span><br><span class=\"line\">        --zk loaclhost:2181 \\</span><br><span class=\"line\">        --port 8089 \\</span><br><span class=\"line\">        --refre10.seconds \\</span><br><span class=\"line\">        --retain 2.days</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可以用 nohup &amp; 启动</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"Kafka-manager\"><a href=\"#Kafka-manager\" class=\"headerlink\" title=\"Kafka-manager\"></a>Kafka-manager</h3><ol>\n<li><p>下载     <a href=\"https://github.com/yahoo/kafka-manager\" target=\"_blank\" rel=\"noopener\">https://github.com/yahoo/kafka-manager</a></p>\n</li>\n<li><p>安装配置</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认配置java 环境</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/yahoo/kafka-manager/releases</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> kafka-manager</span><br><span class=\"line\"></span><br><span class=\"line\">./sbt clean dist</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 命令执行完成后，在 target/universal 目录中会生产一个zip压缩包kafka-manager-1.3.3.7.zip</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> target/universal </span><br><span class=\"line\"></span><br><span class=\"line\">unzip kafka-manager-1.3.3.7.zip</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置 kafka-manager.zkhosts=\"localhost:2181\"</span></span><br><span class=\"line\">vi conf/application.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这里如果想看见更多信息需要额外配置</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改 KAFKA_JMX_OPTS</span></span><br><span class=\"line\">vi kafka-run-class.sh</span><br><span class=\"line\"></span><br><span class=\"line\">    KAFKA_JMX_OPTS=<span class=\"string\">\"-Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false    -Dcom.sun.management.jmxremote.ssl=false\"</span></span><br><span class=\"line\">    JMX_PORT=9999</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加 JMX_PORT</span></span><br><span class=\"line\">vi kafka-server-start.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> JMX_PORT=$&#123;JMX_PORT:-9999</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-manager</span><br><span class=\"line\"><span class=\"comment\"># 可以用 nohup &amp; 启动</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"Greenplum","date":"2018-05-30T02:52:58.000Z","_content":"\n## 基本介绍\n\nGreenplum是一个MPP（海量并行处理）计算框架的分布式数据库，其数据库引擎层是基于著名的Postgresql数据库，企业级数据库产品，现已开源。Greenplum拥有丰富的特性，包括：\n\n1. 完全支持ANSI SQL 2008标准和SQL OLAP 2003 扩展，支持ODBC和JDBC\n2. 支持分布式事务，支持ACID\n3. 支持行存储、列存储，以及可通过外部表的方式访问其它关系型数据库或者Hadoop\n4. 拥有良好的线性扩展能力，支持上千个节点\n\n## 环境介绍\n\n|     主机    |  IP |  内存(G)   |  系统  |\n| :--------:  | :-----------:  |:--------:  | :----:  |\n| mdw         | 172.16.16.134  |  16   |   CentOS Linux release 7.4.1708   |\n| sdw1        | 172.16.16.135  | 16   |   CentOS Linux release 7.4.1708   |\n| sdw1        | 172.16.16.138  |  16   |  CentOS Linux release 7.4.1708    |\n\n## 系统参数调整\n\n1. 修改hosts文件(三台主机)\n\n    ``` bash\n    172.16.16.134 mdw\n    172.16.16.135 sdw1\n    172.16.16.138 sdw2\n    ```\n\n2. 修改或添加/etc/sysctl.conf(三台主机)\n\n    ```bash\n    xfs_mount_options = rw,noatime,inode64,allocsize=16m\n    kernel.shmmax = 500000000\n    kernel.shmmni = 4096\n    kernel.shmall = 4000000000\n    kernel.sem = 250 512000 100 2048\n    kernel.sysrq = 1\n    kernel.core_uses_pid = 1\n    kernel.msgmnb = 65536\n    kernel.msgmax = 65536\n    kernel.msgmni = 2048\n    net.ipv4.tcp_syncookies = 1\n    net.ipv4.ip_forward = 0\n    net.ipv4.conf.default.accept_source_route = 0\n    net.ipv4.tcp_tw_recycle = 1\n    net.ipv4.tcp_max_syn_backlog = 4096\n    net.ipv4.conf.all.arp_filter = 1\n    net.ipv4.ip_local_port_range = 1025 65535\n    net.core.netdev_max_backlog = 10000\n    vm.overcommit_memory = 2\n    ```\n\n3. 配置/etc/security/limits.conf文件，添加以下内容(三台主机)\n\n    ``` bash\n    * soft nofile 65536\n    * hard nofile 65536\n    * soft nproc 131072\n    * hard nproc 131072\n    ```\n\n4. 设置预读块的值为16384(三台主机 未设置)\n\n    ``` bash\n    # /sbin/blockdev --getra /dev/sda 查看预读块，默认大小为256\n    # /sbin/blockdev --setra 16384 /dev/sda  设置预读块\n    ```\n\n5. 设置磁盘访问I/O调度策略(三台主机 未设置)\n\n    ``` bash\n    #echo deadline > /sys/block/sda/queue/scheduler\n    ```\n\n6. 启动ssh\n\n    ```bash\n    ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key\n    ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key\n    ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key\n    /usr/sbin/sshd\n    ```\n\n7. 创建greenplum的用户和用户组\n\n    ``` bash\n    groupadd -g 530 gpadmin\n    useradd -g 530 -u 530 -m -d /home/gpadmin -s /bin/bash gpadmin\n    chown -R gpadmin:gpadmin /home/gpadmin\n    passwd gpadmin\n    ```\n\n8. 关闭 iptables，selinux\n\n    ```bash\n    service iptables stop\n    chkconfig iptables off\n\n    [root@mdw selinux]# cat /etc/selinux/config \n    # This file controls the state of SELinux on the system.\n    # SELINUX= can take one of these three values:\n    #     enforcing - SELinux security policy is enforced.\n    #     permissive - SELinux prints warnings instead of enforcing.\n    #     disabled - No SELinux policy is loaded.\n    SELINUX=disabled\n    # SELINUXTYPE= can take one of these two values:\n    #     targeted - Targeted processes are protected,\n    #     mls - Multi Level Security protection.\n    SELINUXTYPE=targeted \n\n    ```\n\n## 下载安装包并安装\n\n1. 官网下载 https://network.pivotal.io/products/pivotal-gpdb  (这里可能需要注册)\n\n    ``` bash\n    # greenplum 安装包\n    greenplum-db-5.8.0-rhel7-x86_64.zip\n\n    # greenplum web管理界面\n    greenplum-cc-web-4.1.1-LINUX-x86_64.zip\n\n    ```\n\n2. 上传服务器并安装\n\n    ```bash\n    unzip greenplum-db-4.2.2.4-build-1-CE-RHEL5-i386.zip\n\n    # 这里输入安装目录(我是安装在当前用户home)\n    /bin/bash greenplum-db-4.2.2.4-build-1-CE-RHEL5-i386.bin\n\n    source ～/greenplum-db/greenplum_path.sh\n    ```\n\n3. 创建 hostlist  &nbsp; seg_hosts &nbsp; gpinitsystem_config\n\n    ```bash\n    cat conf/hostlist\n    mdw\n    sdw1\n    sdw2\n\n    cat conf/seg_hosts\n    sdw1\n    sdw2\n\n    cat conf/gpinitsystem_config\n\n    # Segment 的名称前缀\n    SEG_PREFIX=gpseg\n    # Primary Segment 起始的端口号\n    PORT_BASE=33000\n    # 指定 Primary Segment 的数据目录\n    declare -a DATA_DIRECTORY=(/home/gpadmin/gpdata/gpdatap1  /home/gpadmin/gpdata/gpdatap2)\n    # Master 所在机器的 Hostname\n    MASTER_HOSTNAME=mdw\n    # 指定 Master 的数据目录\n    MASTER_DIRECTORY=/home/gpadmin/gpdata/gpmaster\n    # Master 的端口 \n    MASTER_PORT=2345\n    # 指定Bash的版本\n    TRUSTED_SHELL=/usr/bin/ssh\n    # Mirror Segment起始的端口号\n    MIRROR_PORT_BASE=43000\n    # Primary Segment 主备同步的起始端口号\n    REPLICATION_PORT_BASE=34000\n    # Mirror Segment 主备同步的起始端口号\n    MIRROR_REPLICATION_PORT_BASE=44000\n    # Mirror Segment 的数据目录\n    declare -a MIRROR_DATA_DIRECTORY=(/home/gpadmin/gpdata/gpdatam1 /home/gpadmin/gpdata/gpdatam2)\n\n    ```\n\n4. 设置环境变量，打通所有节点\n\n    ``` bash\n    # 这里需要输入 segment  gpadmin的密码 成功则 completed successfully\n\n\n    gpssh-exkeys -f /home/gpadmin/conf/hostlist \n\n    # 批量创建文件\n    gpssh -f /home/gpadmin/conf/hostlist\n\n    mkdir gpdata\n\n    cd gpdata\n\n    mkdir gpmaster gpdatap1 gpdatap2 gpdatam1 gpdatam2\n    ```\n\n5. 分发安装包\n\n    可以通过软连接的方式 更新greenplum文件位置\n\n    ```bash\n\n    # 打包master节点上的安装包\n    tar -cf gp.tar greenplum-db/\n    # 分发\n    gpscp -f /home/gpadmin/conf/hostlist gp.4.3.tar =:/home/gpadmin/\n\n    gpssh -f hostlist\n\n    tar -xf gp.tar\n\n    ```\n\n6. 在每个节点上配置.bash_profile环境变量\n\n    ```bash\n    [gpadmin@mdw ~]$ cat .bash_profile \n    # .bash_profile\n\n    # Get the aliases and functions\n    if [ -f ~/.bashrc ]; then\n        . ~/.bashrc\n    fi\n\n    # User specific environment and startup programs\n\n    PATH=$PATH:$HOME/bin\n\n    export PATH\n\n    source /home/gpadmin/greenplum-db/greenplum_path.sh\n    export MASTER_DATA_DIRECTORY=/home/gpadmin/gpdata/gpmaster/gpseg-1\n    export PGPORT=2345\n    export PGDATABASE=testDB\n\n    [gpadmin@mdw ~]$ source .bash_profile\n\n    ```\n\n7. 初始化数据库, 默认初始化完成就启动数据库了\n\n    ```bash\n    gpinitsystem -c /home/gpadmin/conf/gpinitsystem_config -a\n    ```\n\n## Greenplum-cc-web监控软件安装\n\n1. 运行gpperfmon_install命令\n\n    * 创建greenplum监控用数据库(gpperfmon)\n\n    * 创建greenplum监控用数据库角色(gpmon),后面登陆网页时使用\n\n    * 配置greenplum数据库文件(pg_hba.conf和.pgpass)\n\n    * 设置postgresql.conf文件，增加启用监控相关的参数。\n\n    ```bash\n    # postgresql.conf 添加\n    checkpoint_segments=8\n    gp_enable_gpperfmon=on\n    gpperfmon_port=8888\n    gp_external_enable_exec=on\n    gpperfmon_log_alert_level='warning'\n    gp_enable_query_metrics=on\n\n    # 安装 gpperfmon\n    gpperfmon_install  --enable  --password  gpmon  --port 2345\n\n    # 重启\n    gpstop -r\n\n    # 查看配置是否成功\n    ps -ef |grep gpmmon |grep -v grep\n    ```\n\n2. 安装 GreenplumCommand Center Console (默认所有节点都会安装)\n\n    ```bash\n    unzip greenplum-cc-web-4.1.1-LINUX-x86_64.zip\n\n    ./greenplum-cc-web-4.1.1-LINUX-x86_64.bin\n\n    source ~/greenplum-cc-web/gpcc_path.sh\n    ```\n\n3. 启动\n\n    ```bash\n    gpcc start\n    ```\n\n## 扩充节点\n\n1. 按照如上配置在主机环境\n\n2. 生成expand 配置文件\n\n    ```bash\n    cat expand\n\n    sdw2:sdw2:33002:/data/gpdata/gpdatap1:6:2:p:34002\n    sdw2:sdw2:33003:/data/gpdata/gpdatam1:7:2:m:34003\n\n    内容包括几个字段\n    hostname     主机名\n    address        类似主机名\n    port              segment监听端口\n    fselocation   segment data目录,注意是全路径\n    dbid              gp集群的唯一ID，可以到gp_segment_configuration中获得，必须顺序累加\n    content                 可以到gp_segment_configuration中获得，必须顺序累加\n    prefered_role        角色(p或m)(primary , mirror)\n    replication_port     如果没有mirror则不需要(用于replication的端口)。\n    ```\n\n    ```bash\n    # 查看现有节点情况\n    select * from gp_segment_configuration ;\n\n    # 查看节点数据目录\n    select * from pg_filespace_entry ;\n    ```\n\n    配置文件可以根据以上两个表进行修改， 也可以\n\n    ```bash\n    # cat host\n    sdw2\n\n    gpexpand -f ./host\n\n    ```\n\n3. 运行 `gpexpand -i expand`\n\n4. 数据重分布  `gpexpand  -d 6:00:00` (后面跟需要的时间)\n\n5. 看着日志，错了就回滚  \n\n参考连接 :\n\nhttps://yq.aliyun.com/articles/177\n\nhttps://discuss.pivotal.io/hc/en-us/articles/201202707-How-to-Use-gpexpand-Working-with-One-Host\n\n## BUG 记录\n\n1. Failed to complete obtain psql count Master gp_segment_configuration Script Exiti\n\n    * 问题： 在初始化过程中，如到以下问题：\n\n    ```bash\n    gpadmin-[FATAL]:-Failed to complete obtain psql count Master gp_segment_configuration  Script Exiting!\n    Script has left Greenplum Database in an incomplete state\n    ```\n\n    * 解决方法：\n\n    ```bash\n    echo \"RemoveIPC=no\" >> /etc/systemd/logind.conf\n    /bin/systemctl restart systemd-logind.service\n    ```\n\n2. gpstart error: Do not have enough valid segments to start the array\n\n    * 问题： gpinit 成功了在 gpstart的时候出错\n\n    * 解决： 彻底关闭防火墙并检查是否配置开机自启\n\n## 参考文档\n\n[官方文档](https://gpdb.docs.pivotal.io/580/main/index.html)\n\n[中文文档](https://gp-docs-cn.github.io/docs/common/gpdb-features.html)\n\n[cc-web 官方文档](http://gpcc.docs.pivotal.io/410/welcome.html)","source":"_posts/20180530-greenplum.md","raw":"---\ntitle: Greenplum\ndate: 2018-05-30 10:52:58\ntags: 数据仓库\ncategories: 后端\n---\n\n## 基本介绍\n\nGreenplum是一个MPP（海量并行处理）计算框架的分布式数据库，其数据库引擎层是基于著名的Postgresql数据库，企业级数据库产品，现已开源。Greenplum拥有丰富的特性，包括：\n\n1. 完全支持ANSI SQL 2008标准和SQL OLAP 2003 扩展，支持ODBC和JDBC\n2. 支持分布式事务，支持ACID\n3. 支持行存储、列存储，以及可通过外部表的方式访问其它关系型数据库或者Hadoop\n4. 拥有良好的线性扩展能力，支持上千个节点\n\n## 环境介绍\n\n|     主机    |  IP |  内存(G)   |  系统  |\n| :--------:  | :-----------:  |:--------:  | :----:  |\n| mdw         | 172.16.16.134  |  16   |   CentOS Linux release 7.4.1708   |\n| sdw1        | 172.16.16.135  | 16   |   CentOS Linux release 7.4.1708   |\n| sdw1        | 172.16.16.138  |  16   |  CentOS Linux release 7.4.1708    |\n\n## 系统参数调整\n\n1. 修改hosts文件(三台主机)\n\n    ``` bash\n    172.16.16.134 mdw\n    172.16.16.135 sdw1\n    172.16.16.138 sdw2\n    ```\n\n2. 修改或添加/etc/sysctl.conf(三台主机)\n\n    ```bash\n    xfs_mount_options = rw,noatime,inode64,allocsize=16m\n    kernel.shmmax = 500000000\n    kernel.shmmni = 4096\n    kernel.shmall = 4000000000\n    kernel.sem = 250 512000 100 2048\n    kernel.sysrq = 1\n    kernel.core_uses_pid = 1\n    kernel.msgmnb = 65536\n    kernel.msgmax = 65536\n    kernel.msgmni = 2048\n    net.ipv4.tcp_syncookies = 1\n    net.ipv4.ip_forward = 0\n    net.ipv4.conf.default.accept_source_route = 0\n    net.ipv4.tcp_tw_recycle = 1\n    net.ipv4.tcp_max_syn_backlog = 4096\n    net.ipv4.conf.all.arp_filter = 1\n    net.ipv4.ip_local_port_range = 1025 65535\n    net.core.netdev_max_backlog = 10000\n    vm.overcommit_memory = 2\n    ```\n\n3. 配置/etc/security/limits.conf文件，添加以下内容(三台主机)\n\n    ``` bash\n    * soft nofile 65536\n    * hard nofile 65536\n    * soft nproc 131072\n    * hard nproc 131072\n    ```\n\n4. 设置预读块的值为16384(三台主机 未设置)\n\n    ``` bash\n    # /sbin/blockdev --getra /dev/sda 查看预读块，默认大小为256\n    # /sbin/blockdev --setra 16384 /dev/sda  设置预读块\n    ```\n\n5. 设置磁盘访问I/O调度策略(三台主机 未设置)\n\n    ``` bash\n    #echo deadline > /sys/block/sda/queue/scheduler\n    ```\n\n6. 启动ssh\n\n    ```bash\n    ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key\n    ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key\n    ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key\n    /usr/sbin/sshd\n    ```\n\n7. 创建greenplum的用户和用户组\n\n    ``` bash\n    groupadd -g 530 gpadmin\n    useradd -g 530 -u 530 -m -d /home/gpadmin -s /bin/bash gpadmin\n    chown -R gpadmin:gpadmin /home/gpadmin\n    passwd gpadmin\n    ```\n\n8. 关闭 iptables，selinux\n\n    ```bash\n    service iptables stop\n    chkconfig iptables off\n\n    [root@mdw selinux]# cat /etc/selinux/config \n    # This file controls the state of SELinux on the system.\n    # SELINUX= can take one of these three values:\n    #     enforcing - SELinux security policy is enforced.\n    #     permissive - SELinux prints warnings instead of enforcing.\n    #     disabled - No SELinux policy is loaded.\n    SELINUX=disabled\n    # SELINUXTYPE= can take one of these two values:\n    #     targeted - Targeted processes are protected,\n    #     mls - Multi Level Security protection.\n    SELINUXTYPE=targeted \n\n    ```\n\n## 下载安装包并安装\n\n1. 官网下载 https://network.pivotal.io/products/pivotal-gpdb  (这里可能需要注册)\n\n    ``` bash\n    # greenplum 安装包\n    greenplum-db-5.8.0-rhel7-x86_64.zip\n\n    # greenplum web管理界面\n    greenplum-cc-web-4.1.1-LINUX-x86_64.zip\n\n    ```\n\n2. 上传服务器并安装\n\n    ```bash\n    unzip greenplum-db-4.2.2.4-build-1-CE-RHEL5-i386.zip\n\n    # 这里输入安装目录(我是安装在当前用户home)\n    /bin/bash greenplum-db-4.2.2.4-build-1-CE-RHEL5-i386.bin\n\n    source ～/greenplum-db/greenplum_path.sh\n    ```\n\n3. 创建 hostlist  &nbsp; seg_hosts &nbsp; gpinitsystem_config\n\n    ```bash\n    cat conf/hostlist\n    mdw\n    sdw1\n    sdw2\n\n    cat conf/seg_hosts\n    sdw1\n    sdw2\n\n    cat conf/gpinitsystem_config\n\n    # Segment 的名称前缀\n    SEG_PREFIX=gpseg\n    # Primary Segment 起始的端口号\n    PORT_BASE=33000\n    # 指定 Primary Segment 的数据目录\n    declare -a DATA_DIRECTORY=(/home/gpadmin/gpdata/gpdatap1  /home/gpadmin/gpdata/gpdatap2)\n    # Master 所在机器的 Hostname\n    MASTER_HOSTNAME=mdw\n    # 指定 Master 的数据目录\n    MASTER_DIRECTORY=/home/gpadmin/gpdata/gpmaster\n    # Master 的端口 \n    MASTER_PORT=2345\n    # 指定Bash的版本\n    TRUSTED_SHELL=/usr/bin/ssh\n    # Mirror Segment起始的端口号\n    MIRROR_PORT_BASE=43000\n    # Primary Segment 主备同步的起始端口号\n    REPLICATION_PORT_BASE=34000\n    # Mirror Segment 主备同步的起始端口号\n    MIRROR_REPLICATION_PORT_BASE=44000\n    # Mirror Segment 的数据目录\n    declare -a MIRROR_DATA_DIRECTORY=(/home/gpadmin/gpdata/gpdatam1 /home/gpadmin/gpdata/gpdatam2)\n\n    ```\n\n4. 设置环境变量，打通所有节点\n\n    ``` bash\n    # 这里需要输入 segment  gpadmin的密码 成功则 completed successfully\n\n\n    gpssh-exkeys -f /home/gpadmin/conf/hostlist \n\n    # 批量创建文件\n    gpssh -f /home/gpadmin/conf/hostlist\n\n    mkdir gpdata\n\n    cd gpdata\n\n    mkdir gpmaster gpdatap1 gpdatap2 gpdatam1 gpdatam2\n    ```\n\n5. 分发安装包\n\n    可以通过软连接的方式 更新greenplum文件位置\n\n    ```bash\n\n    # 打包master节点上的安装包\n    tar -cf gp.tar greenplum-db/\n    # 分发\n    gpscp -f /home/gpadmin/conf/hostlist gp.4.3.tar =:/home/gpadmin/\n\n    gpssh -f hostlist\n\n    tar -xf gp.tar\n\n    ```\n\n6. 在每个节点上配置.bash_profile环境变量\n\n    ```bash\n    [gpadmin@mdw ~]$ cat .bash_profile \n    # .bash_profile\n\n    # Get the aliases and functions\n    if [ -f ~/.bashrc ]; then\n        . ~/.bashrc\n    fi\n\n    # User specific environment and startup programs\n\n    PATH=$PATH:$HOME/bin\n\n    export PATH\n\n    source /home/gpadmin/greenplum-db/greenplum_path.sh\n    export MASTER_DATA_DIRECTORY=/home/gpadmin/gpdata/gpmaster/gpseg-1\n    export PGPORT=2345\n    export PGDATABASE=testDB\n\n    [gpadmin@mdw ~]$ source .bash_profile\n\n    ```\n\n7. 初始化数据库, 默认初始化完成就启动数据库了\n\n    ```bash\n    gpinitsystem -c /home/gpadmin/conf/gpinitsystem_config -a\n    ```\n\n## Greenplum-cc-web监控软件安装\n\n1. 运行gpperfmon_install命令\n\n    * 创建greenplum监控用数据库(gpperfmon)\n\n    * 创建greenplum监控用数据库角色(gpmon),后面登陆网页时使用\n\n    * 配置greenplum数据库文件(pg_hba.conf和.pgpass)\n\n    * 设置postgresql.conf文件，增加启用监控相关的参数。\n\n    ```bash\n    # postgresql.conf 添加\n    checkpoint_segments=8\n    gp_enable_gpperfmon=on\n    gpperfmon_port=8888\n    gp_external_enable_exec=on\n    gpperfmon_log_alert_level='warning'\n    gp_enable_query_metrics=on\n\n    # 安装 gpperfmon\n    gpperfmon_install  --enable  --password  gpmon  --port 2345\n\n    # 重启\n    gpstop -r\n\n    # 查看配置是否成功\n    ps -ef |grep gpmmon |grep -v grep\n    ```\n\n2. 安装 GreenplumCommand Center Console (默认所有节点都会安装)\n\n    ```bash\n    unzip greenplum-cc-web-4.1.1-LINUX-x86_64.zip\n\n    ./greenplum-cc-web-4.1.1-LINUX-x86_64.bin\n\n    source ~/greenplum-cc-web/gpcc_path.sh\n    ```\n\n3. 启动\n\n    ```bash\n    gpcc start\n    ```\n\n## 扩充节点\n\n1. 按照如上配置在主机环境\n\n2. 生成expand 配置文件\n\n    ```bash\n    cat expand\n\n    sdw2:sdw2:33002:/data/gpdata/gpdatap1:6:2:p:34002\n    sdw2:sdw2:33003:/data/gpdata/gpdatam1:7:2:m:34003\n\n    内容包括几个字段\n    hostname     主机名\n    address        类似主机名\n    port              segment监听端口\n    fselocation   segment data目录,注意是全路径\n    dbid              gp集群的唯一ID，可以到gp_segment_configuration中获得，必须顺序累加\n    content                 可以到gp_segment_configuration中获得，必须顺序累加\n    prefered_role        角色(p或m)(primary , mirror)\n    replication_port     如果没有mirror则不需要(用于replication的端口)。\n    ```\n\n    ```bash\n    # 查看现有节点情况\n    select * from gp_segment_configuration ;\n\n    # 查看节点数据目录\n    select * from pg_filespace_entry ;\n    ```\n\n    配置文件可以根据以上两个表进行修改， 也可以\n\n    ```bash\n    # cat host\n    sdw2\n\n    gpexpand -f ./host\n\n    ```\n\n3. 运行 `gpexpand -i expand`\n\n4. 数据重分布  `gpexpand  -d 6:00:00` (后面跟需要的时间)\n\n5. 看着日志，错了就回滚  \n\n参考连接 :\n\nhttps://yq.aliyun.com/articles/177\n\nhttps://discuss.pivotal.io/hc/en-us/articles/201202707-How-to-Use-gpexpand-Working-with-One-Host\n\n## BUG 记录\n\n1. Failed to complete obtain psql count Master gp_segment_configuration Script Exiti\n\n    * 问题： 在初始化过程中，如到以下问题：\n\n    ```bash\n    gpadmin-[FATAL]:-Failed to complete obtain psql count Master gp_segment_configuration  Script Exiting!\n    Script has left Greenplum Database in an incomplete state\n    ```\n\n    * 解决方法：\n\n    ```bash\n    echo \"RemoveIPC=no\" >> /etc/systemd/logind.conf\n    /bin/systemctl restart systemd-logind.service\n    ```\n\n2. gpstart error: Do not have enough valid segments to start the array\n\n    * 问题： gpinit 成功了在 gpstart的时候出错\n\n    * 解决： 彻底关闭防火墙并检查是否配置开机自启\n\n## 参考文档\n\n[官方文档](https://gpdb.docs.pivotal.io/580/main/index.html)\n\n[中文文档](https://gp-docs-cn.github.io/docs/common/gpdb-features.html)\n\n[cc-web 官方文档](http://gpcc.docs.pivotal.io/410/welcome.html)","slug":"greenplum","published":1,"updated":"2020-10-27T08:34:57.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrr9wvh0006geqlfvupdpcx","content":"<h2 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h2><p>Greenplum是一个MPP（海量并行处理）计算框架的分布式数据库，其数据库引擎层是基于著名的Postgresql数据库，企业级数据库产品，现已开源。Greenplum拥有丰富的特性，包括：</p>\n<ol>\n<li>完全支持ANSI SQL 2008标准和SQL OLAP 2003 扩展，支持ODBC和JDBC</li>\n<li>支持分布式事务，支持ACID</li>\n<li>支持行存储、列存储，以及可通过外部表的方式访问其它关系型数据库或者Hadoop</li>\n<li>拥有良好的线性扩展能力，支持上千个节点</li>\n</ol>\n<h2 id=\"环境介绍\"><a href=\"#环境介绍\" class=\"headerlink\" title=\"环境介绍\"></a>环境介绍</h2><table>\n<thead>\n<tr>\n<th align=\"center\">主机</th>\n<th align=\"center\">IP</th>\n<th align=\"center\">内存(G)</th>\n<th align=\"center\">系统</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">mdw</td>\n<td align=\"center\">172.16.16.134</td>\n<td align=\"center\">16</td>\n<td align=\"center\">CentOS Linux release 7.4.1708</td>\n</tr>\n<tr>\n<td align=\"center\">sdw1</td>\n<td align=\"center\">172.16.16.135</td>\n<td align=\"center\">16</td>\n<td align=\"center\">CentOS Linux release 7.4.1708</td>\n</tr>\n<tr>\n<td align=\"center\">sdw1</td>\n<td align=\"center\">172.16.16.138</td>\n<td align=\"center\">16</td>\n<td align=\"center\">CentOS Linux release 7.4.1708</td>\n</tr>\n</tbody></table>\n<h2 id=\"系统参数调整\"><a href=\"#系统参数调整\" class=\"headerlink\" title=\"系统参数调整\"></a>系统参数调整</h2><ol>\n<li><p>修改hosts文件(三台主机)</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">172.16.16.134 mdw</span><br><span class=\"line\">172.16.16.135 sdw1</span><br><span class=\"line\">172.16.16.138 sdw2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改或添加/etc/sysctl.conf(三台主机)</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xfs_mount_options = rw,noatime,inode64,allocsize=16m</span><br><span class=\"line\">kernel.shmmax = 500000000</span><br><span class=\"line\">kernel.shmmni = 4096</span><br><span class=\"line\">kernel.shmall = 4000000000</span><br><span class=\"line\">kernel.sem = 250 512000 100 2048</span><br><span class=\"line\">kernel.sysrq = 1</span><br><span class=\"line\">kernel.core_uses_pid = 1</span><br><span class=\"line\">kernel.msgmnb = 65536</span><br><span class=\"line\">kernel.msgmax = 65536</span><br><span class=\"line\">kernel.msgmni = 2048</span><br><span class=\"line\">net.ipv4.tcp_syncookies = 1</span><br><span class=\"line\">net.ipv4.ip_forward = 0</span><br><span class=\"line\">net.ipv4.conf.default.accept_source_route = 0</span><br><span class=\"line\">net.ipv4.tcp_tw_recycle = 1</span><br><span class=\"line\">net.ipv4.tcp_max_syn_backlog = 4096</span><br><span class=\"line\">net.ipv4.conf.all.arp_filter = 1</span><br><span class=\"line\">net.ipv4.ip_local_port_range = 1025 65535</span><br><span class=\"line\">net.core.netdev_max_backlog = 10000</span><br><span class=\"line\">vm.overcommit_memory = 2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置/etc/security/limits.conf文件，添加以下内容(三台主机)</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* soft nofile 65536</span><br><span class=\"line\">* hard nofile 65536</span><br><span class=\"line\">* soft nproc 131072</span><br><span class=\"line\">* hard nproc 131072</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置预读块的值为16384(三台主机 未设置)</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /sbin/blockdev --getra /dev/sda 查看预读块，默认大小为256</span></span><br><span class=\"line\"><span class=\"comment\"># /sbin/blockdev --setra 16384 /dev/sda  设置预读块</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置磁盘访问I/O调度策略(三台主机 未设置)</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#echo deadline &gt; /sys/block/sda/queue/scheduler</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动ssh</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key</span><br><span class=\"line\">ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key</span><br><span class=\"line\">ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key</span><br><span class=\"line\">/usr/sbin/sshd</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建greenplum的用户和用户组</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd -g 530 gpadmin</span><br><span class=\"line\">useradd -g 530 -u 530 -m -d /home/gpadmin -s /bin/bash gpadmin</span><br><span class=\"line\">chown -R gpadmin:gpadmin /home/gpadmin</span><br><span class=\"line\">passwd gpadmin</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关闭 iptables，selinux</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables stop</span><br><span class=\"line\">chkconfig iptables off</span><br><span class=\"line\"></span><br><span class=\"line\">[root@mdw selinux]<span class=\"comment\"># cat /etc/selinux/config </span></span><br><span class=\"line\"><span class=\"comment\"># This file controls the state of SELinux on the system.</span></span><br><span class=\"line\"><span class=\"comment\"># SELINUX= can take one of these three values:</span></span><br><span class=\"line\"><span class=\"comment\">#     enforcing - SELinux security policy is enforced.</span></span><br><span class=\"line\"><span class=\"comment\">#     permissive - SELinux prints warnings instead of enforcing.</span></span><br><span class=\"line\"><span class=\"comment\">#     disabled - No SELinux policy is loaded.</span></span><br><span class=\"line\">SELINUX=disabled</span><br><span class=\"line\"><span class=\"comment\"># SELINUXTYPE= can take one of these two values:</span></span><br><span class=\"line\"><span class=\"comment\">#     targeted - Targeted processes are protected,</span></span><br><span class=\"line\"><span class=\"comment\">#     mls - Multi Level Security protection.</span></span><br><span class=\"line\">SELINUXTYPE=targeted</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"下载安装包并安装\"><a href=\"#下载安装包并安装\" class=\"headerlink\" title=\"下载安装包并安装\"></a>下载安装包并安装</h2><ol>\n<li><p>官网下载 <a href=\"https://network.pivotal.io/products/pivotal-gpdb\" target=\"_blank\" rel=\"noopener\">https://network.pivotal.io/products/pivotal-gpdb</a>  (这里可能需要注册)</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># greenplum 安装包</span></span><br><span class=\"line\">greenplum-db-5.8.0-rhel7-x86_64.zip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># greenplum web管理界面</span></span><br><span class=\"line\">greenplum-cc-web-4.1.1-LINUX-x86_64.zip</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>上传服务器并安装</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip greenplum-db-4.2.2.4-build-1-CE-RHEL5-i386.zip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这里输入安装目录(我是安装在当前用户home)</span></span><br><span class=\"line\">/bin/bash greenplum-db-4.2.2.4-build-1-CE-RHEL5-i386.bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> ～/greenplum-db/greenplum_path.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建 hostlist  &nbsp; seg_hosts &nbsp; gpinitsystem_config</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat conf/hostlist</span><br><span class=\"line\">mdw</span><br><span class=\"line\">sdw1</span><br><span class=\"line\">sdw2</span><br><span class=\"line\"></span><br><span class=\"line\">cat conf/seg_hosts</span><br><span class=\"line\">sdw1</span><br><span class=\"line\">sdw2</span><br><span class=\"line\"></span><br><span class=\"line\">cat conf/gpinitsystem_config</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Segment 的名称前缀</span></span><br><span class=\"line\">SEG_PREFIX=gpseg</span><br><span class=\"line\"><span class=\"comment\"># Primary Segment 起始的端口号</span></span><br><span class=\"line\">PORT_BASE=33000</span><br><span class=\"line\"><span class=\"comment\"># 指定 Primary Segment 的数据目录</span></span><br><span class=\"line\"><span class=\"built_in\">declare</span> -a DATA_DIRECTORY=(/home/gpadmin/gpdata/gpdatap1  /home/gpadmin/gpdata/gpdatap2)</span><br><span class=\"line\"><span class=\"comment\"># Master 所在机器的 Hostname</span></span><br><span class=\"line\">MASTER_HOSTNAME=mdw</span><br><span class=\"line\"><span class=\"comment\"># 指定 Master 的数据目录</span></span><br><span class=\"line\">MASTER_DIRECTORY=/home/gpadmin/gpdata/gpmaster</span><br><span class=\"line\"><span class=\"comment\"># Master 的端口 </span></span><br><span class=\"line\">MASTER_PORT=2345</span><br><span class=\"line\"><span class=\"comment\"># 指定Bash的版本</span></span><br><span class=\"line\">TRUSTED_SHELL=/usr/bin/ssh</span><br><span class=\"line\"><span class=\"comment\"># Mirror Segment起始的端口号</span></span><br><span class=\"line\">MIRROR_PORT_BASE=43000</span><br><span class=\"line\"><span class=\"comment\"># Primary Segment 主备同步的起始端口号</span></span><br><span class=\"line\">REPLICATION_PORT_BASE=34000</span><br><span class=\"line\"><span class=\"comment\"># Mirror Segment 主备同步的起始端口号</span></span><br><span class=\"line\">MIRROR_REPLICATION_PORT_BASE=44000</span><br><span class=\"line\"><span class=\"comment\"># Mirror Segment 的数据目录</span></span><br><span class=\"line\"><span class=\"built_in\">declare</span> -a MIRROR_DATA_DIRECTORY=(/home/gpadmin/gpdata/gpdatam1 /home/gpadmin/gpdata/gpdatam2)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置环境变量，打通所有节点</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里需要输入 segment  gpadmin的密码 成功则 completed successfully</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">gpssh-exkeys -f /home/gpadmin/conf/hostlist </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 批量创建文件</span></span><br><span class=\"line\">gpssh -f /home/gpadmin/conf/hostlist</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir gpdata</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> gpdata</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir gpmaster gpdatap1 gpdatap2 gpdatam1 gpdatam2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分发安装包</p>\n<p> 可以通过软连接的方式 更新greenplum文件位置</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打包master节点上的安装包</span></span><br><span class=\"line\">tar -cf gp.tar greenplum-db/</span><br><span class=\"line\"><span class=\"comment\"># 分发</span></span><br><span class=\"line\">gpscp -f /home/gpadmin/conf/hostlist gp.4.3.tar =:/home/gpadmin/</span><br><span class=\"line\"></span><br><span class=\"line\">gpssh -f hostlist</span><br><span class=\"line\"></span><br><span class=\"line\">tar -xf gp.tar</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在每个节点上配置.bash_profile环境变量</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[gpadmin@mdw ~]$ cat .bash_profile </span><br><span class=\"line\"><span class=\"comment\"># .bash_profile</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Get the aliases and functions</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -f ~/.bashrc ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    . ~/.bashrc</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># User specific environment and startup programs</span></span><br><span class=\"line\"></span><br><span class=\"line\">PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$HOME</span>/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> /home/gpadmin/greenplum-db/greenplum_path.sh</span><br><span class=\"line\"><span class=\"built_in\">export</span> MASTER_DATA_DIRECTORY=/home/gpadmin/gpdata/gpmaster/gpseg-1</span><br><span class=\"line\"><span class=\"built_in\">export</span> PGPORT=2345</span><br><span class=\"line\"><span class=\"built_in\">export</span> PGDATABASE=testDB</span><br><span class=\"line\"></span><br><span class=\"line\">[gpadmin@mdw ~]$ <span class=\"built_in\">source</span> .bash_profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化数据库, 默认初始化完成就启动数据库了</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpinitsystem -c /home/gpadmin/conf/gpinitsystem_config -a</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"Greenplum-cc-web监控软件安装\"><a href=\"#Greenplum-cc-web监控软件安装\" class=\"headerlink\" title=\"Greenplum-cc-web监控软件安装\"></a>Greenplum-cc-web监控软件安装</h2><ol>\n<li><p>运行gpperfmon_install命令</p>\n<ul>\n<li><p>创建greenplum监控用数据库(gpperfmon)</p>\n</li>\n<li><p>创建greenplum监控用数据库角色(gpmon),后面登陆网页时使用</p>\n</li>\n<li><p>配置greenplum数据库文件(pg_hba.conf和.pgpass)</p>\n</li>\n<li><p>设置postgresql.conf文件，增加启用监控相关的参数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># postgresql.conf 添加</span></span><br><span class=\"line\">checkpoint_segments=8</span><br><span class=\"line\">gp_enable_gpperfmon=on</span><br><span class=\"line\">gpperfmon_port=8888</span><br><span class=\"line\">gp_external_enable_exec=on</span><br><span class=\"line\">gpperfmon_log_alert_level=<span class=\"string\">'warning'</span></span><br><span class=\"line\">gp_enable_query_metrics=on</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 gpperfmon</span></span><br><span class=\"line\">gpperfmon_install  --<span class=\"built_in\">enable</span>  --password  gpmon  --port 2345</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">gpstop -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看配置是否成功</span></span><br><span class=\"line\">ps -ef |grep gpmmon |grep -v grep</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>安装 GreenplumCommand Center Console (默认所有节点都会安装)</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip greenplum-cc-web-4.1.1-LINUX-x86_64.zip</span><br><span class=\"line\"></span><br><span class=\"line\">./greenplum-cc-web-4.1.1-LINUX-x86_64.bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/greenplum-cc-web/gpcc_path.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpcc start</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"扩充节点\"><a href=\"#扩充节点\" class=\"headerlink\" title=\"扩充节点\"></a>扩充节点</h2><ol>\n<li><p>按照如上配置在主机环境</p>\n</li>\n<li><p>生成expand 配置文件</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat expand</span><br><span class=\"line\"></span><br><span class=\"line\">sdw2:sdw2:33002:/data/gpdata/gpdatap1:6:2:p:34002</span><br><span class=\"line\">sdw2:sdw2:33003:/data/gpdata/gpdatam1:7:2:m:34003</span><br><span class=\"line\"></span><br><span class=\"line\">内容包括几个字段</span><br><span class=\"line\">hostname     主机名</span><br><span class=\"line\">address        类似主机名</span><br><span class=\"line\">port              segment监听端口</span><br><span class=\"line\">fselocation   segment data目录,注意是全路径</span><br><span class=\"line\">dbid              gp集群的唯一ID，可以到gp_segment_configuration中获得，必须顺序累加</span><br><span class=\"line\">content                 可以到gp_segment_configuration中获得，必须顺序累加</span><br><span class=\"line\">prefered_role        角色(p或m)(primary , mirror)</span><br><span class=\"line\">replication_port     如果没有mirror则不需要(用于replication的端口)。</span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看现有节点情况</span></span><br><span class=\"line\">select * from gp_segment_configuration ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看节点数据目录</span></span><br><span class=\"line\">select * from pg_filespace_entry ;</span><br></pre></td></tr></table></figure>\n\n<p> 配置文件可以根据以上两个表进行修改， 也可以</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat host</span></span><br><span class=\"line\">sdw2</span><br><span class=\"line\"></span><br><span class=\"line\">gpexpand -f ./host</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行 <code>gpexpand -i expand</code></p>\n</li>\n<li><p>数据重分布  <code>gpexpand  -d 6:00:00</code> (后面跟需要的时间)</p>\n</li>\n<li><p>看着日志，错了就回滚  </p>\n</li>\n</ol>\n<p>参考连接 :</p>\n<p><a href=\"https://yq.aliyun.com/articles/177\" target=\"_blank\" rel=\"noopener\">https://yq.aliyun.com/articles/177</a></p>\n<p><a href=\"https://discuss.pivotal.io/hc/en-us/articles/201202707-How-to-Use-gpexpand-Working-with-One-Host\" target=\"_blank\" rel=\"noopener\">https://discuss.pivotal.io/hc/en-us/articles/201202707-How-to-Use-gpexpand-Working-with-One-Host</a></p>\n<h2 id=\"BUG-记录\"><a href=\"#BUG-记录\" class=\"headerlink\" title=\"BUG 记录\"></a>BUG 记录</h2><ol>\n<li><p>Failed to complete obtain psql count Master gp_segment_configuration Script Exiti</p>\n<ul>\n<li><p>问题： 在初始化过程中，如到以下问题：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpadmin-[FATAL]:-Failed to complete obtain psql count Master gp_segment_configuration  Script Exiting!</span><br><span class=\"line\">Script has left Greenplum Database <span class=\"keyword\">in</span> an incomplete state</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解决方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"RemoveIPC=no\"</span> &gt;&gt; /etc/systemd/logind.conf</span><br><span class=\"line\">/bin/systemctl restart systemd-logind.service</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>gpstart error: Do not have enough valid segments to start the array</p>\n<ul>\n<li><p>问题： gpinit 成功了在 gpstart的时候出错</p>\n</li>\n<li><p>解决： 彻底关闭防火墙并检查是否配置开机自启</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><p><a href=\"https://gpdb.docs.pivotal.io/580/main/index.html\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<p><a href=\"https://gp-docs-cn.github.io/docs/common/gpdb-features.html\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n<p><a href=\"http://gpcc.docs.pivotal.io/410/welcome.html\" target=\"_blank\" rel=\"noopener\">cc-web 官方文档</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h2><p>Greenplum是一个MPP（海量并行处理）计算框架的分布式数据库，其数据库引擎层是基于著名的Postgresql数据库，企业级数据库产品，现已开源。Greenplum拥有丰富的特性，包括：</p>\n<ol>\n<li>完全支持ANSI SQL 2008标准和SQL OLAP 2003 扩展，支持ODBC和JDBC</li>\n<li>支持分布式事务，支持ACID</li>\n<li>支持行存储、列存储，以及可通过外部表的方式访问其它关系型数据库或者Hadoop</li>\n<li>拥有良好的线性扩展能力，支持上千个节点</li>\n</ol>\n<h2 id=\"环境介绍\"><a href=\"#环境介绍\" class=\"headerlink\" title=\"环境介绍\"></a>环境介绍</h2><table>\n<thead>\n<tr>\n<th align=\"center\">主机</th>\n<th align=\"center\">IP</th>\n<th align=\"center\">内存(G)</th>\n<th align=\"center\">系统</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">mdw</td>\n<td align=\"center\">172.16.16.134</td>\n<td align=\"center\">16</td>\n<td align=\"center\">CentOS Linux release 7.4.1708</td>\n</tr>\n<tr>\n<td align=\"center\">sdw1</td>\n<td align=\"center\">172.16.16.135</td>\n<td align=\"center\">16</td>\n<td align=\"center\">CentOS Linux release 7.4.1708</td>\n</tr>\n<tr>\n<td align=\"center\">sdw1</td>\n<td align=\"center\">172.16.16.138</td>\n<td align=\"center\">16</td>\n<td align=\"center\">CentOS Linux release 7.4.1708</td>\n</tr>\n</tbody></table>\n<h2 id=\"系统参数调整\"><a href=\"#系统参数调整\" class=\"headerlink\" title=\"系统参数调整\"></a>系统参数调整</h2><ol>\n<li><p>修改hosts文件(三台主机)</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">172.16.16.134 mdw</span><br><span class=\"line\">172.16.16.135 sdw1</span><br><span class=\"line\">172.16.16.138 sdw2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改或添加/etc/sysctl.conf(三台主机)</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xfs_mount_options = rw,noatime,inode64,allocsize=16m</span><br><span class=\"line\">kernel.shmmax = 500000000</span><br><span class=\"line\">kernel.shmmni = 4096</span><br><span class=\"line\">kernel.shmall = 4000000000</span><br><span class=\"line\">kernel.sem = 250 512000 100 2048</span><br><span class=\"line\">kernel.sysrq = 1</span><br><span class=\"line\">kernel.core_uses_pid = 1</span><br><span class=\"line\">kernel.msgmnb = 65536</span><br><span class=\"line\">kernel.msgmax = 65536</span><br><span class=\"line\">kernel.msgmni = 2048</span><br><span class=\"line\">net.ipv4.tcp_syncookies = 1</span><br><span class=\"line\">net.ipv4.ip_forward = 0</span><br><span class=\"line\">net.ipv4.conf.default.accept_source_route = 0</span><br><span class=\"line\">net.ipv4.tcp_tw_recycle = 1</span><br><span class=\"line\">net.ipv4.tcp_max_syn_backlog = 4096</span><br><span class=\"line\">net.ipv4.conf.all.arp_filter = 1</span><br><span class=\"line\">net.ipv4.ip_local_port_range = 1025 65535</span><br><span class=\"line\">net.core.netdev_max_backlog = 10000</span><br><span class=\"line\">vm.overcommit_memory = 2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置/etc/security/limits.conf文件，添加以下内容(三台主机)</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* soft nofile 65536</span><br><span class=\"line\">* hard nofile 65536</span><br><span class=\"line\">* soft nproc 131072</span><br><span class=\"line\">* hard nproc 131072</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置预读块的值为16384(三台主机 未设置)</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /sbin/blockdev --getra /dev/sda 查看预读块，默认大小为256</span></span><br><span class=\"line\"><span class=\"comment\"># /sbin/blockdev --setra 16384 /dev/sda  设置预读块</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置磁盘访问I/O调度策略(三台主机 未设置)</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#echo deadline &gt; /sys/block/sda/queue/scheduler</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动ssh</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key</span><br><span class=\"line\">ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key</span><br><span class=\"line\">ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key</span><br><span class=\"line\">/usr/sbin/sshd</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建greenplum的用户和用户组</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd -g 530 gpadmin</span><br><span class=\"line\">useradd -g 530 -u 530 -m -d /home/gpadmin -s /bin/bash gpadmin</span><br><span class=\"line\">chown -R gpadmin:gpadmin /home/gpadmin</span><br><span class=\"line\">passwd gpadmin</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关闭 iptables，selinux</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables stop</span><br><span class=\"line\">chkconfig iptables off</span><br><span class=\"line\"></span><br><span class=\"line\">[root@mdw selinux]<span class=\"comment\"># cat /etc/selinux/config </span></span><br><span class=\"line\"><span class=\"comment\"># This file controls the state of SELinux on the system.</span></span><br><span class=\"line\"><span class=\"comment\"># SELINUX= can take one of these three values:</span></span><br><span class=\"line\"><span class=\"comment\">#     enforcing - SELinux security policy is enforced.</span></span><br><span class=\"line\"><span class=\"comment\">#     permissive - SELinux prints warnings instead of enforcing.</span></span><br><span class=\"line\"><span class=\"comment\">#     disabled - No SELinux policy is loaded.</span></span><br><span class=\"line\">SELINUX=disabled</span><br><span class=\"line\"><span class=\"comment\"># SELINUXTYPE= can take one of these two values:</span></span><br><span class=\"line\"><span class=\"comment\">#     targeted - Targeted processes are protected,</span></span><br><span class=\"line\"><span class=\"comment\">#     mls - Multi Level Security protection.</span></span><br><span class=\"line\">SELINUXTYPE=targeted</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"下载安装包并安装\"><a href=\"#下载安装包并安装\" class=\"headerlink\" title=\"下载安装包并安装\"></a>下载安装包并安装</h2><ol>\n<li><p>官网下载 <a href=\"https://network.pivotal.io/products/pivotal-gpdb\" target=\"_blank\" rel=\"noopener\">https://network.pivotal.io/products/pivotal-gpdb</a>  (这里可能需要注册)</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># greenplum 安装包</span></span><br><span class=\"line\">greenplum-db-5.8.0-rhel7-x86_64.zip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># greenplum web管理界面</span></span><br><span class=\"line\">greenplum-cc-web-4.1.1-LINUX-x86_64.zip</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>上传服务器并安装</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip greenplum-db-4.2.2.4-build-1-CE-RHEL5-i386.zip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这里输入安装目录(我是安装在当前用户home)</span></span><br><span class=\"line\">/bin/bash greenplum-db-4.2.2.4-build-1-CE-RHEL5-i386.bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> ～/greenplum-db/greenplum_path.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建 hostlist  &nbsp; seg_hosts &nbsp; gpinitsystem_config</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat conf/hostlist</span><br><span class=\"line\">mdw</span><br><span class=\"line\">sdw1</span><br><span class=\"line\">sdw2</span><br><span class=\"line\"></span><br><span class=\"line\">cat conf/seg_hosts</span><br><span class=\"line\">sdw1</span><br><span class=\"line\">sdw2</span><br><span class=\"line\"></span><br><span class=\"line\">cat conf/gpinitsystem_config</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Segment 的名称前缀</span></span><br><span class=\"line\">SEG_PREFIX=gpseg</span><br><span class=\"line\"><span class=\"comment\"># Primary Segment 起始的端口号</span></span><br><span class=\"line\">PORT_BASE=33000</span><br><span class=\"line\"><span class=\"comment\"># 指定 Primary Segment 的数据目录</span></span><br><span class=\"line\"><span class=\"built_in\">declare</span> -a DATA_DIRECTORY=(/home/gpadmin/gpdata/gpdatap1  /home/gpadmin/gpdata/gpdatap2)</span><br><span class=\"line\"><span class=\"comment\"># Master 所在机器的 Hostname</span></span><br><span class=\"line\">MASTER_HOSTNAME=mdw</span><br><span class=\"line\"><span class=\"comment\"># 指定 Master 的数据目录</span></span><br><span class=\"line\">MASTER_DIRECTORY=/home/gpadmin/gpdata/gpmaster</span><br><span class=\"line\"><span class=\"comment\"># Master 的端口 </span></span><br><span class=\"line\">MASTER_PORT=2345</span><br><span class=\"line\"><span class=\"comment\"># 指定Bash的版本</span></span><br><span class=\"line\">TRUSTED_SHELL=/usr/bin/ssh</span><br><span class=\"line\"><span class=\"comment\"># Mirror Segment起始的端口号</span></span><br><span class=\"line\">MIRROR_PORT_BASE=43000</span><br><span class=\"line\"><span class=\"comment\"># Primary Segment 主备同步的起始端口号</span></span><br><span class=\"line\">REPLICATION_PORT_BASE=34000</span><br><span class=\"line\"><span class=\"comment\"># Mirror Segment 主备同步的起始端口号</span></span><br><span class=\"line\">MIRROR_REPLICATION_PORT_BASE=44000</span><br><span class=\"line\"><span class=\"comment\"># Mirror Segment 的数据目录</span></span><br><span class=\"line\"><span class=\"built_in\">declare</span> -a MIRROR_DATA_DIRECTORY=(/home/gpadmin/gpdata/gpdatam1 /home/gpadmin/gpdata/gpdatam2)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置环境变量，打通所有节点</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里需要输入 segment  gpadmin的密码 成功则 completed successfully</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">gpssh-exkeys -f /home/gpadmin/conf/hostlist </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 批量创建文件</span></span><br><span class=\"line\">gpssh -f /home/gpadmin/conf/hostlist</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir gpdata</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> gpdata</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir gpmaster gpdatap1 gpdatap2 gpdatam1 gpdatam2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分发安装包</p>\n<p> 可以通过软连接的方式 更新greenplum文件位置</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打包master节点上的安装包</span></span><br><span class=\"line\">tar -cf gp.tar greenplum-db/</span><br><span class=\"line\"><span class=\"comment\"># 分发</span></span><br><span class=\"line\">gpscp -f /home/gpadmin/conf/hostlist gp.4.3.tar =:/home/gpadmin/</span><br><span class=\"line\"></span><br><span class=\"line\">gpssh -f hostlist</span><br><span class=\"line\"></span><br><span class=\"line\">tar -xf gp.tar</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在每个节点上配置.bash_profile环境变量</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[gpadmin@mdw ~]$ cat .bash_profile </span><br><span class=\"line\"><span class=\"comment\"># .bash_profile</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Get the aliases and functions</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -f ~/.bashrc ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    . ~/.bashrc</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># User specific environment and startup programs</span></span><br><span class=\"line\"></span><br><span class=\"line\">PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$HOME</span>/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> /home/gpadmin/greenplum-db/greenplum_path.sh</span><br><span class=\"line\"><span class=\"built_in\">export</span> MASTER_DATA_DIRECTORY=/home/gpadmin/gpdata/gpmaster/gpseg-1</span><br><span class=\"line\"><span class=\"built_in\">export</span> PGPORT=2345</span><br><span class=\"line\"><span class=\"built_in\">export</span> PGDATABASE=testDB</span><br><span class=\"line\"></span><br><span class=\"line\">[gpadmin@mdw ~]$ <span class=\"built_in\">source</span> .bash_profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化数据库, 默认初始化完成就启动数据库了</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpinitsystem -c /home/gpadmin/conf/gpinitsystem_config -a</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"Greenplum-cc-web监控软件安装\"><a href=\"#Greenplum-cc-web监控软件安装\" class=\"headerlink\" title=\"Greenplum-cc-web监控软件安装\"></a>Greenplum-cc-web监控软件安装</h2><ol>\n<li><p>运行gpperfmon_install命令</p>\n<ul>\n<li><p>创建greenplum监控用数据库(gpperfmon)</p>\n</li>\n<li><p>创建greenplum监控用数据库角色(gpmon),后面登陆网页时使用</p>\n</li>\n<li><p>配置greenplum数据库文件(pg_hba.conf和.pgpass)</p>\n</li>\n<li><p>设置postgresql.conf文件，增加启用监控相关的参数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># postgresql.conf 添加</span></span><br><span class=\"line\">checkpoint_segments=8</span><br><span class=\"line\">gp_enable_gpperfmon=on</span><br><span class=\"line\">gpperfmon_port=8888</span><br><span class=\"line\">gp_external_enable_exec=on</span><br><span class=\"line\">gpperfmon_log_alert_level=<span class=\"string\">'warning'</span></span><br><span class=\"line\">gp_enable_query_metrics=on</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 gpperfmon</span></span><br><span class=\"line\">gpperfmon_install  --<span class=\"built_in\">enable</span>  --password  gpmon  --port 2345</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">gpstop -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看配置是否成功</span></span><br><span class=\"line\">ps -ef |grep gpmmon |grep -v grep</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>安装 GreenplumCommand Center Console (默认所有节点都会安装)</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip greenplum-cc-web-4.1.1-LINUX-x86_64.zip</span><br><span class=\"line\"></span><br><span class=\"line\">./greenplum-cc-web-4.1.1-LINUX-x86_64.bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/greenplum-cc-web/gpcc_path.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpcc start</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"扩充节点\"><a href=\"#扩充节点\" class=\"headerlink\" title=\"扩充节点\"></a>扩充节点</h2><ol>\n<li><p>按照如上配置在主机环境</p>\n</li>\n<li><p>生成expand 配置文件</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat expand</span><br><span class=\"line\"></span><br><span class=\"line\">sdw2:sdw2:33002:/data/gpdata/gpdatap1:6:2:p:34002</span><br><span class=\"line\">sdw2:sdw2:33003:/data/gpdata/gpdatam1:7:2:m:34003</span><br><span class=\"line\"></span><br><span class=\"line\">内容包括几个字段</span><br><span class=\"line\">hostname     主机名</span><br><span class=\"line\">address        类似主机名</span><br><span class=\"line\">port              segment监听端口</span><br><span class=\"line\">fselocation   segment data目录,注意是全路径</span><br><span class=\"line\">dbid              gp集群的唯一ID，可以到gp_segment_configuration中获得，必须顺序累加</span><br><span class=\"line\">content                 可以到gp_segment_configuration中获得，必须顺序累加</span><br><span class=\"line\">prefered_role        角色(p或m)(primary , mirror)</span><br><span class=\"line\">replication_port     如果没有mirror则不需要(用于replication的端口)。</span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看现有节点情况</span></span><br><span class=\"line\">select * from gp_segment_configuration ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看节点数据目录</span></span><br><span class=\"line\">select * from pg_filespace_entry ;</span><br></pre></td></tr></table></figure>\n\n<p> 配置文件可以根据以上两个表进行修改， 也可以</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat host</span></span><br><span class=\"line\">sdw2</span><br><span class=\"line\"></span><br><span class=\"line\">gpexpand -f ./host</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行 <code>gpexpand -i expand</code></p>\n</li>\n<li><p>数据重分布  <code>gpexpand  -d 6:00:00</code> (后面跟需要的时间)</p>\n</li>\n<li><p>看着日志，错了就回滚  </p>\n</li>\n</ol>\n<p>参考连接 :</p>\n<p><a href=\"https://yq.aliyun.com/articles/177\" target=\"_blank\" rel=\"noopener\">https://yq.aliyun.com/articles/177</a></p>\n<p><a href=\"https://discuss.pivotal.io/hc/en-us/articles/201202707-How-to-Use-gpexpand-Working-with-One-Host\" target=\"_blank\" rel=\"noopener\">https://discuss.pivotal.io/hc/en-us/articles/201202707-How-to-Use-gpexpand-Working-with-One-Host</a></p>\n<h2 id=\"BUG-记录\"><a href=\"#BUG-记录\" class=\"headerlink\" title=\"BUG 记录\"></a>BUG 记录</h2><ol>\n<li><p>Failed to complete obtain psql count Master gp_segment_configuration Script Exiti</p>\n<ul>\n<li><p>问题： 在初始化过程中，如到以下问题：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpadmin-[FATAL]:-Failed to complete obtain psql count Master gp_segment_configuration  Script Exiting!</span><br><span class=\"line\">Script has left Greenplum Database <span class=\"keyword\">in</span> an incomplete state</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解决方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"RemoveIPC=no\"</span> &gt;&gt; /etc/systemd/logind.conf</span><br><span class=\"line\">/bin/systemctl restart systemd-logind.service</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>gpstart error: Do not have enough valid segments to start the array</p>\n<ul>\n<li><p>问题： gpinit 成功了在 gpstart的时候出错</p>\n</li>\n<li><p>解决： 彻底关闭防火墙并检查是否配置开机自启</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><p><a href=\"https://gpdb.docs.pivotal.io/580/main/index.html\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<p><a href=\"https://gp-docs-cn.github.io/docs/common/gpdb-features.html\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n<p><a href=\"http://gpcc.docs.pivotal.io/410/welcome.html\" target=\"_blank\" rel=\"noopener\">cc-web 官方文档</a></p>\n"},{"title":"faceswap","date":"2019-06-01T16:11:34.000Z","_content":"\n## 简介\n\nFaceswap是一种利用深度学习手段来交换图片和视频中的面孔的工具。\n\n[github 地址](https://github.com/deepfakes/faceswap)\n\n[github 教程](https://github.com/deepfakes/faceswap/blob/master/USAGE.md)\n\n## 环境准备\n\n1. cuda 环境 (详情见另一博客 -> [cuda/cudnn 安装](https://shuai93.github.io/2019/05/28/cuda/))\n\n2. tensorflow-gpu 准备\n\n    [linux tensorflwo版本对应](https://tensorflow.google.cn/install/source)\n\n    ```bash\n    pip install tensorflow_gpu==1.12.0\n    ```\n\n## 基本步骤详解\n\n1. 准备工作 提取图片、视频中人脸信息\n\n    这里要注意的是可能提取到其他的环境图片需要手动删除部分数据\n\n    ```bash\n    # 提取视频中的人脸数据\n    python faceswap.py extract -i ./faces/demo_2_2018_smw_drsp.mp4  -o ./faces/demo\n\n    python faceswap.py extract -i ./faces/cutout.mp4 -o ./faces/lhy\n\n    ```\n\n2. 训练模型\n\n    训练数据只需要上一步提取到的人脸数据\n\n    一般用cpu训练需要数周, gpu训练需要 12-48 小时, 当loss下降到0.015一下才能有所效果\n\n    ```bash\n    python faceswap.py train -A ./faces/demo/ -B ./faces/ll/ -m ./demo_ll_model\n\n    ```\n\n3. 使用模型生成换脸图\n\n    ffmpeg 分解视频成图片数据然后使用模型替换图片中人脸数据\n\n    ```bash\n    # 使用训练数据替换\n    python faceswap.py convert -i ./faces/demo -o ./faces/converted/ -m ./demo_ll_model\n\n    # 使用原始视频数据替换 （先用ffmpeg将视频分解为每一帧图片数据）\n    ffmpeg -i ./faces/demo_2_2018_smw_drsp.mp4 ./faces/demo_output/video-frame-%d.png\n\n    python faceswap.py convert -i ./faces/demo_output/ -o ./faces/demo_converted/ -m ./demo_ll_model\n\n    ```\n\n4. 分解视频音频并将合成后的视频与音频合并\n\n    ```bash\n    # 分解视频 音频\n    ffmpeg -i demo_2_2018_smw_drsp.mp4 -vn -y -acodec copy 3.aac\n\n    # 换脸后的图片合成视频\n    ffmpeg -i ./faces/demo_converted/video-frame-%0d.png -c:v libx264 -vf \"fps=25,format=yuv420p\" lz_demo.mp4\n\n    # 合成音频与视频\n    ffmpeg -i 1.mp4 -i 1.aac -c:v copy -c:a aac -strict experimental 1_yzx.mp4\n    ```\n\n5. 使用 tensorboard 查看网络结构以及训练过程\n\n    这里能够看到整个faceswap的网络结构以及训练的收敛速度\n\n    ```bash\n    # 打开log文件\n    tensorboard --logdir ./demo_ll_model/\n\n    TensorBoard 1.12.2 at http://yixue-pc:6006 (Press CTRL+C to quit)\n\n    # 浏览器打开就可以观看了 这里只能看到序列\n\n    ```\n\n## 其他工具简介\n\n### you-get 视频下载工具\n\n1. 安装\n\n    ```bash\n    brew install you-get\n\n    brew install youtube-dl\n\n    ```\n\n2. 使用详解\n\n    ```bash\n    # 查看视频的信息以及可选格式\n    youtube-dl -F https://v.youku.com/v_show/id_XMzg0NjMzMjg2OA\\=\\=.html\\?spm\\=a2h0k.11417342.soresults.dtitle\n\n    # 下载 -F返回的具体格式视频\n    youtube-dl -f 3  https://v.youku.com/v_show/id_XMzg0NjMzMjg2OA\\=\\=.html\\?spm\\=a2h0k.11417342.soresults.dtitle\n\n    ```\n\n### ffmpeg 视频处理工具\n\n1. 安装\n\n    ```bash\n    # mac 安装\n    brew install ffmpeg\n    ```\n\n2. 基本使用\n\n    ```bash\n\n    # 提取视频的一部分\n    ffmpeg  -i ./Downloads/5cdbcf72e6de1.mp4 -vcodec copy -acodec copy -ss 00:08:10 -to 00:13:00 ./Downloads/cutout.mp4 -y\n\n    # 将视频 MP4 转化为 GIF\n    ffmpeg -i small.mp4 small.gif\n\n    # 转化视频中的一部分为 GIF\n    ffmpeg -t 3 -ss 00:00:02 -i small.webm small-clip.gif\n\n    # 转化高质量 GIF\n    默认转化是中等质量模式，若要转化出高质量的 gif，可以修改比特率\n\n    # 加倍速播放视频\n    ffmpeg -i input.mov -filter:v \"setpts=0.5*PTS\" output.mov\n\n    # 定义帧率 16fps:\n    ffmpeg -i input.mov -r 16 -filter:v \"setpts=0.125*PTS\" -an output.mov\n\n    # 慢倍速播放视频\n    ffmpeg -i input.mov -filter:v \"setpts=2.0*PTS\" output.mov\n\n    # 静音视频（移除视频中的音频） -an 就是禁止音频输出\n    ffmpeg -i input.mov -an mute-output.mov\n\n\n    # 将 GIF 转化为 MP4\n    ffmpeg -f gif -i animation.gif animation.mp4\n\n    #也可以将 gif 转为其他视频格式\n    ffmpeg -f gif -i animation.gif animation.mpeg\n\n    ffmpeg -f gif -i animation.gif animation.webm\n\n    #获取 GIF 的第一帧图片\n    #使用 ImageMagick 可以方便第提取 gif 图片的第 N 帧图像。\n\n    #安装 ImageMagick\n\n    brew install imagemagick\n    #提取第一帧\n\n    convert 'animation.gif[0]' animation-first-frame.gif\n\n    ```\n","source":"_posts/20190602-faceswap.md","raw":"---\ntitle: faceswap\ndate: 2019-06-02 00:11:34\ntags: 换脸\ncategories: 机器学习\n---\n\n## 简介\n\nFaceswap是一种利用深度学习手段来交换图片和视频中的面孔的工具。\n\n[github 地址](https://github.com/deepfakes/faceswap)\n\n[github 教程](https://github.com/deepfakes/faceswap/blob/master/USAGE.md)\n\n## 环境准备\n\n1. cuda 环境 (详情见另一博客 -> [cuda/cudnn 安装](https://shuai93.github.io/2019/05/28/cuda/))\n\n2. tensorflow-gpu 准备\n\n    [linux tensorflwo版本对应](https://tensorflow.google.cn/install/source)\n\n    ```bash\n    pip install tensorflow_gpu==1.12.0\n    ```\n\n## 基本步骤详解\n\n1. 准备工作 提取图片、视频中人脸信息\n\n    这里要注意的是可能提取到其他的环境图片需要手动删除部分数据\n\n    ```bash\n    # 提取视频中的人脸数据\n    python faceswap.py extract -i ./faces/demo_2_2018_smw_drsp.mp4  -o ./faces/demo\n\n    python faceswap.py extract -i ./faces/cutout.mp4 -o ./faces/lhy\n\n    ```\n\n2. 训练模型\n\n    训练数据只需要上一步提取到的人脸数据\n\n    一般用cpu训练需要数周, gpu训练需要 12-48 小时, 当loss下降到0.015一下才能有所效果\n\n    ```bash\n    python faceswap.py train -A ./faces/demo/ -B ./faces/ll/ -m ./demo_ll_model\n\n    ```\n\n3. 使用模型生成换脸图\n\n    ffmpeg 分解视频成图片数据然后使用模型替换图片中人脸数据\n\n    ```bash\n    # 使用训练数据替换\n    python faceswap.py convert -i ./faces/demo -o ./faces/converted/ -m ./demo_ll_model\n\n    # 使用原始视频数据替换 （先用ffmpeg将视频分解为每一帧图片数据）\n    ffmpeg -i ./faces/demo_2_2018_smw_drsp.mp4 ./faces/demo_output/video-frame-%d.png\n\n    python faceswap.py convert -i ./faces/demo_output/ -o ./faces/demo_converted/ -m ./demo_ll_model\n\n    ```\n\n4. 分解视频音频并将合成后的视频与音频合并\n\n    ```bash\n    # 分解视频 音频\n    ffmpeg -i demo_2_2018_smw_drsp.mp4 -vn -y -acodec copy 3.aac\n\n    # 换脸后的图片合成视频\n    ffmpeg -i ./faces/demo_converted/video-frame-%0d.png -c:v libx264 -vf \"fps=25,format=yuv420p\" lz_demo.mp4\n\n    # 合成音频与视频\n    ffmpeg -i 1.mp4 -i 1.aac -c:v copy -c:a aac -strict experimental 1_yzx.mp4\n    ```\n\n5. 使用 tensorboard 查看网络结构以及训练过程\n\n    这里能够看到整个faceswap的网络结构以及训练的收敛速度\n\n    ```bash\n    # 打开log文件\n    tensorboard --logdir ./demo_ll_model/\n\n    TensorBoard 1.12.2 at http://yixue-pc:6006 (Press CTRL+C to quit)\n\n    # 浏览器打开就可以观看了 这里只能看到序列\n\n    ```\n\n## 其他工具简介\n\n### you-get 视频下载工具\n\n1. 安装\n\n    ```bash\n    brew install you-get\n\n    brew install youtube-dl\n\n    ```\n\n2. 使用详解\n\n    ```bash\n    # 查看视频的信息以及可选格式\n    youtube-dl -F https://v.youku.com/v_show/id_XMzg0NjMzMjg2OA\\=\\=.html\\?spm\\=a2h0k.11417342.soresults.dtitle\n\n    # 下载 -F返回的具体格式视频\n    youtube-dl -f 3  https://v.youku.com/v_show/id_XMzg0NjMzMjg2OA\\=\\=.html\\?spm\\=a2h0k.11417342.soresults.dtitle\n\n    ```\n\n### ffmpeg 视频处理工具\n\n1. 安装\n\n    ```bash\n    # mac 安装\n    brew install ffmpeg\n    ```\n\n2. 基本使用\n\n    ```bash\n\n    # 提取视频的一部分\n    ffmpeg  -i ./Downloads/5cdbcf72e6de1.mp4 -vcodec copy -acodec copy -ss 00:08:10 -to 00:13:00 ./Downloads/cutout.mp4 -y\n\n    # 将视频 MP4 转化为 GIF\n    ffmpeg -i small.mp4 small.gif\n\n    # 转化视频中的一部分为 GIF\n    ffmpeg -t 3 -ss 00:00:02 -i small.webm small-clip.gif\n\n    # 转化高质量 GIF\n    默认转化是中等质量模式，若要转化出高质量的 gif，可以修改比特率\n\n    # 加倍速播放视频\n    ffmpeg -i input.mov -filter:v \"setpts=0.5*PTS\" output.mov\n\n    # 定义帧率 16fps:\n    ffmpeg -i input.mov -r 16 -filter:v \"setpts=0.125*PTS\" -an output.mov\n\n    # 慢倍速播放视频\n    ffmpeg -i input.mov -filter:v \"setpts=2.0*PTS\" output.mov\n\n    # 静音视频（移除视频中的音频） -an 就是禁止音频输出\n    ffmpeg -i input.mov -an mute-output.mov\n\n\n    # 将 GIF 转化为 MP4\n    ffmpeg -f gif -i animation.gif animation.mp4\n\n    #也可以将 gif 转为其他视频格式\n    ffmpeg -f gif -i animation.gif animation.mpeg\n\n    ffmpeg -f gif -i animation.gif animation.webm\n\n    #获取 GIF 的第一帧图片\n    #使用 ImageMagick 可以方便第提取 gif 图片的第 N 帧图像。\n\n    #安装 ImageMagick\n\n    brew install imagemagick\n    #提取第一帧\n\n    convert 'animation.gif[0]' animation-first-frame.gif\n\n    ```\n","slug":"faceswap","published":1,"updated":"2020-10-27T08:35:04.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrr9wvm000ageql7hxcbxhg","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Faceswap是一种利用深度学习手段来交换图片和视频中的面孔的工具。</p>\n<p><a href=\"https://github.com/deepfakes/faceswap\" target=\"_blank\" rel=\"noopener\">github 地址</a></p>\n<p><a href=\"https://github.com/deepfakes/faceswap/blob/master/USAGE.md\" target=\"_blank\" rel=\"noopener\">github 教程</a></p>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><ol>\n<li><p>cuda 环境 (详情见另一博客 -&gt; <a href=\"https://shuai93.github.io/2019/05/28/cuda/\">cuda/cudnn 安装</a>)</p>\n</li>\n<li><p>tensorflow-gpu 准备</p>\n<p> <a href=\"https://tensorflow.google.cn/install/source\" target=\"_blank\" rel=\"noopener\">linux tensorflwo版本对应</a></p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install tensorflow_gpu==1.12.0</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"基本步骤详解\"><a href=\"#基本步骤详解\" class=\"headerlink\" title=\"基本步骤详解\"></a>基本步骤详解</h2><ol>\n<li><p>准备工作 提取图片、视频中人脸信息</p>\n<p> 这里要注意的是可能提取到其他的环境图片需要手动删除部分数据</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提取视频中的人脸数据</span></span><br><span class=\"line\">python faceswap.py extract -i ./faces/demo_2_2018_smw_drsp.mp4  -o ./faces/demo</span><br><span class=\"line\"></span><br><span class=\"line\">python faceswap.py extract -i ./faces/cutout.mp4 -o ./faces/lhy</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>训练模型</p>\n<p> 训练数据只需要上一步提取到的人脸数据</p>\n<p> 一般用cpu训练需要数周, gpu训练需要 12-48 小时, 当loss下降到0.015一下才能有所效果</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python faceswap.py train -A ./faces/demo/ -B ./faces/ll/ -m ./demo_ll_model</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用模型生成换脸图</p>\n<p> ffmpeg 分解视频成图片数据然后使用模型替换图片中人脸数据</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用训练数据替换</span></span><br><span class=\"line\">python faceswap.py convert -i ./faces/demo -o ./faces/converted/ -m ./demo_ll_model</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用原始视频数据替换 （先用ffmpeg将视频分解为每一帧图片数据）</span></span><br><span class=\"line\">ffmpeg -i ./faces/demo_2_2018_smw_drsp.mp4 ./faces/demo_output/video-frame-%d.png</span><br><span class=\"line\"></span><br><span class=\"line\">python faceswap.py convert -i ./faces/demo_output/ -o ./faces/demo_converted/ -m ./demo_ll_model</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分解视频音频并将合成后的视频与音频合并</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 分解视频 音频</span></span><br><span class=\"line\">ffmpeg -i demo_2_2018_smw_drsp.mp4 -vn -y -acodec copy 3.aac</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 换脸后的图片合成视频</span></span><br><span class=\"line\">ffmpeg -i ./faces/demo_converted/video-frame-%0d.png -c:v libx264 -vf <span class=\"string\">\"fps=25,format=yuv420p\"</span> lz_demo.mp4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合成音频与视频</span></span><br><span class=\"line\">ffmpeg -i 1.mp4 -i 1.aac -c:v copy -c:a aac -strict experimental 1_yzx.mp4</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 tensorboard 查看网络结构以及训练过程</p>\n<p> 这里能够看到整个faceswap的网络结构以及训练的收敛速度</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打开log文件</span></span><br><span class=\"line\">tensorboard --logdir ./demo_ll_model/</span><br><span class=\"line\"></span><br><span class=\"line\">TensorBoard 1.12.2 at http://yixue-pc:6006 (Press CTRL+C to quit)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 浏览器打开就可以观看了 这里只能看到序列</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"其他工具简介\"><a href=\"#其他工具简介\" class=\"headerlink\" title=\"其他工具简介\"></a>其他工具简介</h2><h3 id=\"you-get-视频下载工具\"><a href=\"#you-get-视频下载工具\" class=\"headerlink\" title=\"you-get 视频下载工具\"></a>you-get 视频下载工具</h3><ol>\n<li><p>安装</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install you-get</span><br><span class=\"line\"></span><br><span class=\"line\">brew install youtube-dl</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用详解</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看视频的信息以及可选格式</span></span><br><span class=\"line\">youtube-dl -F https://v.youku.com/v_show/id_XMzg0NjMzMjg2OA\\=\\=.html\\?spm\\=a2h0k.11417342.soresults.dtitle</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载 -F返回的具体格式视频</span></span><br><span class=\"line\">youtube-dl -f 3  https://v.youku.com/v_show/id_XMzg0NjMzMjg2OA\\=\\=.html\\?spm\\=a2h0k.11417342.soresults.dtitle</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"ffmpeg-视频处理工具\"><a href=\"#ffmpeg-视频处理工具\" class=\"headerlink\" title=\"ffmpeg 视频处理工具\"></a>ffmpeg 视频处理工具</h3><ol>\n<li><p>安装</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mac 安装</span></span><br><span class=\"line\">brew install ffmpeg</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>基本使用</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取视频的一部分</span></span><br><span class=\"line\">ffmpeg  -i ./Downloads/5cdbcf72e6de1.mp4 -vcodec copy -acodec copy -ss 00:08:10 -to 00:13:00 ./Downloads/cutout.mp4 -y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将视频 MP4 转化为 GIF</span></span><br><span class=\"line\">ffmpeg -i small.mp4 small.gif</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转化视频中的一部分为 GIF</span></span><br><span class=\"line\">ffmpeg -t 3 -ss 00:00:02 -i small.webm small-clip.gif</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转化高质量 GIF</span></span><br><span class=\"line\">默认转化是中等质量模式，若要转化出高质量的 gif，可以修改比特率</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加倍速播放视频</span></span><br><span class=\"line\">ffmpeg -i input.mov -filter:v <span class=\"string\">\"setpts=0.5*PTS\"</span> output.mov</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义帧率 16fps:</span></span><br><span class=\"line\">ffmpeg -i input.mov -r 16 -filter:v <span class=\"string\">\"setpts=0.125*PTS\"</span> -an output.mov</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 慢倍速播放视频</span></span><br><span class=\"line\">ffmpeg -i input.mov -filter:v <span class=\"string\">\"setpts=2.0*PTS\"</span> output.mov</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 静音视频（移除视频中的音频） -an 就是禁止音频输出</span></span><br><span class=\"line\">ffmpeg -i input.mov -an mute-output.mov</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 GIF 转化为 MP4</span></span><br><span class=\"line\">ffmpeg -f gif -i animation.gif animation.mp4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#也可以将 gif 转为其他视频格式</span></span><br><span class=\"line\">ffmpeg -f gif -i animation.gif animation.mpeg</span><br><span class=\"line\"></span><br><span class=\"line\">ffmpeg -f gif -i animation.gif animation.webm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#获取 GIF 的第一帧图片</span></span><br><span class=\"line\"><span class=\"comment\">#使用 ImageMagick 可以方便第提取 gif 图片的第 N 帧图像。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#安装 ImageMagick</span></span><br><span class=\"line\"></span><br><span class=\"line\">brew install imagemagick</span><br><span class=\"line\"><span class=\"comment\">#提取第一帧</span></span><br><span class=\"line\"></span><br><span class=\"line\">convert <span class=\"string\">'animation.gif[0]'</span> animation-first-frame.gif</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Faceswap是一种利用深度学习手段来交换图片和视频中的面孔的工具。</p>\n<p><a href=\"https://github.com/deepfakes/faceswap\" target=\"_blank\" rel=\"noopener\">github 地址</a></p>\n<p><a href=\"https://github.com/deepfakes/faceswap/blob/master/USAGE.md\" target=\"_blank\" rel=\"noopener\">github 教程</a></p>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><ol>\n<li><p>cuda 环境 (详情见另一博客 -&gt; <a href=\"https://shuai93.github.io/2019/05/28/cuda/\">cuda/cudnn 安装</a>)</p>\n</li>\n<li><p>tensorflow-gpu 准备</p>\n<p> <a href=\"https://tensorflow.google.cn/install/source\" target=\"_blank\" rel=\"noopener\">linux tensorflwo版本对应</a></p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install tensorflow_gpu==1.12.0</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"基本步骤详解\"><a href=\"#基本步骤详解\" class=\"headerlink\" title=\"基本步骤详解\"></a>基本步骤详解</h2><ol>\n<li><p>准备工作 提取图片、视频中人脸信息</p>\n<p> 这里要注意的是可能提取到其他的环境图片需要手动删除部分数据</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提取视频中的人脸数据</span></span><br><span class=\"line\">python faceswap.py extract -i ./faces/demo_2_2018_smw_drsp.mp4  -o ./faces/demo</span><br><span class=\"line\"></span><br><span class=\"line\">python faceswap.py extract -i ./faces/cutout.mp4 -o ./faces/lhy</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>训练模型</p>\n<p> 训练数据只需要上一步提取到的人脸数据</p>\n<p> 一般用cpu训练需要数周, gpu训练需要 12-48 小时, 当loss下降到0.015一下才能有所效果</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python faceswap.py train -A ./faces/demo/ -B ./faces/ll/ -m ./demo_ll_model</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用模型生成换脸图</p>\n<p> ffmpeg 分解视频成图片数据然后使用模型替换图片中人脸数据</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用训练数据替换</span></span><br><span class=\"line\">python faceswap.py convert -i ./faces/demo -o ./faces/converted/ -m ./demo_ll_model</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用原始视频数据替换 （先用ffmpeg将视频分解为每一帧图片数据）</span></span><br><span class=\"line\">ffmpeg -i ./faces/demo_2_2018_smw_drsp.mp4 ./faces/demo_output/video-frame-%d.png</span><br><span class=\"line\"></span><br><span class=\"line\">python faceswap.py convert -i ./faces/demo_output/ -o ./faces/demo_converted/ -m ./demo_ll_model</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分解视频音频并将合成后的视频与音频合并</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 分解视频 音频</span></span><br><span class=\"line\">ffmpeg -i demo_2_2018_smw_drsp.mp4 -vn -y -acodec copy 3.aac</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 换脸后的图片合成视频</span></span><br><span class=\"line\">ffmpeg -i ./faces/demo_converted/video-frame-%0d.png -c:v libx264 -vf <span class=\"string\">\"fps=25,format=yuv420p\"</span> lz_demo.mp4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合成音频与视频</span></span><br><span class=\"line\">ffmpeg -i 1.mp4 -i 1.aac -c:v copy -c:a aac -strict experimental 1_yzx.mp4</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 tensorboard 查看网络结构以及训练过程</p>\n<p> 这里能够看到整个faceswap的网络结构以及训练的收敛速度</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打开log文件</span></span><br><span class=\"line\">tensorboard --logdir ./demo_ll_model/</span><br><span class=\"line\"></span><br><span class=\"line\">TensorBoard 1.12.2 at http://yixue-pc:6006 (Press CTRL+C to quit)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 浏览器打开就可以观看了 这里只能看到序列</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"其他工具简介\"><a href=\"#其他工具简介\" class=\"headerlink\" title=\"其他工具简介\"></a>其他工具简介</h2><h3 id=\"you-get-视频下载工具\"><a href=\"#you-get-视频下载工具\" class=\"headerlink\" title=\"you-get 视频下载工具\"></a>you-get 视频下载工具</h3><ol>\n<li><p>安装</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install you-get</span><br><span class=\"line\"></span><br><span class=\"line\">brew install youtube-dl</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用详解</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看视频的信息以及可选格式</span></span><br><span class=\"line\">youtube-dl -F https://v.youku.com/v_show/id_XMzg0NjMzMjg2OA\\=\\=.html\\?spm\\=a2h0k.11417342.soresults.dtitle</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载 -F返回的具体格式视频</span></span><br><span class=\"line\">youtube-dl -f 3  https://v.youku.com/v_show/id_XMzg0NjMzMjg2OA\\=\\=.html\\?spm\\=a2h0k.11417342.soresults.dtitle</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"ffmpeg-视频处理工具\"><a href=\"#ffmpeg-视频处理工具\" class=\"headerlink\" title=\"ffmpeg 视频处理工具\"></a>ffmpeg 视频处理工具</h3><ol>\n<li><p>安装</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mac 安装</span></span><br><span class=\"line\">brew install ffmpeg</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>基本使用</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取视频的一部分</span></span><br><span class=\"line\">ffmpeg  -i ./Downloads/5cdbcf72e6de1.mp4 -vcodec copy -acodec copy -ss 00:08:10 -to 00:13:00 ./Downloads/cutout.mp4 -y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将视频 MP4 转化为 GIF</span></span><br><span class=\"line\">ffmpeg -i small.mp4 small.gif</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转化视频中的一部分为 GIF</span></span><br><span class=\"line\">ffmpeg -t 3 -ss 00:00:02 -i small.webm small-clip.gif</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转化高质量 GIF</span></span><br><span class=\"line\">默认转化是中等质量模式，若要转化出高质量的 gif，可以修改比特率</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加倍速播放视频</span></span><br><span class=\"line\">ffmpeg -i input.mov -filter:v <span class=\"string\">\"setpts=0.5*PTS\"</span> output.mov</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义帧率 16fps:</span></span><br><span class=\"line\">ffmpeg -i input.mov -r 16 -filter:v <span class=\"string\">\"setpts=0.125*PTS\"</span> -an output.mov</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 慢倍速播放视频</span></span><br><span class=\"line\">ffmpeg -i input.mov -filter:v <span class=\"string\">\"setpts=2.0*PTS\"</span> output.mov</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 静音视频（移除视频中的音频） -an 就是禁止音频输出</span></span><br><span class=\"line\">ffmpeg -i input.mov -an mute-output.mov</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 GIF 转化为 MP4</span></span><br><span class=\"line\">ffmpeg -f gif -i animation.gif animation.mp4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#也可以将 gif 转为其他视频格式</span></span><br><span class=\"line\">ffmpeg -f gif -i animation.gif animation.mpeg</span><br><span class=\"line\"></span><br><span class=\"line\">ffmpeg -f gif -i animation.gif animation.webm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#获取 GIF 的第一帧图片</span></span><br><span class=\"line\"><span class=\"comment\">#使用 ImageMagick 可以方便第提取 gif 图片的第 N 帧图像。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#安装 ImageMagick</span></span><br><span class=\"line\"></span><br><span class=\"line\">brew install imagemagick</span><br><span class=\"line\"><span class=\"comment\">#提取第一帧</span></span><br><span class=\"line\"></span><br><span class=\"line\">convert <span class=\"string\">'animation.gif[0]'</span> animation-first-frame.gif</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"py_setup","date":"2019-06-03T05:38:21.000Z","_content":"\n## setup 简介\n\nPython setup 是打包分发工具可以将自己的项目打包成packeage然后供他人使用\n\n可以setup中标明项目的依赖以及安装条件似的当前模块能够正确安装并使用\n\n## setup 实战\n\n### 一些参数介绍\n\n1. packages\n告诉Distutils需要处理那些包（包含__init__.py的文件夹）\n\n2. package_dir\n告诉Distutils哪些目录下的文件被映射到哪个源码包，感觉好像是一个相对路径的定义。一个例子：package_dir = {'': 'lib'}，表示以lib为主目录。\n\n3. ext_modules\n是一个包含Extension实例的列表，Extension的定义也有一些参数。\n\n4. ext_package\n定义extension的相对路径\n\n5. requires\n定义依赖哪些模块\n\n6. provides\n定义可以为哪些模块提供依赖\n\n7. scripts\n指定python源码文件，可以从命令行执行。在安装时指定--install-script\n8. package_data\n通常包含与包实现相关的一些数据文件或类似于readme的文件。\n\n### 注意事项\n\n* 需要注意的是 package_data 时候需要在代码中使用\n\n```python\n# 简单的说就是 使用项目所在目录完成配置文件的读取\nos.path.join(os.path.abspath(os.path.join(os.path.dirname(__file__),\"..\")), 'resources/')\n```\n\n* install_requires 填写包依赖可以自动匹配依赖包\n\n* `__init__.py` 文件中可以指定需要导入的包也可以指定版本等\n\n### 使用\n\n```bash\n# 编译\npython3 setup.py build\n\n# 安装\npython3 setup.py install\n\n# 制作分发包\npython3 setup.py sdist\n\n```\n\n## setup 配置实例\n\n```bash\nimport os\nimport re\nimport sys\n\nfrom setuptools import find_packages, setup\n\n_version_re = re.compile(r'__version__\\s+=\\s+(.*)')\n\nPY_VER = sys.version_info\n\nif PY_VER < (3, 6):\n    raise RuntimeError(\"pks doesn't support Python version prior 3.6\")\n\n\ndef read_version():\n    regexp = re.compile(r\"^__version__\\W*=\\W*'([\\d.abrc]+)'\")\n    init_py = os.path.join(os.path.dirname(__file__), 'pks', '__init__.py')\n    with open(init_py) as f:\n        for line in f:\n            match = regexp.match(line)\n            if match is not None:\n                return match.group(1)\n\n\ndef read(file_name):\n    with open(os.path.join(os.path.dirname(__file__), file_name), encoding='utf-8') as f:\n        return f.read()\n\n\nsetup(\n    name='pks',\n    version=read_version(),\n    author='yixue',\n    description=\"Async Python 3.6+ web scraping micro-framework based on asyncio.\",\n    long_description=read('README.md'),\n    long_description_content_type='text/markdown',\n    author_email='*@songshuai.cn',\n    python_requires='>=3.6',\n    install_requires=['pandas'],\n    packages=find_packages(),\n    classifiers=[\n        \"Operating System :: POSIX :: Linux\",\n    ],\n    project_urls={\n        'Source': 'hhttp://gitlab.yx/dw/pks',\n    },\n\n    package_data = {'pks': ['resources/*.csv'],}\n)\n\n```\n","source":"_posts/20190603-py-setup.md","raw":"---\ntitle: py_setup\ndate: 2019-06-03 13:38:21\ntags: python\ncategories: 后端\n---\n\n## setup 简介\n\nPython setup 是打包分发工具可以将自己的项目打包成packeage然后供他人使用\n\n可以setup中标明项目的依赖以及安装条件似的当前模块能够正确安装并使用\n\n## setup 实战\n\n### 一些参数介绍\n\n1. packages\n告诉Distutils需要处理那些包（包含__init__.py的文件夹）\n\n2. package_dir\n告诉Distutils哪些目录下的文件被映射到哪个源码包，感觉好像是一个相对路径的定义。一个例子：package_dir = {'': 'lib'}，表示以lib为主目录。\n\n3. ext_modules\n是一个包含Extension实例的列表，Extension的定义也有一些参数。\n\n4. ext_package\n定义extension的相对路径\n\n5. requires\n定义依赖哪些模块\n\n6. provides\n定义可以为哪些模块提供依赖\n\n7. scripts\n指定python源码文件，可以从命令行执行。在安装时指定--install-script\n8. package_data\n通常包含与包实现相关的一些数据文件或类似于readme的文件。\n\n### 注意事项\n\n* 需要注意的是 package_data 时候需要在代码中使用\n\n```python\n# 简单的说就是 使用项目所在目录完成配置文件的读取\nos.path.join(os.path.abspath(os.path.join(os.path.dirname(__file__),\"..\")), 'resources/')\n```\n\n* install_requires 填写包依赖可以自动匹配依赖包\n\n* `__init__.py` 文件中可以指定需要导入的包也可以指定版本等\n\n### 使用\n\n```bash\n# 编译\npython3 setup.py build\n\n# 安装\npython3 setup.py install\n\n# 制作分发包\npython3 setup.py sdist\n\n```\n\n## setup 配置实例\n\n```bash\nimport os\nimport re\nimport sys\n\nfrom setuptools import find_packages, setup\n\n_version_re = re.compile(r'__version__\\s+=\\s+(.*)')\n\nPY_VER = sys.version_info\n\nif PY_VER < (3, 6):\n    raise RuntimeError(\"pks doesn't support Python version prior 3.6\")\n\n\ndef read_version():\n    regexp = re.compile(r\"^__version__\\W*=\\W*'([\\d.abrc]+)'\")\n    init_py = os.path.join(os.path.dirname(__file__), 'pks', '__init__.py')\n    with open(init_py) as f:\n        for line in f:\n            match = regexp.match(line)\n            if match is not None:\n                return match.group(1)\n\n\ndef read(file_name):\n    with open(os.path.join(os.path.dirname(__file__), file_name), encoding='utf-8') as f:\n        return f.read()\n\n\nsetup(\n    name='pks',\n    version=read_version(),\n    author='yixue',\n    description=\"Async Python 3.6+ web scraping micro-framework based on asyncio.\",\n    long_description=read('README.md'),\n    long_description_content_type='text/markdown',\n    author_email='*@songshuai.cn',\n    python_requires='>=3.6',\n    install_requires=['pandas'],\n    packages=find_packages(),\n    classifiers=[\n        \"Operating System :: POSIX :: Linux\",\n    ],\n    project_urls={\n        'Source': 'hhttp://gitlab.yx/dw/pks',\n    },\n\n    package_data = {'pks': ['resources/*.csv'],}\n)\n\n```\n","slug":"py-setup","published":1,"updated":"2020-10-27T08:35:09.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrr9wvq000cgeql6nr80sel","content":"<h2 id=\"setup-简介\"><a href=\"#setup-简介\" class=\"headerlink\" title=\"setup 简介\"></a>setup 简介</h2><p>Python setup 是打包分发工具可以将自己的项目打包成packeage然后供他人使用</p>\n<p>可以setup中标明项目的依赖以及安装条件似的当前模块能够正确安装并使用</p>\n<h2 id=\"setup-实战\"><a href=\"#setup-实战\" class=\"headerlink\" title=\"setup 实战\"></a>setup 实战</h2><h3 id=\"一些参数介绍\"><a href=\"#一些参数介绍\" class=\"headerlink\" title=\"一些参数介绍\"></a>一些参数介绍</h3><ol>\n<li><p>packages<br>告诉Distutils需要处理那些包（包含<strong>init</strong>.py的文件夹）</p>\n</li>\n<li><p>package_dir<br>告诉Distutils哪些目录下的文件被映射到哪个源码包，感觉好像是一个相对路径的定义。一个例子：package_dir = {‘’: ‘lib’}，表示以lib为主目录。</p>\n</li>\n<li><p>ext_modules<br>是一个包含Extension实例的列表，Extension的定义也有一些参数。</p>\n</li>\n<li><p>ext_package<br>定义extension的相对路径</p>\n</li>\n<li><p>requires<br>定义依赖哪些模块</p>\n</li>\n<li><p>provides<br>定义可以为哪些模块提供依赖</p>\n</li>\n<li><p>scripts<br>指定python源码文件，可以从命令行执行。在安装时指定–install-script</p>\n</li>\n<li><p>package_data<br>通常包含与包实现相关的一些数据文件或类似于readme的文件。</p>\n</li>\n</ol>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>需要注意的是 package_data 时候需要在代码中使用</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 简单的说就是 使用项目所在目录完成配置文件的读取</span></span><br><span class=\"line\">os.path.join(os.path.abspath(os.path.join(os.path.dirname(__file__),<span class=\"string\">\"..\"</span>)), <span class=\"string\">'resources/'</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>install_requires 填写包依赖可以自动匹配依赖包</p>\n</li>\n<li><p><code>__init__.py</code> 文件中可以指定需要导入的包也可以指定版本等</p>\n</li>\n</ul>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编译</span></span><br><span class=\"line\">python3 setup.py build</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">python3 setup.py install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 制作分发包</span></span><br><span class=\"line\">python3 setup.py sdist</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"setup-配置实例\"><a href=\"#setup-配置实例\" class=\"headerlink\" title=\"setup 配置实例\"></a>setup 配置实例</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">import re</span><br><span class=\"line\">import sys</span><br><span class=\"line\"></span><br><span class=\"line\">from setuptools import find_packages, setup</span><br><span class=\"line\"></span><br><span class=\"line\">_version_re = re.compile(r<span class=\"string\">'__version__\\s+=\\s+(.*)'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">PY_VER = sys.version_info</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> PY_VER &lt; (3, 6):</span><br><span class=\"line\">    raise RuntimeError(<span class=\"string\">\"pks doesn't support Python version prior 3.6\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def read_version():</span><br><span class=\"line\">    regexp = re.compile(r<span class=\"string\">\"^__version__\\W*=\\W*'([\\d.abrc]+)'\"</span>)</span><br><span class=\"line\">    init_py = os.path.join(os.path.dirname(__file__), <span class=\"string\">'pks'</span>, <span class=\"string\">'__init__.py'</span>)</span><br><span class=\"line\">    with open(init_py) as f:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">            match = regexp.match(line)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> match is not None:</span><br><span class=\"line\">                <span class=\"built_in\">return</span> match.group(1)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def <span class=\"built_in\">read</span>(file_name):</span><br><span class=\"line\">    with open(os.path.join(os.path.dirname(__file__), file_name), encoding=<span class=\"string\">'utf-8'</span>) as f:</span><br><span class=\"line\">        <span class=\"built_in\">return</span> f.read()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">setup(</span><br><span class=\"line\">    name=<span class=\"string\">'pks'</span>,</span><br><span class=\"line\">    version=read_version(),</span><br><span class=\"line\">    author=<span class=\"string\">'yixue'</span>,</span><br><span class=\"line\">    description=<span class=\"string\">\"Async Python 3.6+ web scraping micro-framework based on asyncio.\"</span>,</span><br><span class=\"line\">    long_description=<span class=\"built_in\">read</span>(<span class=\"string\">'README.md'</span>),</span><br><span class=\"line\">    long_description_content_type=<span class=\"string\">'text/markdown'</span>,</span><br><span class=\"line\">    author_email=<span class=\"string\">'*@songshuai.cn'</span>,</span><br><span class=\"line\">    python_requires=<span class=\"string\">'&gt;=3.6'</span>,</span><br><span class=\"line\">    install_requires=[<span class=\"string\">'pandas'</span>],</span><br><span class=\"line\">    packages=find_packages(),</span><br><span class=\"line\">    classifiers=[</span><br><span class=\"line\">        <span class=\"string\">\"Operating System :: POSIX :: Linux\"</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    project_urls=&#123;</span><br><span class=\"line\">        <span class=\"string\">'Source'</span>: <span class=\"string\">'hhttp://gitlab.yx/dw/pks'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    package_data = &#123;<span class=\"string\">'pks'</span>: [<span class=\"string\">'resources/*.csv'</span>],&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"setup-简介\"><a href=\"#setup-简介\" class=\"headerlink\" title=\"setup 简介\"></a>setup 简介</h2><p>Python setup 是打包分发工具可以将自己的项目打包成packeage然后供他人使用</p>\n<p>可以setup中标明项目的依赖以及安装条件似的当前模块能够正确安装并使用</p>\n<h2 id=\"setup-实战\"><a href=\"#setup-实战\" class=\"headerlink\" title=\"setup 实战\"></a>setup 实战</h2><h3 id=\"一些参数介绍\"><a href=\"#一些参数介绍\" class=\"headerlink\" title=\"一些参数介绍\"></a>一些参数介绍</h3><ol>\n<li><p>packages<br>告诉Distutils需要处理那些包（包含<strong>init</strong>.py的文件夹）</p>\n</li>\n<li><p>package_dir<br>告诉Distutils哪些目录下的文件被映射到哪个源码包，感觉好像是一个相对路径的定义。一个例子：package_dir = {‘’: ‘lib’}，表示以lib为主目录。</p>\n</li>\n<li><p>ext_modules<br>是一个包含Extension实例的列表，Extension的定义也有一些参数。</p>\n</li>\n<li><p>ext_package<br>定义extension的相对路径</p>\n</li>\n<li><p>requires<br>定义依赖哪些模块</p>\n</li>\n<li><p>provides<br>定义可以为哪些模块提供依赖</p>\n</li>\n<li><p>scripts<br>指定python源码文件，可以从命令行执行。在安装时指定–install-script</p>\n</li>\n<li><p>package_data<br>通常包含与包实现相关的一些数据文件或类似于readme的文件。</p>\n</li>\n</ol>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>需要注意的是 package_data 时候需要在代码中使用</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 简单的说就是 使用项目所在目录完成配置文件的读取</span></span><br><span class=\"line\">os.path.join(os.path.abspath(os.path.join(os.path.dirname(__file__),<span class=\"string\">\"..\"</span>)), <span class=\"string\">'resources/'</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>install_requires 填写包依赖可以自动匹配依赖包</p>\n</li>\n<li><p><code>__init__.py</code> 文件中可以指定需要导入的包也可以指定版本等</p>\n</li>\n</ul>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编译</span></span><br><span class=\"line\">python3 setup.py build</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">python3 setup.py install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 制作分发包</span></span><br><span class=\"line\">python3 setup.py sdist</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"setup-配置实例\"><a href=\"#setup-配置实例\" class=\"headerlink\" title=\"setup 配置实例\"></a>setup 配置实例</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">import re</span><br><span class=\"line\">import sys</span><br><span class=\"line\"></span><br><span class=\"line\">from setuptools import find_packages, setup</span><br><span class=\"line\"></span><br><span class=\"line\">_version_re = re.compile(r<span class=\"string\">'__version__\\s+=\\s+(.*)'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">PY_VER = sys.version_info</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> PY_VER &lt; (3, 6):</span><br><span class=\"line\">    raise RuntimeError(<span class=\"string\">\"pks doesn't support Python version prior 3.6\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def read_version():</span><br><span class=\"line\">    regexp = re.compile(r<span class=\"string\">\"^__version__\\W*=\\W*'([\\d.abrc]+)'\"</span>)</span><br><span class=\"line\">    init_py = os.path.join(os.path.dirname(__file__), <span class=\"string\">'pks'</span>, <span class=\"string\">'__init__.py'</span>)</span><br><span class=\"line\">    with open(init_py) as f:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">            match = regexp.match(line)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> match is not None:</span><br><span class=\"line\">                <span class=\"built_in\">return</span> match.group(1)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def <span class=\"built_in\">read</span>(file_name):</span><br><span class=\"line\">    with open(os.path.join(os.path.dirname(__file__), file_name), encoding=<span class=\"string\">'utf-8'</span>) as f:</span><br><span class=\"line\">        <span class=\"built_in\">return</span> f.read()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">setup(</span><br><span class=\"line\">    name=<span class=\"string\">'pks'</span>,</span><br><span class=\"line\">    version=read_version(),</span><br><span class=\"line\">    author=<span class=\"string\">'yixue'</span>,</span><br><span class=\"line\">    description=<span class=\"string\">\"Async Python 3.6+ web scraping micro-framework based on asyncio.\"</span>,</span><br><span class=\"line\">    long_description=<span class=\"built_in\">read</span>(<span class=\"string\">'README.md'</span>),</span><br><span class=\"line\">    long_description_content_type=<span class=\"string\">'text/markdown'</span>,</span><br><span class=\"line\">    author_email=<span class=\"string\">'*@songshuai.cn'</span>,</span><br><span class=\"line\">    python_requires=<span class=\"string\">'&gt;=3.6'</span>,</span><br><span class=\"line\">    install_requires=[<span class=\"string\">'pandas'</span>],</span><br><span class=\"line\">    packages=find_packages(),</span><br><span class=\"line\">    classifiers=[</span><br><span class=\"line\">        <span class=\"string\">\"Operating System :: POSIX :: Linux\"</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    project_urls=&#123;</span><br><span class=\"line\">        <span class=\"string\">'Source'</span>: <span class=\"string\">'hhttp://gitlab.yx/dw/pks'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    package_data = &#123;<span class=\"string\">'pks'</span>: [<span class=\"string\">'resources/*.csv'</span>],&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n"},{"title":"leetcode_443","date":"2019-06-17T01:52:22.000Z","_content":"\n## 题目描述\n\n给定一组字符，使用原地算法将其压缩。\n\n压缩后的长度必须始终小于或等于原数组长度。\n\n数组的每个元素应该是长度为1 的字符（不是 int 整数类型）。\n\n在完成原地修改输入数组后，返回数组的新长度。\n\n## 解题思路\n\n1. 倒序遍历数组 -> 解决正序原地修改导致程序无法进行的问题\n\n2. 初始化计数器为1\n\n3. 遍历数组找到，并增加计数器直到当前字符与前一字符不相等则压缩一次字符串\n\n4. 重置计数器\n\n5. 当索引位置到第一个字符时由于前一字符为空应直接结束\n\n## 代码示例\n\n1. 倒序的方式\n\n    ```python\n\n    class Solution:\n        def compress(self, chars: list) -> int:\n            '''\n            @description: Given an array of characters, compress it in-place.\n            @param {list} [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\n            @return: length of input list\n            '''\n\n            count = 1\n            length = len(chars)\n            for index in range(length-1, -1, -1):\n                if index > 0 and chars[index] == chars[index-1]:\n                    count += 1\n                else:\n                    end = index+count\n                    chars[index: end] = [chars[index]] if count == 1 else [\n                        chars[index]] + list(str(count))\n                    count = 1\n            return len(chars)\n\n    ```\n\n2. 正序方式, 需要在最后删除所有在中间步骤添加的None\n\n    ```python\n    class Solution:\n        def compress(self, chars: list) -> int:\n            count = 1\n            for index, char in enumerate(chars):\n                if index < len(chars)-1 and char == chars[index+1]:\n                    count += 1\n                else:\n                    # temp_l.append(char) if count == 1 else temp_l.extend([char, str(count)])\n                    # print(chars)\n                    temp_char = [char] if count == 1 else [char] + list(str(count))\n                    interval = index+1 - (index-count+1)\n                    temp_char += [None for i in range(interval-len(temp_char))]\n                    chars[index-count+1: index+1] = temp_char\n                    count = 1\n\n            for i in range(len(chars)-1, -1, -1):\n                if chars[i] is None:\n                    del chars[i]\n            print(chars)\n            return len(chars)\n\n    ```\n\n## 思考\n\n执行用时 : 64 ms , 在所有Python3提交中击败了 98.03% 的用户\n内存消耗 : 13.1 MB , 在所有Python3提交中击败了 91.67% 的用户\n\n总结 : 看似简单的一道算法题做起来感觉并不简答\n    期间尝试了各种方法但是总是不完美\n    最后觉得这个方法应该理解起来以及代码写起来是比较简单的\n\n最后 : 算法题一定要多思考，顺着自己的思路才能找到答案\n","source":"_posts/20190617-leetcode-443.md","raw":"---\ntitle: leetcode_443\ndate: 2019-06-17 09:52:22\ntags: leetcode\ncategories: 算法\n---\n\n## 题目描述\n\n给定一组字符，使用原地算法将其压缩。\n\n压缩后的长度必须始终小于或等于原数组长度。\n\n数组的每个元素应该是长度为1 的字符（不是 int 整数类型）。\n\n在完成原地修改输入数组后，返回数组的新长度。\n\n## 解题思路\n\n1. 倒序遍历数组 -> 解决正序原地修改导致程序无法进行的问题\n\n2. 初始化计数器为1\n\n3. 遍历数组找到，并增加计数器直到当前字符与前一字符不相等则压缩一次字符串\n\n4. 重置计数器\n\n5. 当索引位置到第一个字符时由于前一字符为空应直接结束\n\n## 代码示例\n\n1. 倒序的方式\n\n    ```python\n\n    class Solution:\n        def compress(self, chars: list) -> int:\n            '''\n            @description: Given an array of characters, compress it in-place.\n            @param {list} [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\n            @return: length of input list\n            '''\n\n            count = 1\n            length = len(chars)\n            for index in range(length-1, -1, -1):\n                if index > 0 and chars[index] == chars[index-1]:\n                    count += 1\n                else:\n                    end = index+count\n                    chars[index: end] = [chars[index]] if count == 1 else [\n                        chars[index]] + list(str(count))\n                    count = 1\n            return len(chars)\n\n    ```\n\n2. 正序方式, 需要在最后删除所有在中间步骤添加的None\n\n    ```python\n    class Solution:\n        def compress(self, chars: list) -> int:\n            count = 1\n            for index, char in enumerate(chars):\n                if index < len(chars)-1 and char == chars[index+1]:\n                    count += 1\n                else:\n                    # temp_l.append(char) if count == 1 else temp_l.extend([char, str(count)])\n                    # print(chars)\n                    temp_char = [char] if count == 1 else [char] + list(str(count))\n                    interval = index+1 - (index-count+1)\n                    temp_char += [None for i in range(interval-len(temp_char))]\n                    chars[index-count+1: index+1] = temp_char\n                    count = 1\n\n            for i in range(len(chars)-1, -1, -1):\n                if chars[i] is None:\n                    del chars[i]\n            print(chars)\n            return len(chars)\n\n    ```\n\n## 思考\n\n执行用时 : 64 ms , 在所有Python3提交中击败了 98.03% 的用户\n内存消耗 : 13.1 MB , 在所有Python3提交中击败了 91.67% 的用户\n\n总结 : 看似简单的一道算法题做起来感觉并不简答\n    期间尝试了各种方法但是总是不完美\n    最后觉得这个方法应该理解起来以及代码写起来是比较简单的\n\n最后 : 算法题一定要多思考，顺着自己的思路才能找到答案\n","slug":"leetcode-443","published":1,"updated":"2020-10-27T08:35:13.484Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrr9wvt000ggeql63m6hnhx","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一组字符，使用原地算法将其压缩。</p>\n<p>压缩后的长度必须始终小于或等于原数组长度。</p>\n<p>数组的每个元素应该是长度为1 的字符（不是 int 整数类型）。</p>\n<p>在完成原地修改输入数组后，返回数组的新长度。</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li><p>倒序遍历数组 -&gt; 解决正序原地修改导致程序无法进行的问题</p>\n</li>\n<li><p>初始化计数器为1</p>\n</li>\n<li><p>遍历数组找到，并增加计数器直到当前字符与前一字符不相等则压缩一次字符串</p>\n</li>\n<li><p>重置计数器</p>\n</li>\n<li><p>当索引位置到第一个字符时由于前一字符为空应直接结束</p>\n</li>\n</ol>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><ol>\n<li><p>倒序的方式</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">compress</span><span class=\"params\">(self, chars: list)</span> -&gt; int:</span></span><br><span class=\"line\">        <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">        @description: Given an array of characters, compress it in-place.</span></span><br><span class=\"line\"><span class=\"string\">        @param &#123;list&#125; [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]</span></span><br><span class=\"line\"><span class=\"string\">        @return: length of input list</span></span><br><span class=\"line\"><span class=\"string\">        '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">        count = <span class=\"number\">1</span></span><br><span class=\"line\">        length = len(chars)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> range(length<span class=\"number\">-1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> index &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> chars[index] == chars[index<span class=\"number\">-1</span>]:</span><br><span class=\"line\">                count += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                end = index+count</span><br><span class=\"line\">                chars[index: end] = [chars[index]] <span class=\"keyword\">if</span> count == <span class=\"number\">1</span> <span class=\"keyword\">else</span> [</span><br><span class=\"line\">                    chars[index]] + list(str(count))</span><br><span class=\"line\">                count = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> len(chars)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>正序方式, 需要在最后删除所有在中间步骤添加的None</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">compress</span><span class=\"params\">(self, chars: list)</span> -&gt; int:</span></span><br><span class=\"line\">        count = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> index, char <span class=\"keyword\">in</span> enumerate(chars):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> index &lt; len(chars)<span class=\"number\">-1</span> <span class=\"keyword\">and</span> char == chars[index+<span class=\"number\">1</span>]:</span><br><span class=\"line\">                count += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"comment\"># temp_l.append(char) if count == 1 else temp_l.extend([char, str(count)])</span></span><br><span class=\"line\">                <span class=\"comment\"># print(chars)</span></span><br><span class=\"line\">                temp_char = [char] <span class=\"keyword\">if</span> count == <span class=\"number\">1</span> <span class=\"keyword\">else</span> [char] + list(str(count))</span><br><span class=\"line\">                interval = index+<span class=\"number\">1</span> - (index-count+<span class=\"number\">1</span>)</span><br><span class=\"line\">                temp_char += [<span class=\"literal\">None</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(interval-len(temp_char))]</span><br><span class=\"line\">                chars[index-count+<span class=\"number\">1</span>: index+<span class=\"number\">1</span>] = temp_char</span><br><span class=\"line\">                count = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(chars)<span class=\"number\">-1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> chars[i] <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                <span class=\"keyword\">del</span> chars[i]</span><br><span class=\"line\">        print(chars)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> len(chars)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p>执行用时 : 64 ms , 在所有Python3提交中击败了 98.03% 的用户<br>内存消耗 : 13.1 MB , 在所有Python3提交中击败了 91.67% 的用户</p>\n<p>总结 : 看似简单的一道算法题做起来感觉并不简答<br>    期间尝试了各种方法但是总是不完美<br>    最后觉得这个方法应该理解起来以及代码写起来是比较简单的</p>\n<p>最后 : 算法题一定要多思考，顺着自己的思路才能找到答案</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一组字符，使用原地算法将其压缩。</p>\n<p>压缩后的长度必须始终小于或等于原数组长度。</p>\n<p>数组的每个元素应该是长度为1 的字符（不是 int 整数类型）。</p>\n<p>在完成原地修改输入数组后，返回数组的新长度。</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li><p>倒序遍历数组 -&gt; 解决正序原地修改导致程序无法进行的问题</p>\n</li>\n<li><p>初始化计数器为1</p>\n</li>\n<li><p>遍历数组找到，并增加计数器直到当前字符与前一字符不相等则压缩一次字符串</p>\n</li>\n<li><p>重置计数器</p>\n</li>\n<li><p>当索引位置到第一个字符时由于前一字符为空应直接结束</p>\n</li>\n</ol>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><ol>\n<li><p>倒序的方式</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">compress</span><span class=\"params\">(self, chars: list)</span> -&gt; int:</span></span><br><span class=\"line\">        <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">        @description: Given an array of characters, compress it in-place.</span></span><br><span class=\"line\"><span class=\"string\">        @param &#123;list&#125; [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]</span></span><br><span class=\"line\"><span class=\"string\">        @return: length of input list</span></span><br><span class=\"line\"><span class=\"string\">        '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">        count = <span class=\"number\">1</span></span><br><span class=\"line\">        length = len(chars)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> range(length<span class=\"number\">-1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> index &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> chars[index] == chars[index<span class=\"number\">-1</span>]:</span><br><span class=\"line\">                count += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                end = index+count</span><br><span class=\"line\">                chars[index: end] = [chars[index]] <span class=\"keyword\">if</span> count == <span class=\"number\">1</span> <span class=\"keyword\">else</span> [</span><br><span class=\"line\">                    chars[index]] + list(str(count))</span><br><span class=\"line\">                count = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> len(chars)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>正序方式, 需要在最后删除所有在中间步骤添加的None</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">compress</span><span class=\"params\">(self, chars: list)</span> -&gt; int:</span></span><br><span class=\"line\">        count = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> index, char <span class=\"keyword\">in</span> enumerate(chars):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> index &lt; len(chars)<span class=\"number\">-1</span> <span class=\"keyword\">and</span> char == chars[index+<span class=\"number\">1</span>]:</span><br><span class=\"line\">                count += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"comment\"># temp_l.append(char) if count == 1 else temp_l.extend([char, str(count)])</span></span><br><span class=\"line\">                <span class=\"comment\"># print(chars)</span></span><br><span class=\"line\">                temp_char = [char] <span class=\"keyword\">if</span> count == <span class=\"number\">1</span> <span class=\"keyword\">else</span> [char] + list(str(count))</span><br><span class=\"line\">                interval = index+<span class=\"number\">1</span> - (index-count+<span class=\"number\">1</span>)</span><br><span class=\"line\">                temp_char += [<span class=\"literal\">None</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(interval-len(temp_char))]</span><br><span class=\"line\">                chars[index-count+<span class=\"number\">1</span>: index+<span class=\"number\">1</span>] = temp_char</span><br><span class=\"line\">                count = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(chars)<span class=\"number\">-1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> chars[i] <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                <span class=\"keyword\">del</span> chars[i]</span><br><span class=\"line\">        print(chars)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> len(chars)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p>执行用时 : 64 ms , 在所有Python3提交中击败了 98.03% 的用户<br>内存消耗 : 13.1 MB , 在所有Python3提交中击败了 91.67% 的用户</p>\n<p>总结 : 看似简单的一道算法题做起来感觉并不简答<br>    期间尝试了各种方法但是总是不完美<br>    最后觉得这个方法应该理解起来以及代码写起来是比较简单的</p>\n<p>最后 : 算法题一定要多思考，顺着自己的思路才能找到答案</p>\n"},{"title":"tornado_process","date":"2019-06-09T16:18:52.000Z","_content":"\n## tornado中使用多进程处理任务\n\n在最近的工作中遇到需要在服务中有重cpu计算的任务\n\n现有两种方案选择\n\n1. celery 实现分布式计算\n\n2. 程序内部实现多进程消费\n\n考虑到轻量级以及响应速度选着后者\n\n原因如下:\n\n1. 该项目中需要传输数据较大，celery在消息处理上消耗较大\n\n2. 搞项目初始化需要加载较多资源，这里不太了解celery是否可以有全局的配置\n\n3. celery 涉及服务组件较多，维护成本较高\n\n## 代码展示\n\n`run_on_executor_decorator` 这个方法只适用于多线程 (这里涉及到进程之间的序列化)\n\n```python\n\ndef run_on_executor_decorator(fn):\n    executor = kwargs.get(\"executor\", \"executor\")\n    io_loop = kwargs.get(\"io_loop\", \"io_loop\")\n\n    @functools.wraps(fn)\n    def wrapper(self, *args, **kwargs):\n        callback = kwargs.pop(\"callback\", None)\n        future = getattr(self, executor).submit(fn, self, *args, **kwargs)\n        if callback:\n            getattr(self, io_loop).add_future(\n                future, lambda future: callback(future.result()))\n        return future\n\n```\n\n```python\nimport functools\nimport os\nimport time\nfrom concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor\n\nimport tornado.ioloop\nimport tornado.web\n\n\ndef do_something(*args):\n    print(args)\n    time.sleep(5)\n    print('fafasfasfacscs')\n\n\nclass FutureHandler(tornado.web.RequestHandler):\n    executor = ProcessPoolExecutor(10)\n    # executor = ThreadPoolExecutor(10)\n\n\n    @tornado.web.asynchronous\n    @tornado.gen.coroutine\n    def get(self, *args, **kwargs):\n\n        url = 'www.google.com'\n\n        # 如果是多进程处理 可以直接在这里调用石林方法\n        # tornado.ioloop.IOLoop.instance().add_callback((self.do_something))\n        self.executor.submit(do_something, url)\n        print('works')\n        self.finish('It works')\n\n    def do_something(self):\n        pass\n\napplication = tornado.web.Application([\n    (r\"/\", FutureHandler),\n])\n\nif __name__ == \"__main__\":\n    application.listen(7777)\n    tornado.ioloop.IOLoop.instance().start()\n\n```\n\n## 参考资料\n\n关于并行计算可以参考\n\n[Python并行编程 中文版](https://python-parallel-programmning-cookbook.readthedocs.io/zh_CN/latest/index.html)\n\n## TODO\n\n1. async 的方式如何使用\n\n2. 分布式计算的实现\n","source":"_posts/20190610-tornado-process.md","raw":"---\ntitle: tornado_process\ndate: 2019-06-10 00:18:52\ntags: tornado\ncategories: 后端\n---\n\n## tornado中使用多进程处理任务\n\n在最近的工作中遇到需要在服务中有重cpu计算的任务\n\n现有两种方案选择\n\n1. celery 实现分布式计算\n\n2. 程序内部实现多进程消费\n\n考虑到轻量级以及响应速度选着后者\n\n原因如下:\n\n1. 该项目中需要传输数据较大，celery在消息处理上消耗较大\n\n2. 搞项目初始化需要加载较多资源，这里不太了解celery是否可以有全局的配置\n\n3. celery 涉及服务组件较多，维护成本较高\n\n## 代码展示\n\n`run_on_executor_decorator` 这个方法只适用于多线程 (这里涉及到进程之间的序列化)\n\n```python\n\ndef run_on_executor_decorator(fn):\n    executor = kwargs.get(\"executor\", \"executor\")\n    io_loop = kwargs.get(\"io_loop\", \"io_loop\")\n\n    @functools.wraps(fn)\n    def wrapper(self, *args, **kwargs):\n        callback = kwargs.pop(\"callback\", None)\n        future = getattr(self, executor).submit(fn, self, *args, **kwargs)\n        if callback:\n            getattr(self, io_loop).add_future(\n                future, lambda future: callback(future.result()))\n        return future\n\n```\n\n```python\nimport functools\nimport os\nimport time\nfrom concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor\n\nimport tornado.ioloop\nimport tornado.web\n\n\ndef do_something(*args):\n    print(args)\n    time.sleep(5)\n    print('fafasfasfacscs')\n\n\nclass FutureHandler(tornado.web.RequestHandler):\n    executor = ProcessPoolExecutor(10)\n    # executor = ThreadPoolExecutor(10)\n\n\n    @tornado.web.asynchronous\n    @tornado.gen.coroutine\n    def get(self, *args, **kwargs):\n\n        url = 'www.google.com'\n\n        # 如果是多进程处理 可以直接在这里调用石林方法\n        # tornado.ioloop.IOLoop.instance().add_callback((self.do_something))\n        self.executor.submit(do_something, url)\n        print('works')\n        self.finish('It works')\n\n    def do_something(self):\n        pass\n\napplication = tornado.web.Application([\n    (r\"/\", FutureHandler),\n])\n\nif __name__ == \"__main__\":\n    application.listen(7777)\n    tornado.ioloop.IOLoop.instance().start()\n\n```\n\n## 参考资料\n\n关于并行计算可以参考\n\n[Python并行编程 中文版](https://python-parallel-programmning-cookbook.readthedocs.io/zh_CN/latest/index.html)\n\n## TODO\n\n1. async 的方式如何使用\n\n2. 分布式计算的实现\n","slug":"tornado-process","published":1,"updated":"2020-10-27T08:35:11.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrr9wvv000hgeql2649h1vn","content":"<h2 id=\"tornado中使用多进程处理任务\"><a href=\"#tornado中使用多进程处理任务\" class=\"headerlink\" title=\"tornado中使用多进程处理任务\"></a>tornado中使用多进程处理任务</h2><p>在最近的工作中遇到需要在服务中有重cpu计算的任务</p>\n<p>现有两种方案选择</p>\n<ol>\n<li><p>celery 实现分布式计算</p>\n</li>\n<li><p>程序内部实现多进程消费</p>\n</li>\n</ol>\n<p>考虑到轻量级以及响应速度选着后者</p>\n<p>原因如下:</p>\n<ol>\n<li><p>该项目中需要传输数据较大，celery在消息处理上消耗较大</p>\n</li>\n<li><p>搞项目初始化需要加载较多资源，这里不太了解celery是否可以有全局的配置</p>\n</li>\n<li><p>celery 涉及服务组件较多，维护成本较高</p>\n</li>\n</ol>\n<h2 id=\"代码展示\"><a href=\"#代码展示\" class=\"headerlink\" title=\"代码展示\"></a>代码展示</h2><p><code>run_on_executor_decorator</code> 这个方法只适用于多线程 (这里涉及到进程之间的序列化)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_on_executor_decorator</span><span class=\"params\">(fn)</span>:</span></span><br><span class=\"line\">    executor = kwargs.get(<span class=\"string\">\"executor\"</span>, <span class=\"string\">\"executor\"</span>)</span><br><span class=\"line\">    io_loop = kwargs.get(<span class=\"string\">\"io_loop\"</span>, <span class=\"string\">\"io_loop\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @functools.wraps(fn)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        callback = kwargs.pop(<span class=\"string\">\"callback\"</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">        future = getattr(self, executor).submit(fn, self, *args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> callback:</span><br><span class=\"line\">            getattr(self, io_loop).add_future(</span><br><span class=\"line\">                future, <span class=\"keyword\">lambda</span> future: callback(future.result()))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> future</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> functools</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures <span class=\"keyword\">import</span> ProcessPoolExecutor, ThreadPoolExecutor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.ioloop</span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.web</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_something</span><span class=\"params\">(*args)</span>:</span></span><br><span class=\"line\">    print(args)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'fafasfasfacscs'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FutureHandler</span><span class=\"params\">(tornado.web.RequestHandler)</span>:</span></span><br><span class=\"line\">    executor = ProcessPoolExecutor(<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"comment\"># executor = ThreadPoolExecutor(10)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @tornado.web.asynchronous</span></span><br><span class=\"line\"><span class=\"meta\">    @tornado.gen.coroutine</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        url = <span class=\"string\">'www.google.com'</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 如果是多进程处理 可以直接在这里调用石林方法</span></span><br><span class=\"line\">        <span class=\"comment\"># tornado.ioloop.IOLoop.instance().add_callback((self.do_something))</span></span><br><span class=\"line\">        self.executor.submit(do_something, url)</span><br><span class=\"line\">        print(<span class=\"string\">'works'</span>)</span><br><span class=\"line\">        self.finish(<span class=\"string\">'It works'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_something</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">application = tornado.web.Application([</span><br><span class=\"line\">    (<span class=\"string\">r\"/\"</span>, FutureHandler),</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    application.listen(<span class=\"number\">7777</span>)</span><br><span class=\"line\">    tornado.ioloop.IOLoop.instance().start()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>关于并行计算可以参考</p>\n<p><a href=\"https://python-parallel-programmning-cookbook.readthedocs.io/zh_CN/latest/index.html\" target=\"_blank\" rel=\"noopener\">Python并行编程 中文版</a></p>\n<h2 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h2><ol>\n<li><p>async 的方式如何使用</p>\n</li>\n<li><p>分布式计算的实现</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"tornado中使用多进程处理任务\"><a href=\"#tornado中使用多进程处理任务\" class=\"headerlink\" title=\"tornado中使用多进程处理任务\"></a>tornado中使用多进程处理任务</h2><p>在最近的工作中遇到需要在服务中有重cpu计算的任务</p>\n<p>现有两种方案选择</p>\n<ol>\n<li><p>celery 实现分布式计算</p>\n</li>\n<li><p>程序内部实现多进程消费</p>\n</li>\n</ol>\n<p>考虑到轻量级以及响应速度选着后者</p>\n<p>原因如下:</p>\n<ol>\n<li><p>该项目中需要传输数据较大，celery在消息处理上消耗较大</p>\n</li>\n<li><p>搞项目初始化需要加载较多资源，这里不太了解celery是否可以有全局的配置</p>\n</li>\n<li><p>celery 涉及服务组件较多，维护成本较高</p>\n</li>\n</ol>\n<h2 id=\"代码展示\"><a href=\"#代码展示\" class=\"headerlink\" title=\"代码展示\"></a>代码展示</h2><p><code>run_on_executor_decorator</code> 这个方法只适用于多线程 (这里涉及到进程之间的序列化)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_on_executor_decorator</span><span class=\"params\">(fn)</span>:</span></span><br><span class=\"line\">    executor = kwargs.get(<span class=\"string\">\"executor\"</span>, <span class=\"string\">\"executor\"</span>)</span><br><span class=\"line\">    io_loop = kwargs.get(<span class=\"string\">\"io_loop\"</span>, <span class=\"string\">\"io_loop\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @functools.wraps(fn)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        callback = kwargs.pop(<span class=\"string\">\"callback\"</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">        future = getattr(self, executor).submit(fn, self, *args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> callback:</span><br><span class=\"line\">            getattr(self, io_loop).add_future(</span><br><span class=\"line\">                future, <span class=\"keyword\">lambda</span> future: callback(future.result()))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> future</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> functools</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures <span class=\"keyword\">import</span> ProcessPoolExecutor, ThreadPoolExecutor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.ioloop</span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.web</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_something</span><span class=\"params\">(*args)</span>:</span></span><br><span class=\"line\">    print(args)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'fafasfasfacscs'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FutureHandler</span><span class=\"params\">(tornado.web.RequestHandler)</span>:</span></span><br><span class=\"line\">    executor = ProcessPoolExecutor(<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"comment\"># executor = ThreadPoolExecutor(10)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @tornado.web.asynchronous</span></span><br><span class=\"line\"><span class=\"meta\">    @tornado.gen.coroutine</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        url = <span class=\"string\">'www.google.com'</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 如果是多进程处理 可以直接在这里调用石林方法</span></span><br><span class=\"line\">        <span class=\"comment\"># tornado.ioloop.IOLoop.instance().add_callback((self.do_something))</span></span><br><span class=\"line\">        self.executor.submit(do_something, url)</span><br><span class=\"line\">        print(<span class=\"string\">'works'</span>)</span><br><span class=\"line\">        self.finish(<span class=\"string\">'It works'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_something</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">application = tornado.web.Application([</span><br><span class=\"line\">    (<span class=\"string\">r\"/\"</span>, FutureHandler),</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    application.listen(<span class=\"number\">7777</span>)</span><br><span class=\"line\">    tornado.ioloop.IOLoop.instance().start()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>关于并行计算可以参考</p>\n<p><a href=\"https://python-parallel-programmning-cookbook.readthedocs.io/zh_CN/latest/index.html\" target=\"_blank\" rel=\"noopener\">Python并行编程 中文版</a></p>\n<h2 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h2><ol>\n<li><p>async 的方式如何使用</p>\n</li>\n<li><p>分布式计算的实现</p>\n</li>\n</ol>\n"},{"title":"front 入门","date":"2019-07-22T09:38:54.000Z","_content":"\n## 前端基本介绍\n\n- 巴拉巴拉\n\n## 目前用到的技术\n\n- React 用于构建用户界面的 JavaScript 库 [React 官网](https://react.docschina.org/)\n\n- Ant Design 服务于企业级产品的设计体系，基于确定和自然的设计价值观上的模块化解决方案，让设计者和开发者专注于更好的用户体验  [Ant Design 官网](https://ant.design/index-cn)\n\n- ANT DESIGN PRO 开箱即用的中台前端/设计解决方案 [ANT DESIGN PRO 官网](https://pro.ant.design/index-cn)\n\n## Ant Design  基本使用\n\n1. 配置开发环境 (Mac 为例)\n\n    ```bash\n    brew install node\n\n    # 安装成功之后查看版本\n    $ node -v\n    v12.6.0\n\n    $ npm -v\n    6.9.0\n\n    # 用cnpm 代替 npm\n    npm install -g cnpm --registry=https://registry.npm.taobao.org\n\n    # 安装 yarn 一个新的 JS 包管理工具, 解决 npm的一些缺陷\n    cnpm install -g yarn\n\n    # 配置npm源\n    npm config set registry https://registry.npm.taobao.org\n\n    # 查看npm 源\n    npm config get registry\n    ```\n\n2. 初始化项目\n\n    ```bash\n    # 1. 初始化简单的项目\n    cnpm init\n\n    cnpm install umi --save-dev\n\n    # 2. 构建类似ANT DESIGN PRO\n    mkdir demo & cd demo\n\n    # yarn初始化 根据需要选择项目\n    yarn create umi\n\n    $ ls\n    CNAME                    config                   jest.config.js           mock                     public                   tests\n    README.md                jest-puppeteer.config.js jsconfig.json            package.json             src                      tsconfig.json\n    ```\n\n3. 启动项目\n\n    ```bash\n    # 安装依赖\n    yarn\n\n    # 启动项目\n    yarn start  (npm start)\n\n    # 打开浏览器\n    http://localhost:8000/\n    ```\n","source":"_posts/20190722-front.md","raw":"---\ntitle: front 入门\ndate: 2019-07-22 17:38:54\ntags: react\ncategories: 前端\n\n---\n\n## 前端基本介绍\n\n- 巴拉巴拉\n\n## 目前用到的技术\n\n- React 用于构建用户界面的 JavaScript 库 [React 官网](https://react.docschina.org/)\n\n- Ant Design 服务于企业级产品的设计体系，基于确定和自然的设计价值观上的模块化解决方案，让设计者和开发者专注于更好的用户体验  [Ant Design 官网](https://ant.design/index-cn)\n\n- ANT DESIGN PRO 开箱即用的中台前端/设计解决方案 [ANT DESIGN PRO 官网](https://pro.ant.design/index-cn)\n\n## Ant Design  基本使用\n\n1. 配置开发环境 (Mac 为例)\n\n    ```bash\n    brew install node\n\n    # 安装成功之后查看版本\n    $ node -v\n    v12.6.0\n\n    $ npm -v\n    6.9.0\n\n    # 用cnpm 代替 npm\n    npm install -g cnpm --registry=https://registry.npm.taobao.org\n\n    # 安装 yarn 一个新的 JS 包管理工具, 解决 npm的一些缺陷\n    cnpm install -g yarn\n\n    # 配置npm源\n    npm config set registry https://registry.npm.taobao.org\n\n    # 查看npm 源\n    npm config get registry\n    ```\n\n2. 初始化项目\n\n    ```bash\n    # 1. 初始化简单的项目\n    cnpm init\n\n    cnpm install umi --save-dev\n\n    # 2. 构建类似ANT DESIGN PRO\n    mkdir demo & cd demo\n\n    # yarn初始化 根据需要选择项目\n    yarn create umi\n\n    $ ls\n    CNAME                    config                   jest.config.js           mock                     public                   tests\n    README.md                jest-puppeteer.config.js jsconfig.json            package.json             src                      tsconfig.json\n    ```\n\n3. 启动项目\n\n    ```bash\n    # 安装依赖\n    yarn\n\n    # 启动项目\n    yarn start  (npm start)\n\n    # 打开浏览器\n    http://localhost:8000/\n    ```\n","slug":"front","published":1,"updated":"2020-10-27T08:35:17.732Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrr9wvw000kgeqlfzkrbugr","content":"<h2 id=\"前端基本介绍\"><a href=\"#前端基本介绍\" class=\"headerlink\" title=\"前端基本介绍\"></a>前端基本介绍</h2><ul>\n<li>巴拉巴拉</li>\n</ul>\n<h2 id=\"目前用到的技术\"><a href=\"#目前用到的技术\" class=\"headerlink\" title=\"目前用到的技术\"></a>目前用到的技术</h2><ul>\n<li><p>React 用于构建用户界面的 JavaScript 库 <a href=\"https://react.docschina.org/\" target=\"_blank\" rel=\"noopener\">React 官网</a></p>\n</li>\n<li><p>Ant Design 服务于企业级产品的设计体系，基于确定和自然的设计价值观上的模块化解决方案，让设计者和开发者专注于更好的用户体验  <a href=\"https://ant.design/index-cn\" target=\"_blank\" rel=\"noopener\">Ant Design 官网</a></p>\n</li>\n<li><p>ANT DESIGN PRO 开箱即用的中台前端/设计解决方案 <a href=\"https://pro.ant.design/index-cn\" target=\"_blank\" rel=\"noopener\">ANT DESIGN PRO 官网</a></p>\n</li>\n</ul>\n<h2 id=\"Ant-Design-基本使用\"><a href=\"#Ant-Design-基本使用\" class=\"headerlink\" title=\"Ant Design  基本使用\"></a>Ant Design  基本使用</h2><ol>\n<li><p>配置开发环境 (Mac 为例)</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install node</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装成功之后查看版本</span></span><br><span class=\"line\">$ node -v</span><br><span class=\"line\">v12.6.0</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm -v</span><br><span class=\"line\">6.9.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用cnpm 代替 npm</span></span><br><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 yarn 一个新的 JS 包管理工具, 解决 npm的一些缺陷</span></span><br><span class=\"line\">cnpm install -g yarn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置npm源</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看npm 源</span></span><br><span class=\"line\">npm config get registry</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化项目</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 初始化简单的项目</span></span><br><span class=\"line\">cnpm init</span><br><span class=\"line\"></span><br><span class=\"line\">cnpm install umi --save-dev</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 构建类似ANT DESIGN PRO</span></span><br><span class=\"line\">mkdir demo &amp; <span class=\"built_in\">cd</span> demo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># yarn初始化 根据需要选择项目</span></span><br><span class=\"line\">yarn create umi</span><br><span class=\"line\"></span><br><span class=\"line\">$ ls</span><br><span class=\"line\">CNAME                    config                   jest.config.js           mock                     public                   tests</span><br><span class=\"line\">README.md                jest-puppeteer.config.js jsconfig.json            package.json             src                      tsconfig.json</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动项目</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">yarn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动项目</span></span><br><span class=\"line\">yarn start  (npm start)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打开浏览器</span></span><br><span class=\"line\">http://localhost:8000/</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前端基本介绍\"><a href=\"#前端基本介绍\" class=\"headerlink\" title=\"前端基本介绍\"></a>前端基本介绍</h2><ul>\n<li>巴拉巴拉</li>\n</ul>\n<h2 id=\"目前用到的技术\"><a href=\"#目前用到的技术\" class=\"headerlink\" title=\"目前用到的技术\"></a>目前用到的技术</h2><ul>\n<li><p>React 用于构建用户界面的 JavaScript 库 <a href=\"https://react.docschina.org/\" target=\"_blank\" rel=\"noopener\">React 官网</a></p>\n</li>\n<li><p>Ant Design 服务于企业级产品的设计体系，基于确定和自然的设计价值观上的模块化解决方案，让设计者和开发者专注于更好的用户体验  <a href=\"https://ant.design/index-cn\" target=\"_blank\" rel=\"noopener\">Ant Design 官网</a></p>\n</li>\n<li><p>ANT DESIGN PRO 开箱即用的中台前端/设计解决方案 <a href=\"https://pro.ant.design/index-cn\" target=\"_blank\" rel=\"noopener\">ANT DESIGN PRO 官网</a></p>\n</li>\n</ul>\n<h2 id=\"Ant-Design-基本使用\"><a href=\"#Ant-Design-基本使用\" class=\"headerlink\" title=\"Ant Design  基本使用\"></a>Ant Design  基本使用</h2><ol>\n<li><p>配置开发环境 (Mac 为例)</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install node</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装成功之后查看版本</span></span><br><span class=\"line\">$ node -v</span><br><span class=\"line\">v12.6.0</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm -v</span><br><span class=\"line\">6.9.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用cnpm 代替 npm</span></span><br><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 yarn 一个新的 JS 包管理工具, 解决 npm的一些缺陷</span></span><br><span class=\"line\">cnpm install -g yarn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置npm源</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看npm 源</span></span><br><span class=\"line\">npm config get registry</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化项目</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 初始化简单的项目</span></span><br><span class=\"line\">cnpm init</span><br><span class=\"line\"></span><br><span class=\"line\">cnpm install umi --save-dev</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 构建类似ANT DESIGN PRO</span></span><br><span class=\"line\">mkdir demo &amp; <span class=\"built_in\">cd</span> demo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># yarn初始化 根据需要选择项目</span></span><br><span class=\"line\">yarn create umi</span><br><span class=\"line\"></span><br><span class=\"line\">$ ls</span><br><span class=\"line\">CNAME                    config                   jest.config.js           mock                     public                   tests</span><br><span class=\"line\">README.md                jest-puppeteer.config.js jsconfig.json            package.json             src                      tsconfig.json</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动项目</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">yarn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动项目</span></span><br><span class=\"line\">yarn start  (npm start)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打开浏览器</span></span><br><span class=\"line\">http://localhost:8000/</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"mac coding","date":"2019-06-25T13:50:51.000Z","_content":"\n## Mac 环境下配置开发环境\n\n记录Mac日常coding中部分软件的安装\n主要是记录经常使用以及需要破解的软件\n\n## 安装brew\n\n[brew 中文官网](https://brew.sh/index_zh-cn)\n\n```bash\n\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n```\n\n## 安装python\n\n``` bash\nbrew install python3\n\npython3 -V\n```\n\n## 安装Java\n\n``` bash\n# 使用增强的 homebrew\nbrew tap caskroom/versions\n\nbrew cask install java8\n\n# 卸载\nbrew cask uninstall java8\n\n```\n\n## 安装 Navicat Premium Mac\n\n### 安装\n\n1. 进入[官网](http://www.navicat.com.cn/products )点击免费使用\n2. 找到对应的Mac 版本点击下载\n\n### 激活\n\n1. 下载DoubleLabyrinth/navicat-keygen [github地址](https://github.com/DoubleLabyrinth/navicat-keygen) release -> mac\n\n    ```bash\n    git clone -b mac https://github.com/DoubleLabyrinth/navicat-keygen.git\n\n\n    cd navicat-keygen\n\n    make all\n\n    ```\n\n2. 生成激活码\n\n    ```bash\n    cd bin\n\n    ./navicat-patcher /Applications/Navicat\\ Premium.app/Contents/MacOS/Navicat\\ Premium\n\n\n    ## 打开钥匙串新建 navicat 并总是信任\n\n    codesign -f -s \"foobar\" /Applications/Navicat\\ Premium.app/\n\n    ## 选择版本并输入相关信息\n    ./navicat-keygen ./RegPrivateKey.pem\n\n    ## 打开navicat 点击注册 填入上一步注册码\n\n    ## 断网选择离线激活，复制请求码，继续key-gen ,回车 回车 \n\n    ### 不出意外获得激活码\n\n    ```\n\n3. 激活成功\n\n## 安装IntelliJ IDEA\n\n1. 下载[官网](https://www.jetbrains.com/idea/download/#section=mac)\n\n2. 激活  -> [激活文档](http://idea.lanyus.com/)\n","source":"_posts/20190625-mac-code-init.md","raw":"---\ntitle: mac coding\ndate: 2019-06-25 21:50:51\ntags: 日常\ncategories: 后端\n---\n\n## Mac 环境下配置开发环境\n\n记录Mac日常coding中部分软件的安装\n主要是记录经常使用以及需要破解的软件\n\n## 安装brew\n\n[brew 中文官网](https://brew.sh/index_zh-cn)\n\n```bash\n\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n```\n\n## 安装python\n\n``` bash\nbrew install python3\n\npython3 -V\n```\n\n## 安装Java\n\n``` bash\n# 使用增强的 homebrew\nbrew tap caskroom/versions\n\nbrew cask install java8\n\n# 卸载\nbrew cask uninstall java8\n\n```\n\n## 安装 Navicat Premium Mac\n\n### 安装\n\n1. 进入[官网](http://www.navicat.com.cn/products )点击免费使用\n2. 找到对应的Mac 版本点击下载\n\n### 激活\n\n1. 下载DoubleLabyrinth/navicat-keygen [github地址](https://github.com/DoubleLabyrinth/navicat-keygen) release -> mac\n\n    ```bash\n    git clone -b mac https://github.com/DoubleLabyrinth/navicat-keygen.git\n\n\n    cd navicat-keygen\n\n    make all\n\n    ```\n\n2. 生成激活码\n\n    ```bash\n    cd bin\n\n    ./navicat-patcher /Applications/Navicat\\ Premium.app/Contents/MacOS/Navicat\\ Premium\n\n\n    ## 打开钥匙串新建 navicat 并总是信任\n\n    codesign -f -s \"foobar\" /Applications/Navicat\\ Premium.app/\n\n    ## 选择版本并输入相关信息\n    ./navicat-keygen ./RegPrivateKey.pem\n\n    ## 打开navicat 点击注册 填入上一步注册码\n\n    ## 断网选择离线激活，复制请求码，继续key-gen ,回车 回车 \n\n    ### 不出意外获得激活码\n\n    ```\n\n3. 激活成功\n\n## 安装IntelliJ IDEA\n\n1. 下载[官网](https://www.jetbrains.com/idea/download/#section=mac)\n\n2. 激活  -> [激活文档](http://idea.lanyus.com/)\n","slug":"mac-code-init","published":1,"updated":"2020-10-27T09:14:14.813Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrr9wvw000lgeql919pgwy8","content":"<h2 id=\"Mac-环境下配置开发环境\"><a href=\"#Mac-环境下配置开发环境\" class=\"headerlink\" title=\"Mac 环境下配置开发环境\"></a>Mac 环境下配置开发环境</h2><p>记录Mac日常coding中部分软件的安装<br>主要是记录经常使用以及需要破解的软件</p>\n<h2 id=\"安装brew\"><a href=\"#安装brew\" class=\"headerlink\" title=\"安装brew\"></a>安装brew</h2><p><a href=\"https://brew.sh/index_zh-cn\" target=\"_blank\" rel=\"noopener\">brew 中文官网</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/usr/bin/ruby -e <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装python\"><a href=\"#安装python\" class=\"headerlink\" title=\"安装python\"></a>安装python</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install python3</span><br><span class=\"line\"></span><br><span class=\"line\">python3 -V</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装Java\"><a href=\"#安装Java\" class=\"headerlink\" title=\"安装Java\"></a>安装Java</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用增强的 homebrew</span></span><br><span class=\"line\">brew tap caskroom/versions</span><br><span class=\"line\"></span><br><span class=\"line\">brew cask install java8</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 卸载</span></span><br><span class=\"line\">brew cask uninstall java8</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-Navicat-Premium-Mac\"><a href=\"#安装-Navicat-Premium-Mac\" class=\"headerlink\" title=\"安装 Navicat Premium Mac\"></a>安装 Navicat Premium Mac</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ol>\n<li>进入<a href=\"http://www.navicat.com.cn/products\" target=\"_blank\" rel=\"noopener\">官网</a>点击免费使用</li>\n<li>找到对应的Mac 版本点击下载</li>\n</ol>\n<h3 id=\"激活\"><a href=\"#激活\" class=\"headerlink\" title=\"激活\"></a>激活</h3><ol>\n<li><p>下载DoubleLabyrinth/navicat-keygen <a href=\"https://github.com/DoubleLabyrinth/navicat-keygen\" target=\"_blank\" rel=\"noopener\">github地址</a> release -&gt; mac</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> -b mac https://github.com/DoubleLabyrinth/navicat-keygen.git</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> navicat-keygen</span><br><span class=\"line\"></span><br><span class=\"line\">make all</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成激活码</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> bin</span><br><span class=\"line\"></span><br><span class=\"line\">./navicat-patcher /Applications/Navicat\\ Premium.app/Contents/MacOS/Navicat\\ Premium</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 打开钥匙串新建 navicat 并总是信任</span></span><br><span class=\"line\"></span><br><span class=\"line\">codesign -f -s <span class=\"string\">\"foobar\"</span> /Applications/Navicat\\ Premium.app/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 选择版本并输入相关信息</span></span><br><span class=\"line\">./navicat-keygen ./RegPrivateKey.pem</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 打开navicat 点击注册 填入上一步注册码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 断网选择离线激活，复制请求码，继续key-gen ,回车 回车 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 不出意外获得激活码</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>激活成功</p>\n</li>\n</ol>\n<h2 id=\"安装IntelliJ-IDEA\"><a href=\"#安装IntelliJ-IDEA\" class=\"headerlink\" title=\"安装IntelliJ IDEA\"></a>安装IntelliJ IDEA</h2><ol>\n<li><p>下载<a href=\"https://www.jetbrains.com/idea/download/#section=mac\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n</li>\n<li><p>激活  -&gt; <a href=\"http://idea.lanyus.com/\" target=\"_blank\" rel=\"noopener\">激活文档</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Mac-环境下配置开发环境\"><a href=\"#Mac-环境下配置开发环境\" class=\"headerlink\" title=\"Mac 环境下配置开发环境\"></a>Mac 环境下配置开发环境</h2><p>记录Mac日常coding中部分软件的安装<br>主要是记录经常使用以及需要破解的软件</p>\n<h2 id=\"安装brew\"><a href=\"#安装brew\" class=\"headerlink\" title=\"安装brew\"></a>安装brew</h2><p><a href=\"https://brew.sh/index_zh-cn\" target=\"_blank\" rel=\"noopener\">brew 中文官网</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/usr/bin/ruby -e <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装python\"><a href=\"#安装python\" class=\"headerlink\" title=\"安装python\"></a>安装python</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install python3</span><br><span class=\"line\"></span><br><span class=\"line\">python3 -V</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装Java\"><a href=\"#安装Java\" class=\"headerlink\" title=\"安装Java\"></a>安装Java</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用增强的 homebrew</span></span><br><span class=\"line\">brew tap caskroom/versions</span><br><span class=\"line\"></span><br><span class=\"line\">brew cask install java8</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 卸载</span></span><br><span class=\"line\">brew cask uninstall java8</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-Navicat-Premium-Mac\"><a href=\"#安装-Navicat-Premium-Mac\" class=\"headerlink\" title=\"安装 Navicat Premium Mac\"></a>安装 Navicat Premium Mac</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ol>\n<li>进入<a href=\"http://www.navicat.com.cn/products\" target=\"_blank\" rel=\"noopener\">官网</a>点击免费使用</li>\n<li>找到对应的Mac 版本点击下载</li>\n</ol>\n<h3 id=\"激活\"><a href=\"#激活\" class=\"headerlink\" title=\"激活\"></a>激活</h3><ol>\n<li><p>下载DoubleLabyrinth/navicat-keygen <a href=\"https://github.com/DoubleLabyrinth/navicat-keygen\" target=\"_blank\" rel=\"noopener\">github地址</a> release -&gt; mac</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> -b mac https://github.com/DoubleLabyrinth/navicat-keygen.git</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> navicat-keygen</span><br><span class=\"line\"></span><br><span class=\"line\">make all</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成激活码</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> bin</span><br><span class=\"line\"></span><br><span class=\"line\">./navicat-patcher /Applications/Navicat\\ Premium.app/Contents/MacOS/Navicat\\ Premium</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 打开钥匙串新建 navicat 并总是信任</span></span><br><span class=\"line\"></span><br><span class=\"line\">codesign -f -s <span class=\"string\">\"foobar\"</span> /Applications/Navicat\\ Premium.app/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 选择版本并输入相关信息</span></span><br><span class=\"line\">./navicat-keygen ./RegPrivateKey.pem</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 打开navicat 点击注册 填入上一步注册码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 断网选择离线激活，复制请求码，继续key-gen ,回车 回车 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 不出意外获得激活码</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>激活成功</p>\n</li>\n</ol>\n<h2 id=\"安装IntelliJ-IDEA\"><a href=\"#安装IntelliJ-IDEA\" class=\"headerlink\" title=\"安装IntelliJ IDEA\"></a>安装IntelliJ IDEA</h2><ol>\n<li><p>下载<a href=\"https://www.jetbrains.com/idea/download/#section=mac\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n</li>\n<li><p>激活  -&gt; <a href=\"http://idea.lanyus.com/\" target=\"_blank\" rel=\"noopener\">激活文档</a></p>\n</li>\n</ol>\n"},{"title":"generate_excel_columns","date":"2019-11-20T02:00:03.000Z","_content":"\n## 问题描述\n\n在工作中需要有序生成excel列类似 A B C ... Z AA AB;\n即传入一个数字生成对应的序列表示 例如: 26 -> Z, 27 -> AA;\n\n## 解题思路\n\n1. 题目类似进制的转换 27进制的数据\n\n2. 不同的地方是不会 各个位数的取值范围可能不相同\n\n3. 通过获取商与余数转换对应的值\n\n## 代码展示\n\n```python\n\ndef ColIdxToXlName(idx):\n    if idx < 1:\n        raise ValueError(\"Index is too small\")\n    result = \"\"\n    while True:\n\n        if idx > 26:\n            idx, r = divmod(idx - 1, 26)\n            print(idx, r)\n            result = chr(r + ord('A')) + result\n        else:\n            return chr(idx + ord('A') - 1) + result\n        print(result)\n\n\nprint(ColIdxToXlName(677))\n\n```\n\n## 思考\n\n1. 开始写代码的时候天真的以为只是简单的进制转换，直到出问题才细致观察\n\n2. 一定要多测试多观察找出规律\n\n3. 开始实现是字典存储数字与字母的映射关系，巧用 ascii 码可能代码更加简单\n","source":"_posts/20191120-generate-excel-columns.md","raw":"---\ntitle: generate_excel_columns\ndate: 2019-11-20 10:00:03\ntags: python\ncategories: 算法\n---\n\n## 问题描述\n\n在工作中需要有序生成excel列类似 A B C ... Z AA AB;\n即传入一个数字生成对应的序列表示 例如: 26 -> Z, 27 -> AA;\n\n## 解题思路\n\n1. 题目类似进制的转换 27进制的数据\n\n2. 不同的地方是不会 各个位数的取值范围可能不相同\n\n3. 通过获取商与余数转换对应的值\n\n## 代码展示\n\n```python\n\ndef ColIdxToXlName(idx):\n    if idx < 1:\n        raise ValueError(\"Index is too small\")\n    result = \"\"\n    while True:\n\n        if idx > 26:\n            idx, r = divmod(idx - 1, 26)\n            print(idx, r)\n            result = chr(r + ord('A')) + result\n        else:\n            return chr(idx + ord('A') - 1) + result\n        print(result)\n\n\nprint(ColIdxToXlName(677))\n\n```\n\n## 思考\n\n1. 开始写代码的时候天真的以为只是简单的进制转换，直到出问题才细致观察\n\n2. 一定要多测试多观察找出规律\n\n3. 开始实现是字典存储数字与字母的映射关系，巧用 ascii 码可能代码更加简单\n","slug":"generate-excel-columns","published":1,"updated":"2020-10-27T08:35:19.961Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrr9wvx000ogeqleh7g80x8","content":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>在工作中需要有序生成excel列类似 A B C … Z AA AB;<br>即传入一个数字生成对应的序列表示 例如: 26 -&gt; Z, 27 -&gt; AA;</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li><p>题目类似进制的转换 27进制的数据</p>\n</li>\n<li><p>不同的地方是不会 各个位数的取值范围可能不相同</p>\n</li>\n<li><p>通过获取商与余数转换对应的值</p>\n</li>\n</ol>\n<h2 id=\"代码展示\"><a href=\"#代码展示\" class=\"headerlink\" title=\"代码展示\"></a>代码展示</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ColIdxToXlName</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> idx &lt; <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">\"Index is too small\"</span>)</span><br><span class=\"line\">    result = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> idx &gt; <span class=\"number\">26</span>:</span><br><span class=\"line\">            idx, r = divmod(idx - <span class=\"number\">1</span>, <span class=\"number\">26</span>)</span><br><span class=\"line\">            print(idx, r)</span><br><span class=\"line\">            result = chr(r + ord(<span class=\"string\">'A'</span>)) + result</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> chr(idx + ord(<span class=\"string\">'A'</span>) - <span class=\"number\">1</span>) + result</span><br><span class=\"line\">        print(result)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(ColIdxToXlName(<span class=\"number\">677</span>))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><ol>\n<li><p>开始写代码的时候天真的以为只是简单的进制转换，直到出问题才细致观察</p>\n</li>\n<li><p>一定要多测试多观察找出规律</p>\n</li>\n<li><p>开始实现是字典存储数字与字母的映射关系，巧用 ascii 码可能代码更加简单</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>在工作中需要有序生成excel列类似 A B C … Z AA AB;<br>即传入一个数字生成对应的序列表示 例如: 26 -&gt; Z, 27 -&gt; AA;</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ol>\n<li><p>题目类似进制的转换 27进制的数据</p>\n</li>\n<li><p>不同的地方是不会 各个位数的取值范围可能不相同</p>\n</li>\n<li><p>通过获取商与余数转换对应的值</p>\n</li>\n</ol>\n<h2 id=\"代码展示\"><a href=\"#代码展示\" class=\"headerlink\" title=\"代码展示\"></a>代码展示</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ColIdxToXlName</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> idx &lt; <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">\"Index is too small\"</span>)</span><br><span class=\"line\">    result = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> idx &gt; <span class=\"number\">26</span>:</span><br><span class=\"line\">            idx, r = divmod(idx - <span class=\"number\">1</span>, <span class=\"number\">26</span>)</span><br><span class=\"line\">            print(idx, r)</span><br><span class=\"line\">            result = chr(r + ord(<span class=\"string\">'A'</span>)) + result</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> chr(idx + ord(<span class=\"string\">'A'</span>) - <span class=\"number\">1</span>) + result</span><br><span class=\"line\">        print(result)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(ColIdxToXlName(<span class=\"number\">677</span>))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><ol>\n<li><p>开始写代码的时候天真的以为只是简单的进制转换，直到出问题才细致观察</p>\n</li>\n<li><p>一定要多测试多观察找出规律</p>\n</li>\n<li><p>开始实现是字典存储数字与字母的映射关系，巧用 ascii 码可能代码更加简单</p>\n</li>\n</ol>\n"},{"title":"javascript map reduce 的一些用法","date":"2020-06-10T10:53:57.000Z","_content":"\n## 关于 es6一些函数的使用\n\n1. reduce 的一些用法\n\n    ```javascript\n    // 1. 需要将数组中的对象转变成 {1: \"apple\", 2: \"banana\", 3: \"orange\"}\n    const arr = [\n        { id: 1,name: \"apple\" },\n        { id: 2, name: \"banana\"},\n        { id: 3, name: \"orange\"},\n        ]\n\n    arr.reduce((obj, item) => ({\n        ...obj,\n        [item.id]: item.name\n    }), {})\n\n\n    // 2. 把[1, 3, 5, 7, 9]变换成整数13579\n    const arr = [1, 3, 5, 7, 9];\n\n    arr.reduce((result, item)=> ( result=result*10 + item ))\n\n    // 3. 一个字符串中每个字母出现的次数\n\n    const str = \"aabbcddeffffa\"\n    str.split(\"\").reduce((result, item) => {result[item] = result[item] ? result[item] + 1 : 1; return result }, {})\n\n    str.split(\"\").reduce((result, item) => ({[item]: result[item]? result[item]++: 1,...result }),{})\n    ```\n\n2. map 的一些用法\n\n    ```javascript\n    // 1. 实现函数f(x)=x2的功能\n    const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n    arr.map( item => item* item )\n\n\n    // 2. 把[1, 3, 5, 7, 9]变换成整数13579\n    const arr = [1, 3, 5, 7, 9];\n\n    arr.reduce((result, item)=> ( result=result*10 + item ))\n    ```\n","source":"_posts/20200610-javascript-code.md","raw":"---\ntitle: javascript map reduce 的一些用法\ndate: 2020-06-10 18:53:57\ntags: 函数式编程\ncategories: 前端 \n---\n\n## 关于 es6一些函数的使用\n\n1. reduce 的一些用法\n\n    ```javascript\n    // 1. 需要将数组中的对象转变成 {1: \"apple\", 2: \"banana\", 3: \"orange\"}\n    const arr = [\n        { id: 1,name: \"apple\" },\n        { id: 2, name: \"banana\"},\n        { id: 3, name: \"orange\"},\n        ]\n\n    arr.reduce((obj, item) => ({\n        ...obj,\n        [item.id]: item.name\n    }), {})\n\n\n    // 2. 把[1, 3, 5, 7, 9]变换成整数13579\n    const arr = [1, 3, 5, 7, 9];\n\n    arr.reduce((result, item)=> ( result=result*10 + item ))\n\n    // 3. 一个字符串中每个字母出现的次数\n\n    const str = \"aabbcddeffffa\"\n    str.split(\"\").reduce((result, item) => {result[item] = result[item] ? result[item] + 1 : 1; return result }, {})\n\n    str.split(\"\").reduce((result, item) => ({[item]: result[item]? result[item]++: 1,...result }),{})\n    ```\n\n2. map 的一些用法\n\n    ```javascript\n    // 1. 实现函数f(x)=x2的功能\n    const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n    arr.map( item => item* item )\n\n\n    // 2. 把[1, 3, 5, 7, 9]变换成整数13579\n    const arr = [1, 3, 5, 7, 9];\n\n    arr.reduce((result, item)=> ( result=result*10 + item ))\n    ```\n","slug":"javascript-code","published":1,"updated":"2020-10-27T08:35:22.418Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrr9wvy000pgeql0ryt2p9h","content":"<h2 id=\"关于-es6一些函数的使用\"><a href=\"#关于-es6一些函数的使用\" class=\"headerlink\" title=\"关于 es6一些函数的使用\"></a>关于 es6一些函数的使用</h2><ol>\n<li><p>reduce 的一些用法</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 需要将数组中的对象转变成 &#123;1: \"apple\", 2: \"banana\", 3: \"orange\"&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>,<span class=\"attr\">name</span>: <span class=\"string\">\"apple\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"banana\"</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"orange\"</span>&#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\"></span><br><span class=\"line\">arr.reduce(<span class=\"function\">(<span class=\"params\">obj, item</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">    ...obj,</span><br><span class=\"line\">    [item.id]: item.name</span><br><span class=\"line\">&#125;), &#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 把[1, 3, 5, 7, 9]变换成整数13579</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">arr.reduce(<span class=\"function\">(<span class=\"params\">result, item</span>)=&gt;</span> ( result=result*<span class=\"number\">10</span> + item ))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 一个字符串中每个字母出现的次数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">\"aabbcddeffffa\"</span></span><br><span class=\"line\">str.split(<span class=\"string\">\"\"</span>).reduce(<span class=\"function\">(<span class=\"params\">result, item</span>) =&gt;</span> &#123;result[item] = result[item] ? result[item] + <span class=\"number\">1</span> : <span class=\"number\">1</span>; <span class=\"keyword\">return</span> result &#125;, &#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">str.split(<span class=\"string\">\"\"</span>).reduce(<span class=\"function\">(<span class=\"params\">result, item</span>) =&gt;</span> (&#123;[item]: result[item]? result[item]++: <span class=\"number\">1</span>,...result &#125;),&#123;&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>map 的一些用法</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 实现函数f(x)=x2的功能</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">arr.map( <span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item* item )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 把[1, 3, 5, 7, 9]变换成整数13579</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">arr.reduce(<span class=\"function\">(<span class=\"params\">result, item</span>)=&gt;</span> ( result=result*<span class=\"number\">10</span> + item ))</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于-es6一些函数的使用\"><a href=\"#关于-es6一些函数的使用\" class=\"headerlink\" title=\"关于 es6一些函数的使用\"></a>关于 es6一些函数的使用</h2><ol>\n<li><p>reduce 的一些用法</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 需要将数组中的对象转变成 &#123;1: \"apple\", 2: \"banana\", 3: \"orange\"&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>,<span class=\"attr\">name</span>: <span class=\"string\">\"apple\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"banana\"</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"orange\"</span>&#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\"></span><br><span class=\"line\">arr.reduce(<span class=\"function\">(<span class=\"params\">obj, item</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">    ...obj,</span><br><span class=\"line\">    [item.id]: item.name</span><br><span class=\"line\">&#125;), &#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 把[1, 3, 5, 7, 9]变换成整数13579</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">arr.reduce(<span class=\"function\">(<span class=\"params\">result, item</span>)=&gt;</span> ( result=result*<span class=\"number\">10</span> + item ))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 一个字符串中每个字母出现的次数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">\"aabbcddeffffa\"</span></span><br><span class=\"line\">str.split(<span class=\"string\">\"\"</span>).reduce(<span class=\"function\">(<span class=\"params\">result, item</span>) =&gt;</span> &#123;result[item] = result[item] ? result[item] + <span class=\"number\">1</span> : <span class=\"number\">1</span>; <span class=\"keyword\">return</span> result &#125;, &#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">str.split(<span class=\"string\">\"\"</span>).reduce(<span class=\"function\">(<span class=\"params\">result, item</span>) =&gt;</span> (&#123;[item]: result[item]? result[item]++: <span class=\"number\">1</span>,...result &#125;),&#123;&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>map 的一些用法</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 实现函数f(x)=x2的功能</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">arr.map( <span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item* item )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 把[1, 3, 5, 7, 9]变换成整数13579</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">arr.reduce(<span class=\"function\">(<span class=\"params\">result, item</span>)=&gt;</span> ( result=result*<span class=\"number\">10</span> + item ))</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"django-full-text-search","date":"2020-10-27T08:15:04.000Z","_content":"\n\n## 一. mysql 的全文索引\n\n从MySQL 5.7开始，MySQL内置了ngram全文检索插件，用来支持中文分词，并且对MyISAM和InnoDB引擎有效。\n\n1. 必要的参数设置\n\n    ```bash\n    # 在 /etc/mysql/mysql.conf.d/mysqld.cnf 中添加分词以及最小词语长度\n    ft_min_word_len = 2\n    ngram_token_size = 2\n\n    echo 'ft_min_word_len = 2\n    ngram_token_size = 2' >> mysqld.cnf\n\n    /etc/init.d/mysql restart\n\n    # 查看配置\n    SHOW VARIABLES LIKE 'ft_min_word_len';\n\n    SHOW VARIABLES LIKE 'ngram_token_size';\n    ```\n\n2. mysql 索引配置\n\n    ```sql\n    -- CREATE FULLTEXT INDEX knowledge_knowledge_content_index ON knowledge_knowledge ( content, title );\n\n    -- 这个方式创建生效成功\n    ALTER TABLE knowledge_knowledge ADD FULLTEXT INDEX knowledge_knowledge_content_index ( content, title ) WITH PARSER ngram;\n    ```\n\n3. django 中适用配置\n\n    ```python\n    sql = \"SELECT * from knowledge_knowledge where match(content, title) against('原件' in BOOLEAN MODE);\"\n\n     k = Knowledge.objects.raw(sql)\n    ```\n\n优点: 不需要引入过多的插件，直接利用数据库的功能。\n缺点: 随着数据量的增加性能可能成为主要瓶颈，而且不利于项目的扩展\n\n## 二. drf_haystack whoosh jieba\n\n文档参考\n\n- [drf_haystack](https://drf-haystack.readthedocs.io/en/latest/index.html)\n\n1. 项目依赖下载\n\n    ```bash\n    pip install django-haystack\n    pip install drf_haystack\n    pip install Whoosh\n    pip install jieba\n\n    # 解决 ImportError: cannot import name connections\n\n    pip uninstall haystack\n    pip uninstall django-haystack\n    pip install django-haystack\n    ```\n\n2. 基本配置\n\n    - 修改settings 文件\n\n    ```python\n    # 1. 修改settings 文件\n\n    # INSTALLED_APPS 注意放在最前面\n\n    INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'haystack',\n    'rest_framework',\n    'knowledge'\n    ]\n\n    HAYSTACK_CONNECTIONS = {\n    'default': {\n        # 'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',\n        'ENGINE': 'main.whoosh_cn_backend.WhooshEngine',\n        'PATH': os.path.join(os.path.dirname(__file__), 'whoosh_index'),\n        },\n    }\n\n    # 当添加、修改、删除数据时，自动生成索引\n    HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'\n    # 设置每页显示的结果数量\n    HAYSTACK_SEARCH_RESULTS_PER_PAGE = 10\n    ```\n\n    - 添加索引配置文件，项目中新建 search_indexes.py\n\n    ```python\n    from knowledge.models.Knowledge import Knowledge\n    from haystack import indexes\n\n\n    class KnowledgeIndex(indexes.SearchIndex, indexes.Indexable):\n\n    text = indexes.CharField(document=True, use_template=True)\n    title = indexes.CharField(model_attr=\"title\")\n    content = indexes.CharField(model_attr=\"content\")\n    tag = indexes.CharField(model_attr=\"tag\")\n    creator = indexes.CharField(model_attr=\"creator\")\n    id = indexes.CharField(model_attr=\"pk\")\n    autocomplete = indexes.EdgeNgramField()\n\n    @staticmethod\n    def prepare_autocomplete(obj):\n        return \" \".join((\n        obj.title,\n        ))\n\n    def get_model(self):\n        return Knowledge\n\n    def index_queryset(self, using=None):\n        return self.get_model().objects.all()\n\n    ```\n\n    - 结巴分词替换whoosh 默认的分词\n\n    ```python\n    # 1. 拷贝 `haystack/backends/whoosh_backends.py` 到当前目录\n\n    # 2. 搜索 并修改\n    schema_fields[field_class.index_fieldname] = TEXT(stored=True, analyzer=StemmingAnalyzer(), field_boost=field_class.boost, sortable=True)\n\n    from jieba.analyse import ChineseAnalyzer\n\n    ...\n    #注意先找到这个再修改，而不是直接添加  \n    schema_fields[field_class.index_fieldname] = TEXT(stored=True, analyzer=ChineseAnalyzer(),field_boost=field_class.boost, sortable=True)\n\n    ```\n\n    - 配置 路由 视图 序列化\n\n    ```python\n    # 1. urls.py\n    from rest_framework import routers\n\n    router = routers.SimpleRouter(trailing_slash=False)\n\n    router.register(\"location/search\", KnowledgeSearchViewSet, base_name=\"location-search\")\n\n    router.register(\"search\", viewset=SearchViewSet, base_name=\"search\")  # MLT name will be 'search-more-like-this'.\n\n    # 2. serializers.py\n    from drf_haystack.serializers import HaystackSerializer\n    from knowledge.search_indexes import KnowledgeIndex\n    from drf_haystack.serializers import HaystackSerializer\n\n\n    class KnowledgeSearchSerializer(HaystackSerializer):\n        # more_like_this = serializers.HyperlinkedIdentityField(view_name=\"search-more-like-this\", read_only=True)\n\n        class Meta:\n            index_classes = [KnowledgeIndex]\n            fields = ['title', 'tag', 'content', 'creator', 'id', 'autocomplete']\n            ignore_fields = [\"autocomplete\"]\n\n    class AutocompleteSerializer(HaystackSerializer):\n\n        class Meta:\n            index_classes = [KnowledgeIndex]\n            fields = [\"address\", \"city\", \"zip_code\", \"autocomplete\"]\n            ignore_fields = [\"autocomplete\"]\n\n            # The `field_aliases` attribute can be used in order to alias a\n            # query parameter to a field attribute. In this case a query like\n            # /search/?q=oslo would alias the `q` parameter to the `autocomplete`\n            # field on the index.\n            field_aliases = {\n                \"q\": \"autocomplete\"\n            }\n\n\n    class SearchSerializer(HaystackSerializer):\n\n        more_like_this = serializers.HyperlinkedIdentityField(view_name=\"search-more-like-this\", read_only=True)\n\n        class Meta:\n            index_classes = [KnowledgeIndex]\n            fields = ['title', 'tag', 'content', 'creator', 'id']\n    # 3. views.py\n\n    from drf_haystack.viewsets import HaystackViewSet\n\n    from knowledge.serializers.KnowledgeSerializer import KnowledgeSearchSerializer, AutocompleteSerializer, SearchSerializer\n    from drf_haystack.filters import HaystackAutocompleteFilter\n    from drf_haystack.viewsets import HaystackViewSet\n    from drf_haystack.mixins import MoreLikeThisMixin\n    from knowledge.models.Knowledge import Knowledge\n\n    # ViewSet\n    class KnowledgeSearchViewSet(HaystackViewSet):\n        index_models = [Knowledge]\n        serializer_class = KnowledgeSearchSerializer\n\n    class AutocompleteSearchViewSet(HaystackViewSet):\n\n        index_models = [Knowledge]\n        serializer_class = AutocompleteSerializer\n        filter_backends = [HaystackAutocompleteFilter]\n\n    class SearchViewSet(MoreLikeThisMixin, HaystackViewSet):\n        index_models = [Knowledge]\n        serializer_class = SearchSerializer\n    ```\n\n    - 生成索引\n\n    ```bash\n    python3 manage.py rebuild_index\n    ```\n\n3. 使用搜索\n\n    浏览器访问: [dsf_full_search](http://hotpot-local.bkjk-inc.com:18000/api/v1/knowledge/search?content=span)\n\n    注意: 这里有个问题不带条件搜索默认为空，但是使用默认的whoosh 分词，就会是所有的文档\n","source":"_posts/20201027-django-full-text-search.md","raw":"---\ntitle: django-full-text-search\ndate: 2020-10-27 16:15:04\ntags: 全文检索\ncategories: 后端\n\n---\n\n\n## 一. mysql 的全文索引\n\n从MySQL 5.7开始，MySQL内置了ngram全文检索插件，用来支持中文分词，并且对MyISAM和InnoDB引擎有效。\n\n1. 必要的参数设置\n\n    ```bash\n    # 在 /etc/mysql/mysql.conf.d/mysqld.cnf 中添加分词以及最小词语长度\n    ft_min_word_len = 2\n    ngram_token_size = 2\n\n    echo 'ft_min_word_len = 2\n    ngram_token_size = 2' >> mysqld.cnf\n\n    /etc/init.d/mysql restart\n\n    # 查看配置\n    SHOW VARIABLES LIKE 'ft_min_word_len';\n\n    SHOW VARIABLES LIKE 'ngram_token_size';\n    ```\n\n2. mysql 索引配置\n\n    ```sql\n    -- CREATE FULLTEXT INDEX knowledge_knowledge_content_index ON knowledge_knowledge ( content, title );\n\n    -- 这个方式创建生效成功\n    ALTER TABLE knowledge_knowledge ADD FULLTEXT INDEX knowledge_knowledge_content_index ( content, title ) WITH PARSER ngram;\n    ```\n\n3. django 中适用配置\n\n    ```python\n    sql = \"SELECT * from knowledge_knowledge where match(content, title) against('原件' in BOOLEAN MODE);\"\n\n     k = Knowledge.objects.raw(sql)\n    ```\n\n优点: 不需要引入过多的插件，直接利用数据库的功能。\n缺点: 随着数据量的增加性能可能成为主要瓶颈，而且不利于项目的扩展\n\n## 二. drf_haystack whoosh jieba\n\n文档参考\n\n- [drf_haystack](https://drf-haystack.readthedocs.io/en/latest/index.html)\n\n1. 项目依赖下载\n\n    ```bash\n    pip install django-haystack\n    pip install drf_haystack\n    pip install Whoosh\n    pip install jieba\n\n    # 解决 ImportError: cannot import name connections\n\n    pip uninstall haystack\n    pip uninstall django-haystack\n    pip install django-haystack\n    ```\n\n2. 基本配置\n\n    - 修改settings 文件\n\n    ```python\n    # 1. 修改settings 文件\n\n    # INSTALLED_APPS 注意放在最前面\n\n    INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'haystack',\n    'rest_framework',\n    'knowledge'\n    ]\n\n    HAYSTACK_CONNECTIONS = {\n    'default': {\n        # 'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',\n        'ENGINE': 'main.whoosh_cn_backend.WhooshEngine',\n        'PATH': os.path.join(os.path.dirname(__file__), 'whoosh_index'),\n        },\n    }\n\n    # 当添加、修改、删除数据时，自动生成索引\n    HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'\n    # 设置每页显示的结果数量\n    HAYSTACK_SEARCH_RESULTS_PER_PAGE = 10\n    ```\n\n    - 添加索引配置文件，项目中新建 search_indexes.py\n\n    ```python\n    from knowledge.models.Knowledge import Knowledge\n    from haystack import indexes\n\n\n    class KnowledgeIndex(indexes.SearchIndex, indexes.Indexable):\n\n    text = indexes.CharField(document=True, use_template=True)\n    title = indexes.CharField(model_attr=\"title\")\n    content = indexes.CharField(model_attr=\"content\")\n    tag = indexes.CharField(model_attr=\"tag\")\n    creator = indexes.CharField(model_attr=\"creator\")\n    id = indexes.CharField(model_attr=\"pk\")\n    autocomplete = indexes.EdgeNgramField()\n\n    @staticmethod\n    def prepare_autocomplete(obj):\n        return \" \".join((\n        obj.title,\n        ))\n\n    def get_model(self):\n        return Knowledge\n\n    def index_queryset(self, using=None):\n        return self.get_model().objects.all()\n\n    ```\n\n    - 结巴分词替换whoosh 默认的分词\n\n    ```python\n    # 1. 拷贝 `haystack/backends/whoosh_backends.py` 到当前目录\n\n    # 2. 搜索 并修改\n    schema_fields[field_class.index_fieldname] = TEXT(stored=True, analyzer=StemmingAnalyzer(), field_boost=field_class.boost, sortable=True)\n\n    from jieba.analyse import ChineseAnalyzer\n\n    ...\n    #注意先找到这个再修改，而不是直接添加  \n    schema_fields[field_class.index_fieldname] = TEXT(stored=True, analyzer=ChineseAnalyzer(),field_boost=field_class.boost, sortable=True)\n\n    ```\n\n    - 配置 路由 视图 序列化\n\n    ```python\n    # 1. urls.py\n    from rest_framework import routers\n\n    router = routers.SimpleRouter(trailing_slash=False)\n\n    router.register(\"location/search\", KnowledgeSearchViewSet, base_name=\"location-search\")\n\n    router.register(\"search\", viewset=SearchViewSet, base_name=\"search\")  # MLT name will be 'search-more-like-this'.\n\n    # 2. serializers.py\n    from drf_haystack.serializers import HaystackSerializer\n    from knowledge.search_indexes import KnowledgeIndex\n    from drf_haystack.serializers import HaystackSerializer\n\n\n    class KnowledgeSearchSerializer(HaystackSerializer):\n        # more_like_this = serializers.HyperlinkedIdentityField(view_name=\"search-more-like-this\", read_only=True)\n\n        class Meta:\n            index_classes = [KnowledgeIndex]\n            fields = ['title', 'tag', 'content', 'creator', 'id', 'autocomplete']\n            ignore_fields = [\"autocomplete\"]\n\n    class AutocompleteSerializer(HaystackSerializer):\n\n        class Meta:\n            index_classes = [KnowledgeIndex]\n            fields = [\"address\", \"city\", \"zip_code\", \"autocomplete\"]\n            ignore_fields = [\"autocomplete\"]\n\n            # The `field_aliases` attribute can be used in order to alias a\n            # query parameter to a field attribute. In this case a query like\n            # /search/?q=oslo would alias the `q` parameter to the `autocomplete`\n            # field on the index.\n            field_aliases = {\n                \"q\": \"autocomplete\"\n            }\n\n\n    class SearchSerializer(HaystackSerializer):\n\n        more_like_this = serializers.HyperlinkedIdentityField(view_name=\"search-more-like-this\", read_only=True)\n\n        class Meta:\n            index_classes = [KnowledgeIndex]\n            fields = ['title', 'tag', 'content', 'creator', 'id']\n    # 3. views.py\n\n    from drf_haystack.viewsets import HaystackViewSet\n\n    from knowledge.serializers.KnowledgeSerializer import KnowledgeSearchSerializer, AutocompleteSerializer, SearchSerializer\n    from drf_haystack.filters import HaystackAutocompleteFilter\n    from drf_haystack.viewsets import HaystackViewSet\n    from drf_haystack.mixins import MoreLikeThisMixin\n    from knowledge.models.Knowledge import Knowledge\n\n    # ViewSet\n    class KnowledgeSearchViewSet(HaystackViewSet):\n        index_models = [Knowledge]\n        serializer_class = KnowledgeSearchSerializer\n\n    class AutocompleteSearchViewSet(HaystackViewSet):\n\n        index_models = [Knowledge]\n        serializer_class = AutocompleteSerializer\n        filter_backends = [HaystackAutocompleteFilter]\n\n    class SearchViewSet(MoreLikeThisMixin, HaystackViewSet):\n        index_models = [Knowledge]\n        serializer_class = SearchSerializer\n    ```\n\n    - 生成索引\n\n    ```bash\n    python3 manage.py rebuild_index\n    ```\n\n3. 使用搜索\n\n    浏览器访问: [dsf_full_search](http://hotpot-local.bkjk-inc.com:18000/api/v1/knowledge/search?content=span)\n\n    注意: 这里有个问题不带条件搜索默认为空，但是使用默认的whoosh 分词，就会是所有的文档\n","slug":"django-full-text-search","published":1,"updated":"2020-10-27T08:35:23.970Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgrr9wvz000rgeql4tvt7shj","content":"<h2 id=\"一-mysql-的全文索引\"><a href=\"#一-mysql-的全文索引\" class=\"headerlink\" title=\"一. mysql 的全文索引\"></a>一. mysql 的全文索引</h2><p>从MySQL 5.7开始，MySQL内置了ngram全文检索插件，用来支持中文分词，并且对MyISAM和InnoDB引擎有效。</p>\n<ol>\n<li><p>必要的参数设置</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 /etc/mysql/mysql.conf.d/mysqld.cnf 中添加分词以及最小词语长度</span></span><br><span class=\"line\">ft_min_word_len = 2</span><br><span class=\"line\">ngram_token_size = 2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'ft_min_word_len = 2</span></span><br><span class=\"line\"><span class=\"string\">ngram_token_size = 2'</span> &gt;&gt; mysqld.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/init.d/mysql restart</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看配置</span></span><br><span class=\"line\">SHOW VARIABLES LIKE <span class=\"string\">'ft_min_word_len'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">SHOW VARIABLES LIKE <span class=\"string\">'ngram_token_size'</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>mysql 索引配置</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- CREATE FULLTEXT INDEX knowledge_knowledge_content_index ON knowledge_knowledge ( content, title );</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 这个方式创建生效成功</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> knowledge_knowledge <span class=\"keyword\">ADD</span> FULLTEXT <span class=\"keyword\">INDEX</span> knowledge_knowledge_content_index ( <span class=\"keyword\">content</span>, title ) <span class=\"keyword\">WITH</span> PARSER ngram;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>django 中适用配置</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sql = <span class=\"string\">\"SELECT * from knowledge_knowledge where match(content, title) against('原件' in BOOLEAN MODE);\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"> k = Knowledge.objects.raw(sql)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>优点: 不需要引入过多的插件，直接利用数据库的功能。<br>缺点: 随着数据量的增加性能可能成为主要瓶颈，而且不利于项目的扩展</p>\n<h2 id=\"二-drf-haystack-whoosh-jieba\"><a href=\"#二-drf-haystack-whoosh-jieba\" class=\"headerlink\" title=\"二. drf_haystack whoosh jieba\"></a>二. drf_haystack whoosh jieba</h2><p>文档参考</p>\n<ul>\n<li><a href=\"https://drf-haystack.readthedocs.io/en/latest/index.html\" target=\"_blank\" rel=\"noopener\">drf_haystack</a></li>\n</ul>\n<ol>\n<li><p>项目依赖下载</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install django-haystack</span><br><span class=\"line\">pip install drf_haystack</span><br><span class=\"line\">pip install Whoosh</span><br><span class=\"line\">pip install jieba</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决 ImportError: cannot import name connections</span></span><br><span class=\"line\"></span><br><span class=\"line\">pip uninstall haystack</span><br><span class=\"line\">pip uninstall django-haystack</span><br><span class=\"line\">pip install django-haystack</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>基本配置</p>\n<ul>\n<li><p>修改settings 文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 修改settings 文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># INSTALLED_APPS 注意放在最前面</span></span><br><span class=\"line\"></span><br><span class=\"line\">INSTALLED_APPS = [</span><br><span class=\"line\"><span class=\"string\">'django.contrib.admin'</span>,</span><br><span class=\"line\"><span class=\"string\">'django.contrib.auth'</span>,</span><br><span class=\"line\"><span class=\"string\">'django.contrib.contenttypes'</span>,</span><br><span class=\"line\"><span class=\"string\">'django.contrib.sessions'</span>,</span><br><span class=\"line\"><span class=\"string\">'django.contrib.messages'</span>,</span><br><span class=\"line\"><span class=\"string\">'django.contrib.staticfiles'</span>,</span><br><span class=\"line\"><span class=\"string\">'haystack'</span>,</span><br><span class=\"line\"><span class=\"string\">'rest_framework'</span>,</span><br><span class=\"line\"><span class=\"string\">'knowledge'</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">HAYSTACK_CONNECTIONS = &#123;</span><br><span class=\"line\"><span class=\"string\">'default'</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',</span></span><br><span class=\"line\">    <span class=\"string\">'ENGINE'</span>: <span class=\"string\">'main.whoosh_cn_backend.WhooshEngine'</span>,</span><br><span class=\"line\">    <span class=\"string\">'PATH'</span>: os.path.join(os.path.dirname(__file__), <span class=\"string\">'whoosh_index'</span>),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当添加、修改、删除数据时，自动生成索引</span></span><br><span class=\"line\">HAYSTACK_SIGNAL_PROCESSOR = <span class=\"string\">'haystack.signals.RealtimeSignalProcessor'</span></span><br><span class=\"line\"><span class=\"comment\"># 设置每页显示的结果数量</span></span><br><span class=\"line\">HAYSTACK_SEARCH_RESULTS_PER_PAGE = <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加索引配置文件，项目中新建 search_indexes.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> knowledge.models.Knowledge <span class=\"keyword\">import</span> Knowledge</span><br><span class=\"line\"><span class=\"keyword\">from</span> haystack <span class=\"keyword\">import</span> indexes</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KnowledgeIndex</span><span class=\"params\">(indexes.SearchIndex, indexes.Indexable)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">text = indexes.CharField(document=<span class=\"literal\">True</span>, use_template=<span class=\"literal\">True</span>)</span><br><span class=\"line\">title = indexes.CharField(model_attr=<span class=\"string\">\"title\"</span>)</span><br><span class=\"line\">content = indexes.CharField(model_attr=<span class=\"string\">\"content\"</span>)</span><br><span class=\"line\">tag = indexes.CharField(model_attr=<span class=\"string\">\"tag\"</span>)</span><br><span class=\"line\">creator = indexes.CharField(model_attr=<span class=\"string\">\"creator\"</span>)</span><br><span class=\"line\">id = indexes.CharField(model_attr=<span class=\"string\">\"pk\"</span>)</span><br><span class=\"line\">autocomplete = indexes.EdgeNgramField()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@staticmethod</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">prepare_autocomplete</span><span class=\"params\">(obj)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\" \"</span>.join((</span><br><span class=\"line\">    obj.title,</span><br><span class=\"line\">    ))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_model</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Knowledge</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index_queryset</span><span class=\"params\">(self, using=None)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.get_model().objects.all()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结巴分词替换whoosh 默认的分词</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 拷贝 `haystack/backends/whoosh_backends.py` 到当前目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 搜索 并修改</span></span><br><span class=\"line\">schema_fields[field_class.index_fieldname] = TEXT(stored=<span class=\"literal\">True</span>, analyzer=StemmingAnalyzer(), field_boost=field_class.boost, sortable=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> jieba.analyse <span class=\"keyword\">import</span> ChineseAnalyzer</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">#注意先找到这个再修改，而不是直接添加  </span></span><br><span class=\"line\">schema_fields[field_class.index_fieldname] = TEXT(stored=<span class=\"literal\">True</span>, analyzer=ChineseAnalyzer(),field_boost=field_class.boost, sortable=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置 路由 视图 序列化</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. urls.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> routers</span><br><span class=\"line\"></span><br><span class=\"line\">router = routers.SimpleRouter(trailing_slash=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">router.register(<span class=\"string\">\"location/search\"</span>, KnowledgeSearchViewSet, base_name=<span class=\"string\">\"location-search\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">router.register(<span class=\"string\">\"search\"</span>, viewset=SearchViewSet, base_name=<span class=\"string\">\"search\"</span>)  <span class=\"comment\"># MLT name will be 'search-more-like-this'.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. serializers.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> drf_haystack.serializers <span class=\"keyword\">import</span> HaystackSerializer</span><br><span class=\"line\"><span class=\"keyword\">from</span> knowledge.search_indexes <span class=\"keyword\">import</span> KnowledgeIndex</span><br><span class=\"line\"><span class=\"keyword\">from</span> drf_haystack.serializers <span class=\"keyword\">import</span> HaystackSerializer</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KnowledgeSearchSerializer</span><span class=\"params\">(HaystackSerializer)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># more_like_this = serializers.HyperlinkedIdentityField(view_name=\"search-more-like-this\", read_only=True)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        index_classes = [KnowledgeIndex]</span><br><span class=\"line\">        fields = [<span class=\"string\">'title'</span>, <span class=\"string\">'tag'</span>, <span class=\"string\">'content'</span>, <span class=\"string\">'creator'</span>, <span class=\"string\">'id'</span>, <span class=\"string\">'autocomplete'</span>]</span><br><span class=\"line\">        ignore_fields = [<span class=\"string\">\"autocomplete\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutocompleteSerializer</span><span class=\"params\">(HaystackSerializer)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        index_classes = [KnowledgeIndex]</span><br><span class=\"line\">        fields = [<span class=\"string\">\"address\"</span>, <span class=\"string\">\"city\"</span>, <span class=\"string\">\"zip_code\"</span>, <span class=\"string\">\"autocomplete\"</span>]</span><br><span class=\"line\">        ignore_fields = [<span class=\"string\">\"autocomplete\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># The `field_aliases` attribute can be used in order to alias a</span></span><br><span class=\"line\">        <span class=\"comment\"># query parameter to a field attribute. In this case a query like</span></span><br><span class=\"line\">        <span class=\"comment\"># /search/?q=oslo would alias the `q` parameter to the `autocomplete`</span></span><br><span class=\"line\">        <span class=\"comment\"># field on the index.</span></span><br><span class=\"line\">        field_aliases = &#123;</span><br><span class=\"line\">            <span class=\"string\">\"q\"</span>: <span class=\"string\">\"autocomplete\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SearchSerializer</span><span class=\"params\">(HaystackSerializer)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    more_like_this = serializers.HyperlinkedIdentityField(view_name=<span class=\"string\">\"search-more-like-this\"</span>, read_only=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        index_classes = [KnowledgeIndex]</span><br><span class=\"line\">        fields = [<span class=\"string\">'title'</span>, <span class=\"string\">'tag'</span>, <span class=\"string\">'content'</span>, <span class=\"string\">'creator'</span>, <span class=\"string\">'id'</span>]</span><br><span class=\"line\"><span class=\"comment\"># 3. views.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> drf_haystack.viewsets <span class=\"keyword\">import</span> HaystackViewSet</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> knowledge.serializers.KnowledgeSerializer <span class=\"keyword\">import</span> KnowledgeSearchSerializer, AutocompleteSerializer, SearchSerializer</span><br><span class=\"line\"><span class=\"keyword\">from</span> drf_haystack.filters <span class=\"keyword\">import</span> HaystackAutocompleteFilter</span><br><span class=\"line\"><span class=\"keyword\">from</span> drf_haystack.viewsets <span class=\"keyword\">import</span> HaystackViewSet</span><br><span class=\"line\"><span class=\"keyword\">from</span> drf_haystack.mixins <span class=\"keyword\">import</span> MoreLikeThisMixin</span><br><span class=\"line\"><span class=\"keyword\">from</span> knowledge.models.Knowledge <span class=\"keyword\">import</span> Knowledge</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ViewSet</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KnowledgeSearchViewSet</span><span class=\"params\">(HaystackViewSet)</span>:</span></span><br><span class=\"line\">    index_models = [Knowledge]</span><br><span class=\"line\">    serializer_class = KnowledgeSearchSerializer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutocompleteSearchViewSet</span><span class=\"params\">(HaystackViewSet)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    index_models = [Knowledge]</span><br><span class=\"line\">    serializer_class = AutocompleteSerializer</span><br><span class=\"line\">    filter_backends = [HaystackAutocompleteFilter]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SearchViewSet</span><span class=\"params\">(MoreLikeThisMixin, HaystackViewSet)</span>:</span></span><br><span class=\"line\">    index_models = [Knowledge]</span><br><span class=\"line\">    serializer_class = SearchSerializer</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成索引</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 manage.py rebuild_index</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>使用搜索</p>\n<p> 浏览器访问: <a href=\"http://hotpot-local.bkjk-inc.com:18000/api/v1/knowledge/search?content=span\" target=\"_blank\" rel=\"noopener\">dsf_full_search</a></p>\n<p> 注意: 这里有个问题不带条件搜索默认为空，但是使用默认的whoosh 分词，就会是所有的文档</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-mysql-的全文索引\"><a href=\"#一-mysql-的全文索引\" class=\"headerlink\" title=\"一. mysql 的全文索引\"></a>一. mysql 的全文索引</h2><p>从MySQL 5.7开始，MySQL内置了ngram全文检索插件，用来支持中文分词，并且对MyISAM和InnoDB引擎有效。</p>\n<ol>\n<li><p>必要的参数设置</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 /etc/mysql/mysql.conf.d/mysqld.cnf 中添加分词以及最小词语长度</span></span><br><span class=\"line\">ft_min_word_len = 2</span><br><span class=\"line\">ngram_token_size = 2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'ft_min_word_len = 2</span></span><br><span class=\"line\"><span class=\"string\">ngram_token_size = 2'</span> &gt;&gt; mysqld.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/init.d/mysql restart</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看配置</span></span><br><span class=\"line\">SHOW VARIABLES LIKE <span class=\"string\">'ft_min_word_len'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">SHOW VARIABLES LIKE <span class=\"string\">'ngram_token_size'</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>mysql 索引配置</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- CREATE FULLTEXT INDEX knowledge_knowledge_content_index ON knowledge_knowledge ( content, title );</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 这个方式创建生效成功</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> knowledge_knowledge <span class=\"keyword\">ADD</span> FULLTEXT <span class=\"keyword\">INDEX</span> knowledge_knowledge_content_index ( <span class=\"keyword\">content</span>, title ) <span class=\"keyword\">WITH</span> PARSER ngram;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>django 中适用配置</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sql = <span class=\"string\">\"SELECT * from knowledge_knowledge where match(content, title) against('原件' in BOOLEAN MODE);\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"> k = Knowledge.objects.raw(sql)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>优点: 不需要引入过多的插件，直接利用数据库的功能。<br>缺点: 随着数据量的增加性能可能成为主要瓶颈，而且不利于项目的扩展</p>\n<h2 id=\"二-drf-haystack-whoosh-jieba\"><a href=\"#二-drf-haystack-whoosh-jieba\" class=\"headerlink\" title=\"二. drf_haystack whoosh jieba\"></a>二. drf_haystack whoosh jieba</h2><p>文档参考</p>\n<ul>\n<li><a href=\"https://drf-haystack.readthedocs.io/en/latest/index.html\" target=\"_blank\" rel=\"noopener\">drf_haystack</a></li>\n</ul>\n<ol>\n<li><p>项目依赖下载</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install django-haystack</span><br><span class=\"line\">pip install drf_haystack</span><br><span class=\"line\">pip install Whoosh</span><br><span class=\"line\">pip install jieba</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决 ImportError: cannot import name connections</span></span><br><span class=\"line\"></span><br><span class=\"line\">pip uninstall haystack</span><br><span class=\"line\">pip uninstall django-haystack</span><br><span class=\"line\">pip install django-haystack</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>基本配置</p>\n<ul>\n<li><p>修改settings 文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 修改settings 文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># INSTALLED_APPS 注意放在最前面</span></span><br><span class=\"line\"></span><br><span class=\"line\">INSTALLED_APPS = [</span><br><span class=\"line\"><span class=\"string\">'django.contrib.admin'</span>,</span><br><span class=\"line\"><span class=\"string\">'django.contrib.auth'</span>,</span><br><span class=\"line\"><span class=\"string\">'django.contrib.contenttypes'</span>,</span><br><span class=\"line\"><span class=\"string\">'django.contrib.sessions'</span>,</span><br><span class=\"line\"><span class=\"string\">'django.contrib.messages'</span>,</span><br><span class=\"line\"><span class=\"string\">'django.contrib.staticfiles'</span>,</span><br><span class=\"line\"><span class=\"string\">'haystack'</span>,</span><br><span class=\"line\"><span class=\"string\">'rest_framework'</span>,</span><br><span class=\"line\"><span class=\"string\">'knowledge'</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">HAYSTACK_CONNECTIONS = &#123;</span><br><span class=\"line\"><span class=\"string\">'default'</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',</span></span><br><span class=\"line\">    <span class=\"string\">'ENGINE'</span>: <span class=\"string\">'main.whoosh_cn_backend.WhooshEngine'</span>,</span><br><span class=\"line\">    <span class=\"string\">'PATH'</span>: os.path.join(os.path.dirname(__file__), <span class=\"string\">'whoosh_index'</span>),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当添加、修改、删除数据时，自动生成索引</span></span><br><span class=\"line\">HAYSTACK_SIGNAL_PROCESSOR = <span class=\"string\">'haystack.signals.RealtimeSignalProcessor'</span></span><br><span class=\"line\"><span class=\"comment\"># 设置每页显示的结果数量</span></span><br><span class=\"line\">HAYSTACK_SEARCH_RESULTS_PER_PAGE = <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加索引配置文件，项目中新建 search_indexes.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> knowledge.models.Knowledge <span class=\"keyword\">import</span> Knowledge</span><br><span class=\"line\"><span class=\"keyword\">from</span> haystack <span class=\"keyword\">import</span> indexes</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KnowledgeIndex</span><span class=\"params\">(indexes.SearchIndex, indexes.Indexable)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">text = indexes.CharField(document=<span class=\"literal\">True</span>, use_template=<span class=\"literal\">True</span>)</span><br><span class=\"line\">title = indexes.CharField(model_attr=<span class=\"string\">\"title\"</span>)</span><br><span class=\"line\">content = indexes.CharField(model_attr=<span class=\"string\">\"content\"</span>)</span><br><span class=\"line\">tag = indexes.CharField(model_attr=<span class=\"string\">\"tag\"</span>)</span><br><span class=\"line\">creator = indexes.CharField(model_attr=<span class=\"string\">\"creator\"</span>)</span><br><span class=\"line\">id = indexes.CharField(model_attr=<span class=\"string\">\"pk\"</span>)</span><br><span class=\"line\">autocomplete = indexes.EdgeNgramField()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@staticmethod</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">prepare_autocomplete</span><span class=\"params\">(obj)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\" \"</span>.join((</span><br><span class=\"line\">    obj.title,</span><br><span class=\"line\">    ))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_model</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Knowledge</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index_queryset</span><span class=\"params\">(self, using=None)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.get_model().objects.all()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结巴分词替换whoosh 默认的分词</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 拷贝 `haystack/backends/whoosh_backends.py` 到当前目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 搜索 并修改</span></span><br><span class=\"line\">schema_fields[field_class.index_fieldname] = TEXT(stored=<span class=\"literal\">True</span>, analyzer=StemmingAnalyzer(), field_boost=field_class.boost, sortable=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> jieba.analyse <span class=\"keyword\">import</span> ChineseAnalyzer</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">#注意先找到这个再修改，而不是直接添加  </span></span><br><span class=\"line\">schema_fields[field_class.index_fieldname] = TEXT(stored=<span class=\"literal\">True</span>, analyzer=ChineseAnalyzer(),field_boost=field_class.boost, sortable=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置 路由 视图 序列化</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. urls.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> routers</span><br><span class=\"line\"></span><br><span class=\"line\">router = routers.SimpleRouter(trailing_slash=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">router.register(<span class=\"string\">\"location/search\"</span>, KnowledgeSearchViewSet, base_name=<span class=\"string\">\"location-search\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">router.register(<span class=\"string\">\"search\"</span>, viewset=SearchViewSet, base_name=<span class=\"string\">\"search\"</span>)  <span class=\"comment\"># MLT name will be 'search-more-like-this'.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. serializers.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> drf_haystack.serializers <span class=\"keyword\">import</span> HaystackSerializer</span><br><span class=\"line\"><span class=\"keyword\">from</span> knowledge.search_indexes <span class=\"keyword\">import</span> KnowledgeIndex</span><br><span class=\"line\"><span class=\"keyword\">from</span> drf_haystack.serializers <span class=\"keyword\">import</span> HaystackSerializer</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KnowledgeSearchSerializer</span><span class=\"params\">(HaystackSerializer)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># more_like_this = serializers.HyperlinkedIdentityField(view_name=\"search-more-like-this\", read_only=True)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        index_classes = [KnowledgeIndex]</span><br><span class=\"line\">        fields = [<span class=\"string\">'title'</span>, <span class=\"string\">'tag'</span>, <span class=\"string\">'content'</span>, <span class=\"string\">'creator'</span>, <span class=\"string\">'id'</span>, <span class=\"string\">'autocomplete'</span>]</span><br><span class=\"line\">        ignore_fields = [<span class=\"string\">\"autocomplete\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutocompleteSerializer</span><span class=\"params\">(HaystackSerializer)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        index_classes = [KnowledgeIndex]</span><br><span class=\"line\">        fields = [<span class=\"string\">\"address\"</span>, <span class=\"string\">\"city\"</span>, <span class=\"string\">\"zip_code\"</span>, <span class=\"string\">\"autocomplete\"</span>]</span><br><span class=\"line\">        ignore_fields = [<span class=\"string\">\"autocomplete\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># The `field_aliases` attribute can be used in order to alias a</span></span><br><span class=\"line\">        <span class=\"comment\"># query parameter to a field attribute. In this case a query like</span></span><br><span class=\"line\">        <span class=\"comment\"># /search/?q=oslo would alias the `q` parameter to the `autocomplete`</span></span><br><span class=\"line\">        <span class=\"comment\"># field on the index.</span></span><br><span class=\"line\">        field_aliases = &#123;</span><br><span class=\"line\">            <span class=\"string\">\"q\"</span>: <span class=\"string\">\"autocomplete\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SearchSerializer</span><span class=\"params\">(HaystackSerializer)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    more_like_this = serializers.HyperlinkedIdentityField(view_name=<span class=\"string\">\"search-more-like-this\"</span>, read_only=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        index_classes = [KnowledgeIndex]</span><br><span class=\"line\">        fields = [<span class=\"string\">'title'</span>, <span class=\"string\">'tag'</span>, <span class=\"string\">'content'</span>, <span class=\"string\">'creator'</span>, <span class=\"string\">'id'</span>]</span><br><span class=\"line\"><span class=\"comment\"># 3. views.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> drf_haystack.viewsets <span class=\"keyword\">import</span> HaystackViewSet</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> knowledge.serializers.KnowledgeSerializer <span class=\"keyword\">import</span> KnowledgeSearchSerializer, AutocompleteSerializer, SearchSerializer</span><br><span class=\"line\"><span class=\"keyword\">from</span> drf_haystack.filters <span class=\"keyword\">import</span> HaystackAutocompleteFilter</span><br><span class=\"line\"><span class=\"keyword\">from</span> drf_haystack.viewsets <span class=\"keyword\">import</span> HaystackViewSet</span><br><span class=\"line\"><span class=\"keyword\">from</span> drf_haystack.mixins <span class=\"keyword\">import</span> MoreLikeThisMixin</span><br><span class=\"line\"><span class=\"keyword\">from</span> knowledge.models.Knowledge <span class=\"keyword\">import</span> Knowledge</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ViewSet</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KnowledgeSearchViewSet</span><span class=\"params\">(HaystackViewSet)</span>:</span></span><br><span class=\"line\">    index_models = [Knowledge]</span><br><span class=\"line\">    serializer_class = KnowledgeSearchSerializer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutocompleteSearchViewSet</span><span class=\"params\">(HaystackViewSet)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    index_models = [Knowledge]</span><br><span class=\"line\">    serializer_class = AutocompleteSerializer</span><br><span class=\"line\">    filter_backends = [HaystackAutocompleteFilter]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SearchViewSet</span><span class=\"params\">(MoreLikeThisMixin, HaystackViewSet)</span>:</span></span><br><span class=\"line\">    index_models = [Knowledge]</span><br><span class=\"line\">    serializer_class = SearchSerializer</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成索引</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 manage.py rebuild_index</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>使用搜索</p>\n<p> 浏览器访问: <a href=\"http://hotpot-local.bkjk-inc.com:18000/api/v1/knowledge/search?content=span\" target=\"_blank\" rel=\"noopener\">dsf_full_search</a></p>\n<p> 注意: 这里有个问题不带条件搜索默认为空，但是使用默认的whoosh 分词，就会是所有的文档</p>\n</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckgrr9wv90001geqlh0103mst","category_id":"ckgrr9wvl0009geql6hfy9n9e","_id":"ckgrr9ww9000xgeql9ght1ikb"},{"post_id":"ckgrr9wva0002geqlafsa20ii","category_id":"ckgrr9wvl0009geql6hfy9n9e","_id":"ckgrr9ww9000zgeql7wxf96ei"},{"post_id":"ckgrr9wvb0003geql6it6aoy9","category_id":"ckgrr9wvv000igeqlc117g0nf","_id":"ckgrr9ww90011geqlgxiehxe3"},{"post_id":"ckgrr9wvb0004geqlc3to5ta0","category_id":"ckgrr9wvv000igeqlc117g0nf","_id":"ckgrr9wwb0015geql1nmfe6ya"},{"post_id":"ckgrr9wvc0005geql0ka3euh0","category_id":"ckgrr9wvl0009geql6hfy9n9e","_id":"ckgrr9wwb0017geql4b9qgnua"},{"post_id":"ckgrr9wvh0006geqlfvupdpcx","category_id":"ckgrr9wvl0009geql6hfy9n9e","_id":"ckgrr9wwc001bgeqla99y3nee"},{"post_id":"ckgrr9wvm000ageql7hxcbxhg","category_id":"ckgrr9wvv000igeqlc117g0nf","_id":"ckgrr9wwc001cgeqlbwaa7kxy"},{"post_id":"ckgrr9wvq000cgeql6nr80sel","category_id":"ckgrr9wvl0009geql6hfy9n9e","_id":"ckgrr9wwd001fgeql6y4s8x64"},{"post_id":"ckgrr9wvv000hgeql2649h1vn","category_id":"ckgrr9wvl0009geql6hfy9n9e","_id":"ckgrr9wwe001ggeqlehnpd4ba"},{"post_id":"ckgrr9wvw000lgeql919pgwy8","category_id":"ckgrr9wvl0009geql6hfy9n9e","_id":"ckgrr9wwe001igeql2u105ygg"},{"post_id":"ckgrr9wvz000rgeql4tvt7shj","category_id":"ckgrr9wvl0009geql6hfy9n9e","_id":"ckgrr9wwe001jgeql4347hngj"},{"post_id":"ckgrr9wvt000ggeql63m6hnhx","category_id":"ckgrr9ww9000wgeql4qam4zpz","_id":"ckgrr9wwm001qgeql32wn32g5"},{"post_id":"ckgrr9wvw000kgeqlfzkrbugr","category_id":"ckgrr9wwa0013geqlfkm39try","_id":"ckgrr9wwm001sgeql6347go6e"},{"post_id":"ckgrr9wvx000ogeqleh7g80x8","category_id":"ckgrr9ww9000wgeql4qam4zpz","_id":"ckgrr9wwn001ugeqle3ee433i"},{"post_id":"ckgrr9wvy000pgeql0ryt2p9h","category_id":"ckgrr9wwa0013geqlfkm39try","_id":"ckgrr9wwn001wgeql5dw02qeu"}],"PostTag":[{"post_id":"ckgrr9wv20000geqlgega11q6","tag_id":"ckgrr9wvj0008geql9ontezui","_id":"ckgrr9ww8000ugeql4ze0dcii"},{"post_id":"ckgrr9wv90001geqlh0103mst","tag_id":"ckgrr9wvs000egeql6a16g53u","_id":"ckgrr9ww9000ygeql9kexbuqq"},{"post_id":"ckgrr9wva0002geqlafsa20ii","tag_id":"ckgrr9wvw000jgeqlevbjaff6","_id":"ckgrr9ww90010geqlcs8d18lh"},{"post_id":"ckgrr9wvb0003geql6it6aoy9","tag_id":"ckgrr9wvx000ngeqlgo0lbaeg","_id":"ckgrr9wwa0014geql9zg1g9kk"},{"post_id":"ckgrr9wvb0004geqlc3to5ta0","tag_id":"ckgrr9wvz000sgeqlgoj5d3a4","_id":"ckgrr9wwb0016geqlgxc73iwz"},{"post_id":"ckgrr9wvc0005geql0ka3euh0","tag_id":"ckgrr9ww0000tgeqlamef4lml","_id":"ckgrr9wwc001ageql6mej1cb9"},{"post_id":"ckgrr9wvh0006geqlfvupdpcx","tag_id":"ckgrr9ww8000vgeql8envdkaq","_id":"ckgrr9wwm001pgeqlgzo78wps"},{"post_id":"ckgrr9wvm000ageql7hxcbxhg","tag_id":"ckgrr9ww90012geql95ju5rx6","_id":"ckgrr9wwm001rgeql9cwt6jjg"},{"post_id":"ckgrr9wvq000cgeql6nr80sel","tag_id":"ckgrr9wwb0018geql24bp6yor","_id":"ckgrr9wwn001tgeqlf9n8788l"},{"post_id":"ckgrr9wvt000ggeql63m6hnhx","tag_id":"ckgrr9wwd001egeqlc7asd4x8","_id":"ckgrr9wwn001vgeqldcmia1d9"},{"post_id":"ckgrr9wvv000hgeql2649h1vn","tag_id":"ckgrr9wwe001hgeql1kvn8zjm","_id":"ckgrr9wwn001xgeqldlsz5nej"},{"post_id":"ckgrr9wvw000kgeqlfzkrbugr","tag_id":"ckgrr9wwe001kgeqlcaiscski","_id":"ckgrr9wwn001ygeql4862968c"},{"post_id":"ckgrr9wvw000lgeql919pgwy8","tag_id":"ckgrr9wwf001lgeql52kk3sm6","_id":"ckgrr9wwn001zgeqld6ve28mm"},{"post_id":"ckgrr9wvx000ogeqleh7g80x8","tag_id":"ckgrr9wwb0018geql24bp6yor","_id":"ckgrr9wwn0020geqlgank5q3p"},{"post_id":"ckgrr9wvy000pgeql0ryt2p9h","tag_id":"ckgrr9wwh001ngeqldjaoeo92","_id":"ckgrr9wwn0021geqlagix9ql0"},{"post_id":"ckgrr9wvz000rgeql4tvt7shj","tag_id":"ckgrr9wwh001ogeqlfykw9695","_id":"ckgrr9wwo0022geql7x9l5nxs"}],"Tag":[{"name":"博客搭建","_id":"ckgrr9wvj0008geql9ontezui"},{"name":"linux","_id":"ckgrr9wvs000egeql6a16g53u"},{"name":"jupyter","_id":"ckgrr9wvw000jgeqlevbjaff6"},{"name":"mxnet","_id":"ckgrr9wvx000ngeqlgo0lbaeg"},{"name":"cuda","_id":"ckgrr9wvz000sgeqlgoj5d3a4"},{"name":"消息队列","_id":"ckgrr9ww0000tgeqlamef4lml"},{"name":"数据仓库","_id":"ckgrr9ww8000vgeql8envdkaq"},{"name":"换脸","_id":"ckgrr9ww90012geql95ju5rx6"},{"name":"python","_id":"ckgrr9wwb0018geql24bp6yor"},{"name":"leetcode","_id":"ckgrr9wwd001egeqlc7asd4x8"},{"name":"tornado","_id":"ckgrr9wwe001hgeql1kvn8zjm"},{"name":"react","_id":"ckgrr9wwe001kgeqlcaiscski"},{"name":"日常","_id":"ckgrr9wwf001lgeql52kk3sm6"},{"name":"函数式编程","_id":"ckgrr9wwh001ngeqldjaoeo92"},{"name":"全文检索","_id":"ckgrr9wwh001ogeqlfykw9695"}]}}